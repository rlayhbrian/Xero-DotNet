<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xero.NetStandard.OAuth2</name>
    </assembly>
    <members>
        <member name="T:Xero.DotNet.OAuth2.Api.IAccountingApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateAccountAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Account)">
            <summary>
            Creates a new chart of accounts
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="account">Account object in body of request</param>
            <returns>Task of Accounts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateAccountAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Account)">
            <summary>
            Creates a new chart of accounts
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="account">Account object in body of request</param>
            <returns>Task of ApiResponse (Accounts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateAccountAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment on a specific account
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateAccountAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment on a specific account
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBankTransactionAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment for a specific bank transaction by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBankTransactionAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment for a specific bank transaction by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBankTransactionHistoryRecordAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific bank transactions
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBankTransactionHistoryRecordAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific bank transactions
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBankTransactionsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BankTransactions,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates one or more spent or received money transaction
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactions">BankTransactions with an array of BankTransaction objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of BankTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBankTransactionsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BankTransactions,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates one or more spent or received money transaction
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactions">BankTransactions with an array of BankTransaction objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (BankTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBankTransferAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BankTransfers)">
            <summary>
            Creates a bank transfer
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransfers">BankTransfers with array of BankTransfer objects in request body</param>
            <returns>Task of BankTransfers</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBankTransferAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BankTransfers)">
            <summary>
            Creates a bank transfer
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransfers">BankTransfers with array of BankTransfer objects in request body</param>
            <returns>Task of ApiResponse (BankTransfers)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBankTransferAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBankTransferAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBankTransferHistoryRecordAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific bank transfer
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBankTransferHistoryRecordAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific bank transfer
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBatchPaymentAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BatchPayments,System.Nullable{System.Boolean})">
            <summary>
            Creates one or many batch payments for invoices
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPayments">BatchPayments with an array of Payments in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of BatchPayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBatchPaymentAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BatchPayments,System.Nullable{System.Boolean})">
            <summary>
            Creates one or many batch payments for invoices
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPayments">BatchPayments with an array of Payments in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (BatchPayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBatchPaymentHistoryRecordAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific batch payment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentID">Unique identifier for BatchPayment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBatchPaymentHistoryRecordAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific batch payment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentID">Unique identifier for BatchPayment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBrandingThemePaymentServicesAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.PaymentService)">
            <summary>
            Creates a new custom payment service for a specific branding theme
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
            <param name="paymentService">PaymentService object in body of request</param>
            <returns>Task of PaymentServices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateBrandingThemePaymentServicesAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.PaymentService)">
            <summary>
            Creates a new custom payment service for a specific branding theme
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
            <param name="paymentService">PaymentService object in body of request</param>
            <returns>Task of ApiResponse (PaymentServices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateContactAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateContactAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateContactGroupAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ContactGroups)">
            <summary>
            Creates a contact group
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroups">ContactGroups with an array of names in request body</param>
            <returns>Task of ContactGroups</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateContactGroupAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ContactGroups)">
            <summary>
            Creates a contact group
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroups">ContactGroups with an array of names in request body</param>
            <returns>Task of ApiResponse (ContactGroups)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateContactGroupContactsAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Contacts)">
            <summary>
            Creates contacts to a specific contact group
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <param name="contacts">Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateContactGroupContactsAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Contacts)">
            <summary>
            Creates contacts to a specific contact group
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <param name="contacts">Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateContactHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a new history record for a specific contact
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateContactHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a new history record for a specific contact
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateContactsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Contacts,System.Nullable{System.Boolean})">
            <summary>
            Creates multiple contacts (bulk) in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contacts">Contacts with an array of Contact objects to create in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateContactsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Contacts,System.Nullable{System.Boolean})">
            <summary>
            Creates multiple contacts (bulk) in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contacts">Contacts with an array of Contact objects to create in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateCreditNoteAllocationAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Allocations,System.Nullable{System.Boolean})">
            <summary>
            Creates allocation for a specific credit note
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="allocations">Allocations with array of Allocation object in body of request.</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Allocations</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateCreditNoteAllocationAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Allocations,System.Nullable{System.Boolean})">
            <summary>
            Creates allocation for a specific credit note
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="allocations">Allocations with array of Allocation object in body of request.</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Allocations)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateCreditNoteAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[],System.Nullable{System.Boolean})">
            <summary>
            Creates an attachment for a specific credit note
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateCreditNoteAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[],System.Nullable{System.Boolean})">
            <summary>
            Creates an attachment for a specific credit note
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateCreditNoteHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Retrieves history records of a specific credit note
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateCreditNoteHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Retrieves history records of a specific credit note
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateCreditNotesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.CreditNotes,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates a new credit note
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNotes">Credit Notes with array of CreditNote object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of CreditNotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateCreditNotesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.CreditNotes,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates a new credit note
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNotes">Credit Notes with array of CreditNote object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (CreditNotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateCurrencyAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Currency)">
            <summary>
            Create a new currency for a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="currency">Currency object in the body of request</param>
            <returns>Task of Currencies</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateCurrencyAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Currency)">
            <summary>
            Create a new currency for a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="currency">Currency object in the body of request</param>
            <returns>Task of ApiResponse (Currencies)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateEmployeesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Employees,System.Nullable{System.Boolean})">
            <summary>
            Creates new employees used in Xero payrun
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employees">Employees with array of Employee object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateEmployeesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Employees,System.Nullable{System.Boolean})">
            <summary>
            Creates new employees used in Xero payrun
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employees">Employees with array of Employee object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateExpenseClaimHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific expense claim
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateExpenseClaimHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific expense claim
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateExpenseClaimsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ExpenseClaims)">
            <summary>
            Creates expense claims
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaims">ExpenseClaims with array of ExpenseClaim object in body of request</param>
            <returns>Task of ExpenseClaims</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateExpenseClaimsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ExpenseClaims)">
            <summary>
            Creates expense claims
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaims">ExpenseClaims with array of ExpenseClaim object in body of request</param>
            <returns>Task of ApiResponse (ExpenseClaims)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateInvoiceAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[],System.Nullable{System.Boolean})">
            <summary>
            Creates an attachment for a specific invoice or purchase bill by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateInvoiceAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[],System.Nullable{System.Boolean})">
            <summary>
            Creates an attachment for a specific invoice or purchase bill by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateInvoiceHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateInvoiceHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateInvoicesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Invoices,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates one or more sales invoices or purchase bills
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoices">Invoices with an array of invoice objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Invoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateInvoicesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Invoices,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates one or more sales invoices or purchase bills
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoices">Invoices with an array of invoice objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Invoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateItemHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific item
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateItemHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific item
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateItemsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Items,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates one or more items
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="items">Items with an array of Item objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Items</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateItemsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Items,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates one or more items
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="items">Items with an array of Item objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Items)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateLinkedTransactionAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.LinkedTransaction)">
            <summary>
            Creates linked transactions (billable expenses)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransaction">LinkedTransaction object in body of request</param>
            <returns>Task of LinkedTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateLinkedTransactionAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.LinkedTransaction)">
            <summary>
            Creates linked transactions (billable expenses)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransaction">LinkedTransaction object in body of request</param>
            <returns>Task of ApiResponse (LinkedTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateManualJournalAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates a specific attachment for a specific manual journal by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateManualJournalAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates a specific attachment for a specific manual journal by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateManualJournalHistoryRecordAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific manual journal
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateManualJournalHistoryRecordAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific manual journal
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateManualJournalsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ManualJournals,System.Nullable{System.Boolean})">
            <summary>
            Creates one or more manual journals
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ManualJournals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateManualJournalsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ManualJournals,System.Nullable{System.Boolean})">
            <summary>
            Creates one or more manual journals
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (ManualJournals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateOverpaymentAllocationsAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Allocations,System.Nullable{System.Boolean})">
            <summary>
            Creates a single allocation for a specific overpayment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <param name="allocations">Allocations array with Allocation object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Allocations</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateOverpaymentAllocationsAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Allocations,System.Nullable{System.Boolean})">
            <summary>
            Creates a single allocation for a specific overpayment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <param name="allocations">Allocations array with Allocation object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Allocations)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateOverpaymentHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific overpayment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateOverpaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific overpayment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePaymentAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Payment)">
            <summary>
            Creates a single payment for invoice or credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payment">Request body with a single Payment object</param>
            <returns>Task of Payments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePaymentAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Payment)">
            <summary>
            Creates a single payment for invoice or credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payment">Request body with a single Payment object</param>
            <returns>Task of ApiResponse (Payments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePaymentHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific payment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific payment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePaymentServiceAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.PaymentServices)">
            <summary>
            Creates a payment service
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
            <returns>Task of PaymentServices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePaymentServiceAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.PaymentServices)">
            <summary>
            Creates a payment service
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
            <returns>Task of ApiResponse (PaymentServices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePaymentsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Payments,System.Nullable{System.Boolean})">
            <summary>
            Creates multiple payments for invoices or credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payments">Payments array with Payment object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Payments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePaymentsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Payments,System.Nullable{System.Boolean})">
            <summary>
            Creates multiple payments for invoices or credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payments">Payments array with Payment object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Payments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePrepaymentAllocationsAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Allocations,System.Nullable{System.Boolean})">
            <summary>
            Allows you to create an Allocation for prepayments
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <param name="allocations">Allocations with an array of Allocation object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Allocations</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePrepaymentAllocationsAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Allocations,System.Nullable{System.Boolean})">
            <summary>
            Allows you to create an Allocation for prepayments
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <param name="allocations">Allocations with an array of Allocation object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Allocations)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePrepaymentHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific prepayment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePrepaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific prepayment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePurchaseOrderAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates attachment for a specific purchase order
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePurchaseOrderAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates attachment for a specific purchase order
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePurchaseOrderHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific purchase orders
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePurchaseOrderHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific purchase orders
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePurchaseOrdersAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.PurchaseOrders,System.Nullable{System.Boolean})">
            <summary>
            Creates one or more purchase orders
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrders">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of PurchaseOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreatePurchaseOrdersAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.PurchaseOrders,System.Nullable{System.Boolean})">
            <summary>
            Creates one or more purchase orders
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrders">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (PurchaseOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateQuoteAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates attachment for a specific quote
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateQuoteAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates attachment for a specific quote
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateQuoteHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific quote
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateQuoteHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific quote
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateQuotesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Quotes,System.Nullable{System.Boolean})">
            <summary>
            Create one or more quotes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quotes">Quotes with an array of Quote object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Quotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateQuotesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Quotes,System.Nullable{System.Boolean})">
            <summary>
            Create one or more quotes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quotes">Quotes with an array of Quote object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Quotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateReceiptAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Receipts,System.Nullable{System.Int32})">
            <summary>
            Creates draft expense claim receipts for any user
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receipts">Receipts with an array of Receipt object in body of request</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Receipts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateReceiptAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Receipts,System.Nullable{System.Int32})">
            <summary>
            Creates draft expense claim receipts for any user
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receipts">Receipts with an array of Receipt object in body of request</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Receipts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateReceiptAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment on a specific expense claim receipts by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateReceiptAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment on a specific expense claim receipts by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateReceiptHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific receipt
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateReceiptHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific receipt
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateRepeatingInvoiceAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment from a specific repeating invoices by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment from a specific repeating invoices by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateRepeatingInvoiceHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a  history record for a specific repeating invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateRepeatingInvoiceHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a  history record for a specific repeating invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateRepeatingInvoicesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.RepeatingInvoices,System.Nullable{System.Boolean})">
            <summary>
            Creates one or more repeating invoice templates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of RepeatingInvoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateRepeatingInvoicesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.RepeatingInvoices,System.Nullable{System.Boolean})">
            <summary>
            Creates one or more repeating invoice templates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateTaxRatesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.TaxRates)">
            <summary>
            Creates one or more tax rates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="taxRates">TaxRates array with TaxRate object in body of request</param>
            <returns>Task of TaxRates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateTaxRatesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.TaxRates)">
            <summary>
            Creates one or more tax rates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="taxRates">TaxRates array with TaxRate object in body of request</param>
            <returns>Task of ApiResponse (TaxRates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateTrackingCategoryAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.TrackingCategory)">
            <summary>
            Create tracking categories
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategory">TrackingCategory object in body of request</param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateTrackingCategoryAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.TrackingCategory)">
            <summary>
            Create tracking categories
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategory">TrackingCategory object in body of request</param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateTrackingOptionsAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.TrackingOption)">
            <summary>
            Creates options for a specific tracking category
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingOption">TrackingOption object in body of request</param>
            <returns>Task of TrackingOptions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.CreateTrackingOptionsAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.TrackingOption)">
            <summary>
            Creates options for a specific tracking category
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingOption">TrackingOption object in body of request</param>
            <returns>Task of ApiResponse (TrackingOptions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteAccountAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a chart of accounts
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <returns>Task of Accounts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteAccountAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a chart of accounts
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <returns>Task of ApiResponse (Accounts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteBatchPaymentAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BatchPaymentDelete)">
            <summary>
            Updates a specific batch payment for invoices and credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentDelete"></param>
            <returns>Task of BatchPayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteBatchPaymentAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BatchPaymentDelete)">
            <summary>
            Updates a specific batch payment for invoices and credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentDelete"></param>
            <returns>Task of ApiResponse (BatchPayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteBatchPaymentByUrlParamAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam)">
            <summary>
            Updates a specific batch payment for invoices and credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentID">Unique identifier for BatchPayment</param>
            <param name="batchPaymentDeleteByUrlParam"></param>
            <returns>Task of BatchPayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteBatchPaymentByUrlParamAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam)">
            <summary>
            Updates a specific batch payment for invoices and credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentID">Unique identifier for BatchPayment</param>
            <param name="batchPaymentDeleteByUrlParam"></param>
            <returns>Task of ApiResponse (BatchPayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteContactGroupContactAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific contact from a contact group using a unique contact Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteContactGroupContactAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific contact from a contact group using a unique contact Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteContactGroupContactsAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes all contacts from a specific contact group
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteContactGroupContactsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes all contacts from a specific contact group
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteItemAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific item
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteItemAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific item
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteLinkedTransactionAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific linked transactions (billable expenses)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteLinkedTransactionAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific linked transactions (billable expenses)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeletePaymentAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.PaymentDelete)">
            <summary>
            Updates a specific payment for invoices and credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <param name="paymentDelete"></param>
            <returns>Task of Payments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeletePaymentAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.PaymentDelete)">
            <summary>
            Updates a specific payment for invoices and credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <param name="paymentDelete"></param>
            <returns>Task of ApiResponse (Payments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteTrackingCategoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific tracking category
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteTrackingCategoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific tracking category
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteTrackingOptionsAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific option for a specific tracking category
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
            <returns>Task of TrackingOptions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.DeleteTrackingOptionsAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific option for a specific tracking category
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
            <returns>Task of ApiResponse (TrackingOptions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.EmailInvoiceAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.RequestEmpty)">
            <summary>
            Sends a copy of a specific invoice to related contact via email
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="requestEmpty"></param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.EmailInvoiceAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.RequestEmpty)">
            <summary>
            Sends a copy of a specific invoice to related contact via email
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="requestEmpty"></param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetAccountAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a single chart of accounts by using a unique account Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <returns>Task of Accounts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetAccountAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a single chart of accounts by using a unique account Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <returns>Task of ApiResponse (Accounts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetAccountAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves an attachment for a specific account by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetAccountAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves an attachment for a specific account by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetAccountAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific account using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetAccountAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific account using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetAccountAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific accounts by using a unique account Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetAccountAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific accounts by using a unique account Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetAccountsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves the full chart of accounts
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of Accounts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetAccountsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves the full chart of accounts
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (Accounts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransactionAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a single spent or received money transaction by using a unique bank transaction Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of BankTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransactionAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a single spent or received money transaction by using a unique bank transaction Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (BankTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransactionAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific bank transaction by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransactionAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific bank transaction by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransactionAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves specific attachments from a specific BankTransaction using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransactionAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves specific attachments from a specific BankTransaction using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransactionAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves any attachments from a specific bank transactions
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransactionAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves any attachments from a specific bank transactions
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransactionsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves any spent or received money transactions
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of BankTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransactionsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves any spent or received money transactions
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (BankTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransactionsHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history from a specific bank transaction using a unique bank transaction Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransactionsHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history from a specific bank transaction using a unique bank transaction Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransferAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific bank transfers by using a unique bank transfer Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <returns>Task of BankTransfers</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransferAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific bank transfers by using a unique bank transfer Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <returns>Task of ApiResponse (BankTransfers)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransferAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment on a specific bank transfer by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransferAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment on a specific bank transfer by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransferAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific bank transfer using a unique attachment ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransferAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific bank transfer using a unique attachment ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransferAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments from a specific bank transfer
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransferAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments from a specific bank transfer
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransferHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history from a specific bank transfer using a unique bank transfer Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransferHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history from a specific bank transfer using a unique bank transfer Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransfersAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves all bank transfers
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of BankTransfers</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBankTransfersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves all bank transfers
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (BankTransfers)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBatchPaymentHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history from a specific batch payment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentID">Unique identifier for BatchPayment</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBatchPaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history from a specific batch payment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentID">Unique identifier for BatchPayment</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBatchPaymentsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves either one or many batch payments for invoices
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of BatchPayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBatchPaymentsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves either one or many batch payments for invoices
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (BatchPayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBrandingThemeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific branding theme using a unique branding theme Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
            <returns>Task of BrandingThemes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBrandingThemeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific branding theme using a unique branding theme Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
            <returns>Task of ApiResponse (BrandingThemes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBrandingThemePaymentServicesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the payment services for a specific branding theme
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
            <returns>Task of PaymentServices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBrandingThemePaymentServicesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the payment services for a specific branding theme
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
            <returns>Task of ApiResponse (PaymentServices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBrandingThemesAsync(System.String,System.String)">
            <summary>
            Retrieves all the branding themes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of BrandingThemes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBrandingThemesAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves all the branding themes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (BrandingThemes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBudgetAsync(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves a specific budget, which includes budget lines
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="budgetID">Unique identifier for Budgets</param>
            <param name="dateTo">Filter by start date (optional)</param>
            <param name="dateFrom">Filter by end date (optional)</param>
            <returns>Task of Budgets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBudgetAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves a specific budget, which includes budget lines
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="budgetID">Unique identifier for Budgets</param>
            <param name="dateTo">Filter by start date (optional)</param>
            <param name="dateFrom">Filter by end date (optional)</param>
            <returns>Task of ApiResponse (Budgets)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBudgetsAsync(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieve a list of budgets
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="iDs">Filter by BudgetID. Allows you to retrieve a specific individual budget. (optional)</param>
            <param name="dateTo">Filter by start date (optional)</param>
            <param name="dateFrom">Filter by end date (optional)</param>
            <returns>Task of Budgets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetBudgetsAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieve a list of budgets
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="iDs">Filter by BudgetID. Allows you to retrieve a specific individual budget. (optional)</param>
            <param name="dateTo">Filter by start date (optional)</param>
            <param name="dateFrom">Filter by end date (optional)</param>
            <returns>Task of ApiResponse (Budgets)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific contacts in a Xero organisation using a unique contact Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific contacts in a Xero organisation using a unique contact Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific contact by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific contact by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific contact using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific contact using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific contact in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific contact in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactByContactNumberAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves a specific contact by contact number in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactByContactNumberAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Retrieves a specific contact by contact number in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactCISSettingsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves CIS settings for a specific contact in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of CISSettings</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactCISSettingsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves CIS settings for a specific contact in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of ApiResponse (CISSettings)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactGroupAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific contact group by using a unique contact group Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <returns>Task of ContactGroups</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactGroupAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific contact group by using a unique contact group Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <returns>Task of ApiResponse (ContactGroups)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactGroupsAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves the contact Id and name of each contact group
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ContactGroups</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactGroupsAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves the contact Id and name of each contact group
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (ContactGroups)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records for a specific contact
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records for a specific contact
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Retrieves all contacts in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
            <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
            <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
            <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
            <param name="searchTerm">Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields. (optional)</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetContactsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Retrieves all contacts in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
            <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
            <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
            <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
            <param name="searchTerm">Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields. (optional)</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNoteAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific credit note using a unique credit note Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of CreditNotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNoteAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific credit note using a unique credit note Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (CreditNotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNoteAsPdfAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves credit notes as PDF files
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNoteAsPdfAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves credit notes as PDF files
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNoteAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment on a specific credit note by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNoteAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment on a specific credit note by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNoteAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific credit note using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNoteAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific credit note using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNoteAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNoteAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNoteHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific credit note
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNoteHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific credit note
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNotesAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves any credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of CreditNotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCreditNotesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves any credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (CreditNotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCurrenciesAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves currencies for your Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of Currencies</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetCurrenciesAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves currencies for your Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (Currencies)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetEmployeeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee used in Xero payrun using a unique employee Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Unique identifier for a Employee</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee used in Xero payrun using a unique employee Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Unique identifier for a Employee</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetEmployeesAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves employees used in Xero payrun
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetEmployeesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves employees used in Xero payrun
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetExpenseClaimAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific expense claim using a unique expense claim Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <returns>Task of ExpenseClaims</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetExpenseClaimAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific expense claim using a unique expense claim Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <returns>Task of ApiResponse (ExpenseClaims)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetExpenseClaimHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific expense claim
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetExpenseClaimHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific expense claim
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetExpenseClaimsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves expense claims
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ExpenseClaims</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetExpenseClaimsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves expense claims
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (ExpenseClaims)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific sales invoice or purchase bill using a unique invoice Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Invoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific sales invoice or purchase bill using a unique invoice Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Invoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceAsPdfAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves invoices or purchase bills as PDF files
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceAsPdfAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves invoices or purchase bills as PDF files
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves an attachment from a specific invoice or purchase bill by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves an attachment from a specific invoice or purchase bill by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific invoice or purchase bill
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific invoice or purchase bill
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records for a specific invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records for a specific invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceRemindersAsync(System.String,System.String)">
            <summary>
            Retrieves invoice reminder settings
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of InvoiceReminders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoiceRemindersAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves invoice reminder settings
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (InvoiceReminders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoicesAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves sales invoices or purchase bills
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="iDs">Filter by a comma-separated list of InvoicesIDs. (optional)</param>
            <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. (optional)</param>
            <param name="contactIDs">Filter by a comma-separated list of ContactIDs. (optional)</param>
            <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
            <param name="includeArchived">e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response (optional)</param>
            <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
            <returns>Task of Invoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetInvoicesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves sales invoices or purchase bills
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="iDs">Filter by a comma-separated list of InvoicesIDs. (optional)</param>
            <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. (optional)</param>
            <param name="contactIDs">Filter by a comma-separated list of ContactIDs. (optional)</param>
            <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
            <param name="includeArchived">e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response (optional)</param>
            <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
            <returns>Task of ApiResponse (Invoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetItemAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific item using a unique item Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Items</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetItemAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific item using a unique item Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Items)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetItemHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history for a specific item
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetItemHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history for a specific item
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetItemsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves items
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Items</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetItemsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves items
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Items)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetJournalAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific journal using a unique journal Id.
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="journalID">Unique identifier for a Journal</param>
            <returns>Task of Journals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetJournalAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific journal using a unique journal Id.
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="journalID">Unique identifier for a Journal</param>
            <returns>Task of ApiResponse (Journals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetJournalByNumberAsync(System.String,System.String,System.Int32)">
            <summary>
            Retrieves a specific journal using a unique journal number.
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="journalNumber">Number of a Journal</param>
            <returns>Task of Journals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetJournalByNumberAsyncWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Retrieves a specific journal using a unique journal number.
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="journalNumber">Number of a Journal</param>
            <returns>Task of ApiResponse (Journals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetJournalsAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves journals
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
            <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
            <returns>Task of Journals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetJournalsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves journals
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
            <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
            <returns>Task of ApiResponse (Journals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetLinkedTransactionAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
            <returns>Task of LinkedTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetLinkedTransactionAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
            <returns>Task of ApiResponse (LinkedTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetLinkedTransactionsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves linked transactions (billable expenses)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
            <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
            <param name="sourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)</param>
            <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
            <param name="status">Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)</param>
            <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
            <returns>Task of LinkedTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetLinkedTransactionsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves linked transactions (billable expenses)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
            <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
            <param name="sourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)</param>
            <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
            <param name="status">Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)</param>
            <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
            <returns>Task of ApiResponse (LinkedTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetManualJournalAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific manual journal
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <returns>Task of ManualJournals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetManualJournalAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific manual journal
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <returns>Task of ApiResponse (ManualJournals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetManualJournalAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific manual journal by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetManualJournalAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific manual journal by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetManualJournalAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetManualJournalAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetManualJournalAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachment for a specific manual journal
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetManualJournalAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachment for a specific manual journal
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetManualJournalsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves manual journals
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
            <returns>Task of ManualJournals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetManualJournalsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves manual journals
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
            <returns>Task of ApiResponse (ManualJournals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetManualJournalsHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history for a specific manual journal
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetManualJournalsHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history for a specific manual journal
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOnlineInvoiceAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a URL to an online invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of OnlineInvoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOnlineInvoiceAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a URL to an online invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of ApiResponse (OnlineInvoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOrganisationActionsAsync(System.String,System.String)">
            <summary>
            Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation.
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of Actions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOrganisationActionsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation.
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (Actions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOrganisationCISSettingsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the CIS settings for the Xero organistaion.
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="organisationID">The unique Xero identifier for an organisation</param>
            <returns>Task of CISOrgSettings</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOrganisationCISSettingsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the CIS settings for the Xero organistaion.
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="organisationID">The unique Xero identifier for an organisation</param>
            <returns>Task of ApiResponse (CISOrgSettings)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOrganisationsAsync(System.String,System.String)">
            <summary>
            Retrieves Xero organisation details
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of Organisations</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOrganisationsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves Xero organisation details
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (Organisations)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOverpaymentAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific overpayment using a unique overpayment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <returns>Task of Overpayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOverpaymentAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific overpayment using a unique overpayment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <returns>Task of ApiResponse (Overpayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOverpaymentHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific overpayment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOverpaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific overpayment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOverpaymentsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves overpayments
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Overpayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetOverpaymentsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves overpayments
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Overpayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPaymentAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payment for invoices and credit notes using a unique payment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <returns>Task of Payments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPaymentAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payment for invoices and credit notes using a unique payment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <returns>Task of ApiResponse (Payments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPaymentHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific payment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific payment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPaymentServicesAsync(System.String,System.String)">
            <summary>
            Retrieves payment services
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of PaymentServices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPaymentServicesAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves payment services
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (PaymentServices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPaymentsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payments for invoices and credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">Up to 100 payments will be returned in a single API call (optional)</param>
            <returns>Task of Payments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPaymentsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payments for invoices and credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">Up to 100 payments will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (Payments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPrepaymentAsync(System.String,System.String,System.Guid)">
            <summary>
            Allows you to retrieve a specified prepayments
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <returns>Task of Prepayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPrepaymentAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Allows you to retrieve a specified prepayments
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <returns>Task of ApiResponse (Prepayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPrepaymentHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history record for a specific prepayment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPrepaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history record for a specific prepayment
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPrepaymentsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves prepayments
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Prepayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPrepaymentsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves prepayments
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Prepayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific purchase order using a unique purchase order Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of PurchaseOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific purchase order using a unique purchase order Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of ApiResponse (PurchaseOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderAsPdfAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific purchase order as PDF files using a unique purchase order Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderAsPdfAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific purchase order as PDF files using a unique purchase order Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment for a specific purchase order by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment for a specific purchase order by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves specific attachment for a specific purchase order using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves specific attachment for a specific purchase order using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific purchase order
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific purchase order
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderByNumberAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves a specific purchase order using purchase order number
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
            <returns>Task of PurchaseOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderByNumberAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Retrieves a specific purchase order using purchase order number
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
            <returns>Task of ApiResponse (PurchaseOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history for a specific purchase order
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrderHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history for a specific purchase order
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrdersAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves purchase orders
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="status">Filter by purchase order status (optional)</param>
            <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
            <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
            <returns>Task of PurchaseOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetPurchaseOrdersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves purchase orders
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="status">Filter by purchase order status (optional)</param>
            <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
            <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
            <returns>Task of ApiResponse (PurchaseOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuoteAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific quote using a unique quote Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of Quotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuoteAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific quote using a unique quote Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of ApiResponse (Quotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuoteAsPdfAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific quote as a PDF file using a unique quote Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuoteAsPdfAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific quote as a PDF file using a unique quote Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuoteAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific quote by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuoteAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific quote by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuoteAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific quote using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuoteAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific quote using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuoteAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific quote
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuoteAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific quote
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuoteHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific quote
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuoteHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific quote
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuotesAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Guid},System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Retrieves sales quotes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="dateFrom">Filter for quotes after a particular date (optional)</param>
            <param name="dateTo">Filter for quotes before a particular date (optional)</param>
            <param name="expiryDateFrom">Filter for quotes expiring after a particular date (optional)</param>
            <param name="expiryDateTo">Filter for quotes before a particular date (optional)</param>
            <param name="contactID">Filter for quotes belonging to a particular contact (optional)</param>
            <param name="status">Filter for quotes of a particular Status (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="quoteNumber">Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)</param>
            <returns>Task of Quotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetQuotesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Guid},System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Retrieves sales quotes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="dateFrom">Filter for quotes after a particular date (optional)</param>
            <param name="dateTo">Filter for quotes before a particular date (optional)</param>
            <param name="expiryDateFrom">Filter for quotes expiring after a particular date (optional)</param>
            <param name="expiryDateTo">Filter for quotes before a particular date (optional)</param>
            <param name="contactID">Filter for quotes belonging to a particular contact (optional)</param>
            <param name="status">Filter for quotes of a particular Status (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="quoteNumber">Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)</param>
            <returns>Task of ApiResponse (Quotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReceiptAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific draft expense claim receipt by using a unique receipt Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Receipts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReceiptAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific draft expense claim receipt by using a unique receipt Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Receipts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReceiptAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific expense claim receipts by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReceiptAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific expense claim receipts by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReceiptAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReceiptAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReceiptAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific expense claim receipt
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReceiptAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific expense claim receipt
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReceiptHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a history record for a specific receipt
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReceiptHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a history record for a specific receipt
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReceiptsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves draft expense claim receipts for any user
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Receipts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReceiptsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves draft expense claim receipts for any user
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Receipts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetRepeatingInvoiceAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific repeating invoice by using a unique repeating invoice Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <returns>Task of RepeatingInvoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetRepeatingInvoiceAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific repeating invoice by using a unique repeating invoice Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetRepeatingInvoiceAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific repeating invoices by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific repeating invoices by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetRepeatingInvoiceAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific repeating invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetRepeatingInvoiceAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific repeating invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetRepeatingInvoiceAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments from a specific repeating invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetRepeatingInvoiceAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments from a specific repeating invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetRepeatingInvoiceHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history record for a specific repeating invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetRepeatingInvoiceHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history record for a specific repeating invoice
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetRepeatingInvoicesAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves repeating invoices
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of RepeatingInvoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetRepeatingInvoicesAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves repeating invoices
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportAgedPayablesByContactAsync(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for aged payables by contact
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactId">Unique identifier for a Contact</param>
            <param name="date">The date of the Aged Payables By Contact report (optional)</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportAgedPayablesByContactAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for aged payables by contact
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactId">Unique identifier for a Contact</param>
            <param name="date">The date of the Aged Payables By Contact report (optional)</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportAgedReceivablesByContactAsync(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for aged receivables by contact
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactId">Unique identifier for a Contact</param>
            <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportAgedReceivablesByContactAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for aged receivables by contact
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactId">Unique identifier for a Contact</param>
            <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportBalanceSheetAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retrieves report for balancesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date of the Balance Sheet report (optional)</param>
            <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
            <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
            <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
            <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
            <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
            <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportBalanceSheetAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retrieves report for balancesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date of the Balance Sheet report (optional)</param>
            <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
            <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
            <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
            <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
            <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
            <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportBankSummaryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for bank summary
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportBankSummaryAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for bank summary
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportBudgetSummaryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves report for budget summary
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
            <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
            <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportBudgetSummaryAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves report for budget summary
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
            <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
            <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportExecutiveSummaryAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for executive summary
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportExecutiveSummaryAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for executive summary
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportFromIdAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves a specific report using a unique ReportID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reportID">Unique identifier for a Report</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportFromIdAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Retrieves a specific report using a unique ReportID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reportID">Unique identifier for a Report</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportProfitAndLossAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retrieves report for profit and loss
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
            <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
            <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
            <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
            <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
            <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
            <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
            <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportProfitAndLossAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retrieves report for profit and loss
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
            <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
            <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
            <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
            <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
            <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
            <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
            <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportTenNinetyNineAsync(System.String,System.String,System.String)">
            <summary>
            Retrieve reports for 1099
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reportYear">The year of the 1099 report (optional)</param>
            <returns>Task of Reports</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportTenNinetyNineAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Retrieve reports for 1099
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reportYear">The year of the 1099 report (optional)</param>
            <returns>Task of ApiResponse (Reports)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportTrialBalanceAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
            Retrieves report for trial balance
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
            <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportTrialBalanceAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
            Retrieves report for trial balance
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
            <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportsListAsync(System.String,System.String)">
            <summary>
            Retrieves a list of the organistaions unique reports that require a uuid to fetch
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetReportsListAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves a list of the organistaions unique reports that require a uuid to fetch
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetTaxRatesAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves tax rates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="taxType">Filter by tax type (optional)</param>
            <returns>Task of TaxRates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetTaxRatesAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves tax rates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="taxType">Filter by tax type (optional)</param>
            <returns>Task of ApiResponse (TaxRates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetTrackingCategoriesAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Retrieves tracking categories and options
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetTrackingCategoriesAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Retrieves tracking categories and options
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetTrackingCategoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific tracking categories and options using a unique tracking category Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetTrackingCategoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific tracking categories and options using a unique tracking category Id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetUserAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific user
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="userID">Unique identifier for a User</param>
            <returns>Task of Users</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetUserAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific user
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="userID">Unique identifier for a User</param>
            <returns>Task of ApiResponse (Users)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetUsersAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves users
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of Users</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.GetUsersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves users
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (Users)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.PostSetupAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Setup)">
            <summary>
            Sets the chart of accounts, the conversion date and conversion balances
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="setup">Object including an accounts array, a conversion balances array and a conversion date object in body of request</param>
            <returns>Task of ImportSummaryObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.PostSetupAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Setup)">
            <summary>
            Sets the chart of accounts, the conversion date and conversion balances
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="setup">Object including an accounts array, a conversion balances array and a conversion date object in body of request</param>
            <returns>Task of ApiResponse (ImportSummaryObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateAccountAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Accounts)">
            <summary>
            Updates a chart of accounts
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="accounts">Request of type Accounts array with one Account</param>
            <returns>Task of Accounts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateAccountAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Accounts)">
            <summary>
            Updates a chart of accounts
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="accounts">Request of type Accounts array with one Account</param>
            <returns>Task of ApiResponse (Accounts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateAccountAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates attachment on a specific account by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateAccountAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates attachment on a specific account by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateBankTransactionAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.BankTransactions,System.Nullable{System.Int32})">
            <summary>
            Updates a single spent or received money transaction
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="bankTransactions"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of BankTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateBankTransactionAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.BankTransactions,System.Nullable{System.Int32})">
            <summary>
            Updates a single spent or received money transaction
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="bankTransactions"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (BankTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateBankTransactionAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific bank transaction by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateBankTransactionAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific bank transaction by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateBankTransferAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateBankTransferAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateContactAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Contacts)">
            <summary>
            Updates a specific contact in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateContactAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Contacts)">
            <summary>
            Updates a specific contact in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateContactAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateContactAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateContactGroupAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.ContactGroups)">
            <summary>
            Updates a specific contact group
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
            <returns>Task of ContactGroups</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateContactGroupAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.ContactGroups)">
            <summary>
            Updates a specific contact group
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
            <returns>Task of ApiResponse (ContactGroups)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateCreditNoteAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.CreditNotes,System.Nullable{System.Int32})">
            <summary>
            Updates a specific credit note
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of CreditNotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateCreditNoteAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.CreditNotes,System.Nullable{System.Int32})">
            <summary>
            Updates a specific credit note
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (CreditNotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateCreditNoteAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates attachments on a specific credit note by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateCreditNoteAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates attachments on a specific credit note by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateExpenseClaimAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.ExpenseClaims)">
            <summary>
            Updates a specific expense claims
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <param name="expenseClaims"></param>
            <returns>Task of ExpenseClaims</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateExpenseClaimAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.ExpenseClaims)">
            <summary>
            Updates a specific expense claims
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <param name="expenseClaims"></param>
            <returns>Task of ApiResponse (ExpenseClaims)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateInvoiceAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Invoices,System.Nullable{System.Int32})">
            <summary>
            Updates a specific sales invoices or purchase bills
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="invoices"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Invoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateInvoiceAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Invoices,System.Nullable{System.Int32})">
            <summary>
            Updates a specific sales invoices or purchase bills
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="invoices"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Invoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateInvoiceAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates an attachment from a specific invoices or purchase bill by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateInvoiceAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates an attachment from a specific invoices or purchase bill by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateItemAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Items,System.Nullable{System.Int32})">
            <summary>
            Updates a specific item
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <param name="items"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Items</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateItemAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Items,System.Nullable{System.Int32})">
            <summary>
            Updates a specific item
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <param name="items"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Items)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateLinkedTransactionAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.LinkedTransactions)">
            <summary>
            Updates a specific linked transactions (billable expenses)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
            <param name="linkedTransactions"></param>
            <returns>Task of LinkedTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateLinkedTransactionAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.LinkedTransactions)">
            <summary>
            Updates a specific linked transactions (billable expenses)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
            <param name="linkedTransactions"></param>
            <returns>Task of ApiResponse (LinkedTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateManualJournalAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.ManualJournals)">
            <summary>
            Updates a specific manual journal
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="manualJournals"></param>
            <returns>Task of ManualJournals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateManualJournalAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.ManualJournals)">
            <summary>
            Updates a specific manual journal
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="manualJournals"></param>
            <returns>Task of ApiResponse (ManualJournals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateManualJournalAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific manual journal by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateManualJournalAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific manual journal by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateBankTransactionsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BankTransactions,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more spent or received money transaction
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactions"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of BankTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateBankTransactionsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BankTransactions,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more spent or received money transaction
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactions"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (BankTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateContactsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Contacts,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates one or more contacts in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contacts"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateContactsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Contacts,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates one or more contacts in a Xero organisation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contacts"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateCreditNotesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.CreditNotes,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of CreditNotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateCreditNotesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.CreditNotes,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more credit notes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (CreditNotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateEmployeesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Employees,System.Nullable{System.Boolean})">
            <summary>
            Creates a single new employees used in Xero payrun
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employees">Employees with array of Employee object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateEmployeesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Employees,System.Nullable{System.Boolean})">
            <summary>
            Creates a single new employees used in Xero payrun
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employees">Employees with array of Employee object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateInvoicesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Invoices,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more sales invoices or purchase bills
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoices"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Invoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateInvoicesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Invoices,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more sales invoices or purchase bills
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoices"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Invoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateItemsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Items,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more items
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="items"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Items</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateItemsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Items,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more items
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="items"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Items)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateManualJournalsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ManualJournals,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates a single manual journal
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ManualJournals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateManualJournalsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ManualJournals,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates a single manual journal
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (ManualJournals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreatePurchaseOrdersAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.PurchaseOrders,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates one or more purchase orders
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrders"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of PurchaseOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreatePurchaseOrdersAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.PurchaseOrders,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates one or more purchase orders
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrders"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (PurchaseOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateQuotesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Quotes,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates one or more quotes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quotes"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Quotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateQuotesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Quotes,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates one or more quotes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quotes"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Quotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateRepeatingInvoicesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.RepeatingInvoices,System.Nullable{System.Boolean})">
            <summary>
            Creates or deletes one or more repeating invoice templates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of RepeatingInvoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateOrCreateRepeatingInvoicesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.RepeatingInvoices,System.Nullable{System.Boolean})">
            <summary>
            Creates or deletes one or more repeating invoice templates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdatePurchaseOrderAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.PurchaseOrders)">
            <summary>
            Updates a specific purchase order
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="purchaseOrders"></param>
            <returns>Task of PurchaseOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdatePurchaseOrderAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.PurchaseOrders)">
            <summary>
            Updates a specific purchase order
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="purchaseOrders"></param>
            <returns>Task of ApiResponse (PurchaseOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdatePurchaseOrderAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment for a specific purchase order by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdatePurchaseOrderAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment for a specific purchase order by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateQuoteAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Quotes)">
            <summary>
            Updates a specific quote
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="quotes"></param>
            <returns>Task of Quotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateQuoteAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Quotes)">
            <summary>
            Updates a specific quote
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="quotes"></param>
            <returns>Task of ApiResponse (Quotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateQuoteAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific quote by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateQuoteAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific quote by filename
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateReceiptAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Receipts,System.Nullable{System.Int32})">
            <summary>
            Updates a specific draft expense claim receipts
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="receipts"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Receipts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateReceiptAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Receipts,System.Nullable{System.Int32})">
            <summary>
            Updates a specific draft expense claim receipts
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="receipts"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Receipts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateReceiptAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment on a specific expense claim receipts by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateReceiptAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment on a specific expense claim receipts by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateRepeatingInvoiceAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.RepeatingInvoices)">
            <summary>
            Deletes a specific repeating invoice template
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="repeatingInvoices"></param>
            <returns>Task of RepeatingInvoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateRepeatingInvoiceAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.RepeatingInvoices)">
            <summary>
            Deletes a specific repeating invoice template
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="repeatingInvoices"></param>
            <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateRepeatingInvoiceAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific repeating invoices by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific repeating invoices by file name
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateTaxRateAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.TaxRates)">
            <summary>
            Updates tax rates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="taxRates"></param>
            <returns>Task of TaxRates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateTaxRateAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.TaxRates)">
            <summary>
            Updates tax rates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="taxRates"></param>
            <returns>Task of ApiResponse (TaxRates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateTrackingCategoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.TrackingCategory)">
            <summary>
            Updates a specific tracking category
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingCategory"></param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateTrackingCategoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.TrackingCategory)">
            <summary>
            Updates a specific tracking category
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingCategory"></param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateTrackingOptionsAsync(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.TrackingOption)">
            <summary>
            Updates a specific option for a specific tracking category
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
            <param name="trackingOption"></param>
            <returns>Task of TrackingOptions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAccountingApiAsync.UpdateTrackingOptionsAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.TrackingOption)">
            <summary>
            Updates a specific option for a specific tracking category
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
            <param name="trackingOption"></param>
            <returns>Task of ApiResponse (TrackingOptions)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IAccountingApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.AccountingApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AccountingApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AccountingApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.#ctor(Xero.DotNet.OAuth2.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AccountingApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.#ctor(Xero.DotNet.OAuth2.Client.ISynchronousClient,Xero.DotNet.OAuth2.Client.IAsynchronousClient,Xero.DotNet.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AccountingApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.AccountingApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.AccountingApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.AccountingApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateAccountAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Account)">
            <summary>
            Creates a new chart of accounts 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="account">Account object in body of request</param>
            <returns>Task of Accounts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateAccountAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Account)">
            <summary>
            Creates a new chart of accounts 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="account">Account object in body of request</param>
            <returns>Task of ApiResponse (Accounts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateAccountAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment on a specific account 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateAccountAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment on a specific account 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBankTransactionAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment for a specific bank transaction by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBankTransactionAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment for a specific bank transaction by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBankTransactionHistoryRecordAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific bank transactions 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBankTransactionHistoryRecordAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific bank transactions 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBankTransactionsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BankTransactions,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates one or more spent or received money transaction 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactions">BankTransactions with an array of BankTransaction objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of BankTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBankTransactionsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BankTransactions,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates one or more spent or received money transaction 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactions">BankTransactions with an array of BankTransaction objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (BankTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBankTransferAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BankTransfers)">
            <summary>
            Creates a bank transfer 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransfers">BankTransfers with array of BankTransfer objects in request body</param>
            <returns>Task of BankTransfers</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBankTransferAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BankTransfers)">
            <summary>
            Creates a bank transfer 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransfers">BankTransfers with array of BankTransfer objects in request body</param>
            <returns>Task of ApiResponse (BankTransfers)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBankTransferAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
             
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBankTransferAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
             
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBankTransferHistoryRecordAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific bank transfer 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBankTransferHistoryRecordAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific bank transfer 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBatchPaymentAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BatchPayments,System.Nullable{System.Boolean})">
            <summary>
            Creates one or many batch payments for invoices 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPayments">BatchPayments with an array of Payments in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of BatchPayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBatchPaymentAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BatchPayments,System.Nullable{System.Boolean})">
            <summary>
            Creates one or many batch payments for invoices 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPayments">BatchPayments with an array of Payments in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (BatchPayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBatchPaymentHistoryRecordAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific batch payment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentID">Unique identifier for BatchPayment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBatchPaymentHistoryRecordAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific batch payment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentID">Unique identifier for BatchPayment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBrandingThemePaymentServicesAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.PaymentService)">
            <summary>
            Creates a new custom payment service for a specific branding theme 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
            <param name="paymentService">PaymentService object in body of request</param>
            <returns>Task of PaymentServices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateBrandingThemePaymentServicesAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.PaymentService)">
            <summary>
            Creates a new custom payment service for a specific branding theme 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
            <param name="paymentService">PaymentService object in body of request</param>
            <returns>Task of ApiResponse (PaymentServices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateContactAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
             
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateContactAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
             
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateContactGroupAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ContactGroups)">
            <summary>
            Creates a contact group 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroups">ContactGroups with an array of names in request body</param>
            <returns>Task of ContactGroups</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateContactGroupAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ContactGroups)">
            <summary>
            Creates a contact group 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroups">ContactGroups with an array of names in request body</param>
            <returns>Task of ApiResponse (ContactGroups)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateContactGroupContactsAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Contacts)">
            <summary>
            Creates contacts to a specific contact group 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <param name="contacts">Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateContactGroupContactsAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Contacts)">
            <summary>
            Creates contacts to a specific contact group 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <param name="contacts">Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateContactHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a new history record for a specific contact 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateContactHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a new history record for a specific contact 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateContactsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Contacts,System.Nullable{System.Boolean})">
            <summary>
            Creates multiple contacts (bulk) in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contacts">Contacts with an array of Contact objects to create in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateContactsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Contacts,System.Nullable{System.Boolean})">
            <summary>
            Creates multiple contacts (bulk) in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contacts">Contacts with an array of Contact objects to create in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateCreditNoteAllocationAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Allocations,System.Nullable{System.Boolean})">
            <summary>
            Creates allocation for a specific credit note 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="allocations">Allocations with array of Allocation object in body of request.</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Allocations</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateCreditNoteAllocationAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Allocations,System.Nullable{System.Boolean})">
            <summary>
            Creates allocation for a specific credit note 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="allocations">Allocations with array of Allocation object in body of request.</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Allocations)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateCreditNoteAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[],System.Nullable{System.Boolean})">
            <summary>
            Creates an attachment for a specific credit note 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateCreditNoteAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[],System.Nullable{System.Boolean})">
            <summary>
            Creates an attachment for a specific credit note 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateCreditNoteHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Retrieves history records of a specific credit note 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateCreditNoteHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Retrieves history records of a specific credit note 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateCreditNotesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.CreditNotes,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates a new credit note 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNotes">Credit Notes with array of CreditNote object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of CreditNotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateCreditNotesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.CreditNotes,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates a new credit note 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNotes">Credit Notes with array of CreditNote object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (CreditNotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateCurrencyAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Currency)">
            <summary>
            Create a new currency for a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="currency">Currency object in the body of request</param>
            <returns>Task of Currencies</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateCurrencyAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Currency)">
            <summary>
            Create a new currency for a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="currency">Currency object in the body of request</param>
            <returns>Task of ApiResponse (Currencies)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateEmployeesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Employees,System.Nullable{System.Boolean})">
            <summary>
            Creates new employees used in Xero payrun 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employees">Employees with array of Employee object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateEmployeesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Employees,System.Nullable{System.Boolean})">
            <summary>
            Creates new employees used in Xero payrun 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employees">Employees with array of Employee object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateExpenseClaimHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific expense claim 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateExpenseClaimHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific expense claim 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateExpenseClaimsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ExpenseClaims)">
            <summary>
            Creates expense claims 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaims">ExpenseClaims with array of ExpenseClaim object in body of request</param>
            <returns>Task of ExpenseClaims</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateExpenseClaimsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ExpenseClaims)">
            <summary>
            Creates expense claims 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaims">ExpenseClaims with array of ExpenseClaim object in body of request</param>
            <returns>Task of ApiResponse (ExpenseClaims)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateInvoiceAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[],System.Nullable{System.Boolean})">
            <summary>
            Creates an attachment for a specific invoice or purchase bill by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateInvoiceAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[],System.Nullable{System.Boolean})">
            <summary>
            Creates an attachment for a specific invoice or purchase bill by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateInvoiceHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateInvoiceHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateInvoicesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Invoices,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates one or more sales invoices or purchase bills 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoices">Invoices with an array of invoice objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Invoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateInvoicesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Invoices,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates one or more sales invoices or purchase bills 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoices">Invoices with an array of invoice objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Invoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateItemHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific item 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateItemHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific item 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateItemsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Items,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates one or more items 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="items">Items with an array of Item objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Items</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateItemsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Items,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Creates one or more items 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="items">Items with an array of Item objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Items)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateLinkedTransactionAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.LinkedTransaction)">
            <summary>
            Creates linked transactions (billable expenses) 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransaction">LinkedTransaction object in body of request</param>
            <returns>Task of LinkedTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateLinkedTransactionAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.LinkedTransaction)">
            <summary>
            Creates linked transactions (billable expenses) 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransaction">LinkedTransaction object in body of request</param>
            <returns>Task of ApiResponse (LinkedTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateManualJournalAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates a specific attachment for a specific manual journal by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateManualJournalAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates a specific attachment for a specific manual journal by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateManualJournalHistoryRecordAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific manual journal 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateManualJournalHistoryRecordAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific manual journal 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateManualJournalsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ManualJournals,System.Nullable{System.Boolean})">
            <summary>
            Creates one or more manual journals 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ManualJournals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateManualJournalsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ManualJournals,System.Nullable{System.Boolean})">
            <summary>
            Creates one or more manual journals 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (ManualJournals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateOverpaymentAllocationsAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Allocations,System.Nullable{System.Boolean})">
            <summary>
            Creates a single allocation for a specific overpayment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <param name="allocations">Allocations array with Allocation object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Allocations</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateOverpaymentAllocationsAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Allocations,System.Nullable{System.Boolean})">
            <summary>
            Creates a single allocation for a specific overpayment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <param name="allocations">Allocations array with Allocation object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Allocations)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateOverpaymentHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific overpayment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateOverpaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific overpayment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePaymentAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Payment)">
            <summary>
            Creates a single payment for invoice or credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payment">Request body with a single Payment object</param>
            <returns>Task of Payments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePaymentAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Payment)">
            <summary>
            Creates a single payment for invoice or credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payment">Request body with a single Payment object</param>
            <returns>Task of ApiResponse (Payments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePaymentHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific payment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific payment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePaymentServiceAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.PaymentServices)">
            <summary>
            Creates a payment service 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
            <returns>Task of PaymentServices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePaymentServiceAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.PaymentServices)">
            <summary>
            Creates a payment service 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
            <returns>Task of ApiResponse (PaymentServices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePaymentsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Payments,System.Nullable{System.Boolean})">
            <summary>
            Creates multiple payments for invoices or credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payments">Payments array with Payment object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Payments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePaymentsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Payments,System.Nullable{System.Boolean})">
            <summary>
            Creates multiple payments for invoices or credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payments">Payments array with Payment object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Payments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePrepaymentAllocationsAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Allocations,System.Nullable{System.Boolean})">
            <summary>
            Allows you to create an Allocation for prepayments 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <param name="allocations">Allocations with an array of Allocation object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Allocations</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePrepaymentAllocationsAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Allocations,System.Nullable{System.Boolean})">
            <summary>
            Allows you to create an Allocation for prepayments 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <param name="allocations">Allocations with an array of Allocation object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Allocations)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePrepaymentHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific prepayment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePrepaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific prepayment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePurchaseOrderAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates attachment for a specific purchase order 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePurchaseOrderAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates attachment for a specific purchase order 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePurchaseOrderHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific purchase orders 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePurchaseOrderHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific purchase orders 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePurchaseOrdersAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.PurchaseOrders,System.Nullable{System.Boolean})">
            <summary>
            Creates one or more purchase orders 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrders">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of PurchaseOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreatePurchaseOrdersAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.PurchaseOrders,System.Nullable{System.Boolean})">
            <summary>
            Creates one or more purchase orders 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrders">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (PurchaseOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateQuoteAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates attachment for a specific quote 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateQuoteAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates attachment for a specific quote 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateQuoteHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific quote 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateQuoteHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific quote 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateQuotesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Quotes,System.Nullable{System.Boolean})">
            <summary>
            Create one or more quotes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quotes">Quotes with an array of Quote object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Quotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateQuotesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Quotes,System.Nullable{System.Boolean})">
            <summary>
            Create one or more quotes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quotes">Quotes with an array of Quote object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Quotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateReceiptAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Receipts,System.Nullable{System.Int32})">
            <summary>
            Creates draft expense claim receipts for any user 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receipts">Receipts with an array of Receipt object in body of request</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Receipts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateReceiptAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Receipts,System.Nullable{System.Int32})">
            <summary>
            Creates draft expense claim receipts for any user 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receipts">Receipts with an array of Receipt object in body of request</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Receipts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateReceiptAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment on a specific expense claim receipts by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateReceiptAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment on a specific expense claim receipts by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateReceiptHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific receipt 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateReceiptHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a history record for a specific receipt 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateRepeatingInvoiceAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment from a specific repeating invoices by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Creates an attachment from a specific repeating invoices by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateRepeatingInvoiceHistoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a  history record for a specific repeating invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateRepeatingInvoiceHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Creates a  history record for a specific repeating invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateRepeatingInvoicesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.RepeatingInvoices,System.Nullable{System.Boolean})">
            <summary>
            Creates one or more repeating invoice templates 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of RepeatingInvoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateRepeatingInvoicesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.RepeatingInvoices,System.Nullable{System.Boolean})">
            <summary>
            Creates one or more repeating invoice templates 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateTaxRatesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.TaxRates)">
            <summary>
            Creates one or more tax rates 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="taxRates">TaxRates array with TaxRate object in body of request</param>
            <returns>Task of TaxRates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateTaxRatesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.TaxRates)">
            <summary>
            Creates one or more tax rates 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="taxRates">TaxRates array with TaxRate object in body of request</param>
            <returns>Task of ApiResponse (TaxRates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateTrackingCategoryAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.TrackingCategory)">
            <summary>
            Create tracking categories 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategory">TrackingCategory object in body of request</param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateTrackingCategoryAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.TrackingCategory)">
            <summary>
            Create tracking categories 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategory">TrackingCategory object in body of request</param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateTrackingOptionsAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.TrackingOption)">
            <summary>
            Creates options for a specific tracking category 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingOption">TrackingOption object in body of request</param>
            <returns>Task of TrackingOptions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.CreateTrackingOptionsAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.TrackingOption)">
            <summary>
            Creates options for a specific tracking category 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingOption">TrackingOption object in body of request</param>
            <returns>Task of ApiResponse (TrackingOptions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteAccountAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a chart of accounts 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <returns>Task of Accounts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteAccountAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a chart of accounts 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <returns>Task of ApiResponse (Accounts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteBatchPaymentAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BatchPaymentDelete)">
            <summary>
            Updates a specific batch payment for invoices and credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentDelete"></param>
            <returns>Task of BatchPayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteBatchPaymentAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BatchPaymentDelete)">
            <summary>
            Updates a specific batch payment for invoices and credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentDelete"></param>
            <returns>Task of ApiResponse (BatchPayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteBatchPaymentByUrlParamAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam)">
            <summary>
            Updates a specific batch payment for invoices and credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentID">Unique identifier for BatchPayment</param>
            <param name="batchPaymentDeleteByUrlParam"></param>
            <returns>Task of BatchPayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteBatchPaymentByUrlParamAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam)">
            <summary>
            Updates a specific batch payment for invoices and credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentID">Unique identifier for BatchPayment</param>
            <param name="batchPaymentDeleteByUrlParam"></param>
            <returns>Task of ApiResponse (BatchPayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteContactGroupContactAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific contact from a contact group using a unique contact Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteContactGroupContactAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific contact from a contact group using a unique contact Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteContactGroupContactsAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes all contacts from a specific contact group 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteContactGroupContactsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes all contacts from a specific contact group 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteItemAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific item 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteItemAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific item 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteLinkedTransactionAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific linked transactions (billable expenses) 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteLinkedTransactionAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific linked transactions (billable expenses) 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeletePaymentAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.PaymentDelete)">
            <summary>
            Updates a specific payment for invoices and credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <param name="paymentDelete"></param>
            <returns>Task of Payments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeletePaymentAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.PaymentDelete)">
            <summary>
            Updates a specific payment for invoices and credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <param name="paymentDelete"></param>
            <returns>Task of ApiResponse (Payments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteTrackingCategoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific tracking category 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteTrackingCategoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific tracking category 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteTrackingOptionsAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific option for a specific tracking category 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
            <returns>Task of TrackingOptions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.DeleteTrackingOptionsAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific option for a specific tracking category 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
            <returns>Task of ApiResponse (TrackingOptions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.EmailInvoiceAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.RequestEmpty)">
            <summary>
            Sends a copy of a specific invoice to related contact via email 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="requestEmpty"></param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.EmailInvoiceAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.RequestEmpty)">
            <summary>
            Sends a copy of a specific invoice to related contact via email 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="requestEmpty"></param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetAccountAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a single chart of accounts by using a unique account Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <returns>Task of Accounts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetAccountAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a single chart of accounts by using a unique account Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <returns>Task of ApiResponse (Accounts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetAccountAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves an attachment for a specific account by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetAccountAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves an attachment for a specific account by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetAccountAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific account using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetAccountAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific account using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetAccountAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific accounts by using a unique account Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetAccountAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific accounts by using a unique account Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetAccountsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves the full chart of accounts 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of Accounts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetAccountsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves the full chart of accounts 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (Accounts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransactionAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a single spent or received money transaction by using a unique bank transaction Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of BankTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransactionAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a single spent or received money transaction by using a unique bank transaction Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (BankTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransactionAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific bank transaction by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransactionAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific bank transaction by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransactionAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves specific attachments from a specific BankTransaction using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransactionAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves specific attachments from a specific BankTransaction using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransactionAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves any attachments from a specific bank transactions 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransactionAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves any attachments from a specific bank transactions 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransactionsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves any spent or received money transactions 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of BankTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransactionsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves any spent or received money transactions 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (BankTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransactionsHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history from a specific bank transaction using a unique bank transaction Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransactionsHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history from a specific bank transaction using a unique bank transaction Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransferAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific bank transfers by using a unique bank transfer Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <returns>Task of BankTransfers</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransferAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific bank transfers by using a unique bank transfer Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <returns>Task of ApiResponse (BankTransfers)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransferAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment on a specific bank transfer by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransferAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment on a specific bank transfer by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransferAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific bank transfer using a unique attachment ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransferAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific bank transfer using a unique attachment ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransferAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments from a specific bank transfer 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransferAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments from a specific bank transfer 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransferHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history from a specific bank transfer using a unique bank transfer Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransferHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history from a specific bank transfer using a unique bank transfer Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransfersAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves all bank transfers 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of BankTransfers</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBankTransfersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves all bank transfers 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (BankTransfers)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBatchPaymentHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history from a specific batch payment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentID">Unique identifier for BatchPayment</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBatchPaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history from a specific batch payment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="batchPaymentID">Unique identifier for BatchPayment</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBatchPaymentsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves either one or many batch payments for invoices 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of BatchPayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBatchPaymentsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves either one or many batch payments for invoices 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (BatchPayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBrandingThemeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific branding theme using a unique branding theme Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
            <returns>Task of BrandingThemes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBrandingThemeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific branding theme using a unique branding theme Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
            <returns>Task of ApiResponse (BrandingThemes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBrandingThemePaymentServicesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the payment services for a specific branding theme 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
            <returns>Task of PaymentServices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBrandingThemePaymentServicesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the payment services for a specific branding theme 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
            <returns>Task of ApiResponse (PaymentServices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBrandingThemesAsync(System.String,System.String)">
            <summary>
            Retrieves all the branding themes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of BrandingThemes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBrandingThemesAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves all the branding themes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (BrandingThemes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBudgetAsync(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves a specific budget, which includes budget lines 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="budgetID">Unique identifier for Budgets</param>
            <param name="dateTo">Filter by start date (optional)</param>
            <param name="dateFrom">Filter by end date (optional)</param>
            <returns>Task of Budgets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBudgetAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves a specific budget, which includes budget lines 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="budgetID">Unique identifier for Budgets</param>
            <param name="dateTo">Filter by start date (optional)</param>
            <param name="dateFrom">Filter by end date (optional)</param>
            <returns>Task of ApiResponse (Budgets)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBudgetsAsync(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieve a list of budgets 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="iDs">Filter by BudgetID. Allows you to retrieve a specific individual budget. (optional)</param>
            <param name="dateTo">Filter by start date (optional)</param>
            <param name="dateFrom">Filter by end date (optional)</param>
            <returns>Task of Budgets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetBudgetsAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieve a list of budgets 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="iDs">Filter by BudgetID. Allows you to retrieve a specific individual budget. (optional)</param>
            <param name="dateTo">Filter by start date (optional)</param>
            <param name="dateFrom">Filter by end date (optional)</param>
            <returns>Task of ApiResponse (Budgets)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific contacts in a Xero organisation using a unique contact Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific contacts in a Xero organisation using a unique contact Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific contact by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific contact by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific contact using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific contact using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific contact in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific contact in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactByContactNumberAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves a specific contact by contact number in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactByContactNumberAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Retrieves a specific contact by contact number in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactCISSettingsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves CIS settings for a specific contact in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of CISSettings</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactCISSettingsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves CIS settings for a specific contact in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of ApiResponse (CISSettings)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactGroupAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific contact group by using a unique contact group Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <returns>Task of ContactGroups</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactGroupAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific contact group by using a unique contact group Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <returns>Task of ApiResponse (ContactGroups)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactGroupsAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves the contact Id and name of each contact group 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ContactGroups</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactGroupsAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves the contact Id and name of each contact group 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (ContactGroups)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records for a specific contact 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records for a specific contact 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Retrieves all contacts in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
            <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
            <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
            <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
            <param name="searchTerm">Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields. (optional)</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetContactsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Retrieves all contacts in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
            <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
            <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
            <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
            <param name="searchTerm">Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields. (optional)</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNoteAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific credit note using a unique credit note Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of CreditNotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNoteAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific credit note using a unique credit note Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (CreditNotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNoteAsPdfAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves credit notes as PDF files 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNoteAsPdfAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves credit notes as PDF files 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNoteAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment on a specific credit note by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNoteAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment on a specific credit note by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNoteAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific credit note using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNoteAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific credit note using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNoteAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNoteAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNoteHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific credit note 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNoteHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific credit note 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNotesAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves any credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of CreditNotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCreditNotesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves any credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (CreditNotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCurrenciesAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves currencies for your Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of Currencies</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetCurrenciesAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves currencies for your Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (Currencies)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetEmployeeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee used in Xero payrun using a unique employee Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Unique identifier for a Employee</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee used in Xero payrun using a unique employee Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Unique identifier for a Employee</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetEmployeesAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves employees used in Xero payrun 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetEmployeesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves employees used in Xero payrun 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetExpenseClaimAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific expense claim using a unique expense claim Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <returns>Task of ExpenseClaims</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetExpenseClaimAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific expense claim using a unique expense claim Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <returns>Task of ApiResponse (ExpenseClaims)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetExpenseClaimHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific expense claim 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetExpenseClaimHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific expense claim 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetExpenseClaimsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves expense claims 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ExpenseClaims</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetExpenseClaimsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves expense claims 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (ExpenseClaims)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific sales invoice or purchase bill using a unique invoice Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Invoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific sales invoice or purchase bill using a unique invoice Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Invoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceAsPdfAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves invoices or purchase bills as PDF files 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceAsPdfAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves invoices or purchase bills as PDF files 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves an attachment from a specific invoice or purchase bill by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves an attachment from a specific invoice or purchase bill by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific invoice or purchase bill 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific invoice or purchase bill 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records for a specific invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records for a specific invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceRemindersAsync(System.String,System.String)">
            <summary>
            Retrieves invoice reminder settings 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of InvoiceReminders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoiceRemindersAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves invoice reminder settings 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (InvoiceReminders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoicesAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves sales invoices or purchase bills 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="iDs">Filter by a comma-separated list of InvoicesIDs. (optional)</param>
            <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. (optional)</param>
            <param name="contactIDs">Filter by a comma-separated list of ContactIDs. (optional)</param>
            <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
            <param name="includeArchived">e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response (optional)</param>
            <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
            <returns>Task of Invoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetInvoicesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves sales invoices or purchase bills 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="iDs">Filter by a comma-separated list of InvoicesIDs. (optional)</param>
            <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. (optional)</param>
            <param name="contactIDs">Filter by a comma-separated list of ContactIDs. (optional)</param>
            <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
            <param name="includeArchived">e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response (optional)</param>
            <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
            <returns>Task of ApiResponse (Invoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetItemAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific item using a unique item Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Items</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetItemAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific item using a unique item Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Items)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetItemHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history for a specific item 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetItemHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history for a specific item 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetItemsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves items 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Items</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetItemsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves items 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Items)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetJournalAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific journal using a unique journal Id. 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="journalID">Unique identifier for a Journal</param>
            <returns>Task of Journals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetJournalAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific journal using a unique journal Id. 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="journalID">Unique identifier for a Journal</param>
            <returns>Task of ApiResponse (Journals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetJournalByNumberAsync(System.String,System.String,System.Int32)">
            <summary>
            Retrieves a specific journal using a unique journal number. 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="journalNumber">Number of a Journal</param>
            <returns>Task of Journals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetJournalByNumberAsyncWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Retrieves a specific journal using a unique journal number. 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="journalNumber">Number of a Journal</param>
            <returns>Task of ApiResponse (Journals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetJournalsAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves journals 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
            <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
            <returns>Task of Journals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetJournalsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves journals 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
            <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
            <returns>Task of ApiResponse (Journals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetLinkedTransactionAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
            <returns>Task of LinkedTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetLinkedTransactionAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
            <returns>Task of ApiResponse (LinkedTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetLinkedTransactionsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves linked transactions (billable expenses) 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
            <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
            <param name="sourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)</param>
            <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
            <param name="status">Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)</param>
            <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
            <returns>Task of LinkedTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetLinkedTransactionsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves linked transactions (billable expenses) 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
            <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
            <param name="sourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)</param>
            <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
            <param name="status">Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)</param>
            <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
            <returns>Task of ApiResponse (LinkedTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetManualJournalAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific manual journal 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <returns>Task of ManualJournals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetManualJournalAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific manual journal 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <returns>Task of ApiResponse (ManualJournals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetManualJournalAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific manual journal by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetManualJournalAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific manual journal by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetManualJournalAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetManualJournalAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetManualJournalAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachment for a specific manual journal 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetManualJournalAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachment for a specific manual journal 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetManualJournalsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves manual journals 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
            <returns>Task of ManualJournals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetManualJournalsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves manual journals 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
            <returns>Task of ApiResponse (ManualJournals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetManualJournalsHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history for a specific manual journal 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetManualJournalsHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history for a specific manual journal 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOnlineInvoiceAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a URL to an online invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of OnlineInvoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOnlineInvoiceAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a URL to an online invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <returns>Task of ApiResponse (OnlineInvoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOrganisationActionsAsync(System.String,System.String)">
            <summary>
            Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation. 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of Actions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOrganisationActionsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation. 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (Actions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOrganisationCISSettingsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the CIS settings for the Xero organistaion. 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="organisationID">The unique Xero identifier for an organisation</param>
            <returns>Task of CISOrgSettings</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOrganisationCISSettingsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the CIS settings for the Xero organistaion. 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="organisationID">The unique Xero identifier for an organisation</param>
            <returns>Task of ApiResponse (CISOrgSettings)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOrganisationsAsync(System.String,System.String)">
            <summary>
            Retrieves Xero organisation details 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of Organisations</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOrganisationsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves Xero organisation details 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (Organisations)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOverpaymentAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific overpayment using a unique overpayment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <returns>Task of Overpayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOverpaymentAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific overpayment using a unique overpayment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <returns>Task of ApiResponse (Overpayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOverpaymentHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific overpayment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOverpaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific overpayment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="overpaymentID">Unique identifier for a Overpayment</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOverpaymentsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves overpayments 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Overpayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetOverpaymentsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves overpayments 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Overpayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPaymentAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payment for invoices and credit notes using a unique payment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <returns>Task of Payments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPaymentAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payment for invoices and credit notes using a unique payment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <returns>Task of ApiResponse (Payments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPaymentHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific payment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific payment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paymentID">Unique identifier for a Payment</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPaymentServicesAsync(System.String,System.String)">
            <summary>
            Retrieves payment services 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of PaymentServices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPaymentServicesAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves payment services 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (PaymentServices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPaymentsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payments for invoices and credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">Up to 100 payments will be returned in a single API call (optional)</param>
            <returns>Task of Payments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPaymentsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payments for invoices and credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">Up to 100 payments will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (Payments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPrepaymentAsync(System.String,System.String,System.Guid)">
            <summary>
            Allows you to retrieve a specified prepayments 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <returns>Task of Prepayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPrepaymentAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Allows you to retrieve a specified prepayments 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <returns>Task of ApiResponse (Prepayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPrepaymentHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history record for a specific prepayment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPrepaymentHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history record for a specific prepayment 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="prepaymentID">Unique identifier for a PrePayment</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPrepaymentsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves prepayments 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Prepayments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPrepaymentsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves prepayments 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Prepayments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific purchase order using a unique purchase order Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of PurchaseOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific purchase order using a unique purchase order Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of ApiResponse (PurchaseOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderAsPdfAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific purchase order as PDF files using a unique purchase order Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderAsPdfAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific purchase order as PDF files using a unique purchase order Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment for a specific purchase order by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment for a specific purchase order by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves specific attachment for a specific purchase order using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves specific attachment for a specific purchase order using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific purchase order 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific purchase order 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderByNumberAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves a specific purchase order using purchase order number 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
            <returns>Task of PurchaseOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderByNumberAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Retrieves a specific purchase order using purchase order number 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
            <returns>Task of ApiResponse (PurchaseOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history for a specific purchase order 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrderHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history for a specific purchase order 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrdersAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves purchase orders 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="status">Filter by purchase order status (optional)</param>
            <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
            <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
            <returns>Task of PurchaseOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetPurchaseOrdersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves purchase orders 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="status">Filter by purchase order status (optional)</param>
            <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
            <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
            <returns>Task of ApiResponse (PurchaseOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuoteAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific quote using a unique quote Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of Quotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuoteAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific quote using a unique quote Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of ApiResponse (Quotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuoteAsPdfAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific quote as a PDF file using a unique quote Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuoteAsPdfAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific quote as a PDF file using a unique quote Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuoteAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific quote by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuoteAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific quote by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuoteAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific quote using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuoteAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific quote using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuoteAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific quote 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuoteAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific quote 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuoteHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific quote 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuoteHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history records of a specific quote 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuotesAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Guid},System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Retrieves sales quotes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="dateFrom">Filter for quotes after a particular date (optional)</param>
            <param name="dateTo">Filter for quotes before a particular date (optional)</param>
            <param name="expiryDateFrom">Filter for quotes expiring after a particular date (optional)</param>
            <param name="expiryDateTo">Filter for quotes before a particular date (optional)</param>
            <param name="contactID">Filter for quotes belonging to a particular contact (optional)</param>
            <param name="status">Filter for quotes of a particular Status (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="quoteNumber">Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)</param>
            <returns>Task of Quotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetQuotesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Guid},System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Retrieves sales quotes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="dateFrom">Filter for quotes after a particular date (optional)</param>
            <param name="dateTo">Filter for quotes before a particular date (optional)</param>
            <param name="expiryDateFrom">Filter for quotes expiring after a particular date (optional)</param>
            <param name="expiryDateTo">Filter for quotes before a particular date (optional)</param>
            <param name="contactID">Filter for quotes belonging to a particular contact (optional)</param>
            <param name="status">Filter for quotes of a particular Status (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="quoteNumber">Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)</param>
            <returns>Task of ApiResponse (Quotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReceiptAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific draft expense claim receipt by using a unique receipt Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Receipts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReceiptAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific draft expense claim receipt by using a unique receipt Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Receipts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReceiptAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific expense claim receipts by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReceiptAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific expense claim receipts by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReceiptAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReceiptAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReceiptAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific expense claim receipt 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReceiptAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments for a specific expense claim receipt 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReceiptHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a history record for a specific receipt 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReceiptHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a history record for a specific receipt 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReceiptsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves draft expense claim receipts for any user 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Receipts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReceiptsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves draft expense claim receipts for any user 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Receipts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetRepeatingInvoiceAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific repeating invoice by using a unique repeating invoice Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <returns>Task of RepeatingInvoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetRepeatingInvoiceAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific repeating invoice by using a unique repeating invoice Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetRepeatingInvoiceAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific repeating invoices by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String)">
            <summary>
            Retrieves a specific attachment from a specific repeating invoices by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetRepeatingInvoiceAttachmentByIdAsync(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific repeating invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetRepeatingInvoiceAttachmentByIdAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Retrieves a specific attachment from a specific repeating invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="attachmentID">Unique identifier for Attachment object</param>
            <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetRepeatingInvoiceAttachmentsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments from a specific repeating invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetRepeatingInvoiceAttachmentsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves attachments from a specific repeating invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetRepeatingInvoiceHistoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history record for a specific repeating invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <returns>Task of HistoryRecords</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetRepeatingInvoiceHistoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves history record for a specific repeating invoice 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <returns>Task of ApiResponse (HistoryRecords)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetRepeatingInvoicesAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves repeating invoices 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of RepeatingInvoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetRepeatingInvoicesAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves repeating invoices 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportAgedPayablesByContactAsync(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for aged payables by contact 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactId">Unique identifier for a Contact</param>
            <param name="date">The date of the Aged Payables By Contact report (optional)</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportAgedPayablesByContactAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for aged payables by contact 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactId">Unique identifier for a Contact</param>
            <param name="date">The date of the Aged Payables By Contact report (optional)</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportAgedReceivablesByContactAsync(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for aged receivables by contact 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactId">Unique identifier for a Contact</param>
            <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportAgedReceivablesByContactAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for aged receivables by contact 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactId">Unique identifier for a Contact</param>
            <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportBalanceSheetAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retrieves report for balancesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date of the Balance Sheet report (optional)</param>
            <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
            <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
            <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
            <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
            <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
            <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportBalanceSheetAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retrieves report for balancesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date of the Balance Sheet report (optional)</param>
            <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
            <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
            <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
            <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
            <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
            <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportBankSummaryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for bank summary 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportBankSummaryAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for bank summary 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportBudgetSummaryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves report for budget summary 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
            <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
            <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportBudgetSummaryAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves report for budget summary 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
            <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
            <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportExecutiveSummaryAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for executive summary 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportExecutiveSummaryAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Retrieves report for executive summary 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportFromIdAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves a specific report using a unique ReportID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reportID">Unique identifier for a Report</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportFromIdAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Retrieves a specific report using a unique ReportID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reportID">Unique identifier for a Report</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportProfitAndLossAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retrieves report for profit and loss 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
            <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
            <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
            <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
            <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
            <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
            <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
            <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportProfitAndLossAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retrieves report for profit and loss 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
            <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
            <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
            <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
            <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
            <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
            <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
            <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
            <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
            <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportTenNinetyNineAsync(System.String,System.String,System.String)">
            <summary>
            Retrieve reports for 1099 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reportYear">The year of the 1099 report (optional)</param>
            <returns>Task of Reports</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportTenNinetyNineAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Retrieve reports for 1099 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reportYear">The year of the 1099 report (optional)</param>
            <returns>Task of ApiResponse (Reports)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportTrialBalanceAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
            Retrieves report for trial balance 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
            <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportTrialBalanceAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
            Retrieves report for trial balance 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
            <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportsListAsync(System.String,System.String)">
            <summary>
            Retrieves a list of the organistaions unique reports that require a uuid to fetch 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ReportWithRows</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetReportsListAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves a list of the organistaions unique reports that require a uuid to fetch 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (ReportWithRows)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetTaxRatesAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves tax rates 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="taxType">Filter by tax type (optional)</param>
            <returns>Task of TaxRates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetTaxRatesAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves tax rates 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="taxType">Filter by tax type (optional)</param>
            <returns>Task of ApiResponse (TaxRates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetTrackingCategoriesAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Retrieves tracking categories and options 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetTrackingCategoriesAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Retrieves tracking categories and options 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetTrackingCategoryAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific tracking categories and options using a unique tracking category Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetTrackingCategoryAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific tracking categories and options using a unique tracking category Id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetUserAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific user 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="userID">Unique identifier for a User</param>
            <returns>Task of Users</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetUserAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific user 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="userID">Unique identifier for a User</param>
            <returns>Task of ApiResponse (Users)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetUsersAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves users 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of Users</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.GetUsersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Retrieves users 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <returns>Task of ApiResponse (Users)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.PostSetupAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Setup)">
            <summary>
            Sets the chart of accounts, the conversion date and conversion balances 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="setup">Object including an accounts array, a conversion balances array and a conversion date object in body of request</param>
            <returns>Task of ImportSummaryObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.PostSetupAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Setup)">
            <summary>
            Sets the chart of accounts, the conversion date and conversion balances 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="setup">Object including an accounts array, a conversion balances array and a conversion date object in body of request</param>
            <returns>Task of ApiResponse (ImportSummaryObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateAccountAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Accounts)">
            <summary>
            Updates a chart of accounts 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="accounts">Request of type Accounts array with one Account</param>
            <returns>Task of Accounts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateAccountAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Accounts)">
            <summary>
            Updates a chart of accounts 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="accounts">Request of type Accounts array with one Account</param>
            <returns>Task of ApiResponse (Accounts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateAccountAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates attachment on a specific account by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateAccountAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates attachment on a specific account by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="accountID">Unique identifier for Account object</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateBankTransactionAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.BankTransactions,System.Nullable{System.Int32})">
            <summary>
            Updates a single spent or received money transaction 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="bankTransactions"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of BankTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateBankTransactionAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.BankTransactions,System.Nullable{System.Int32})">
            <summary>
            Updates a single spent or received money transaction 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="bankTransactions"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (BankTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateBankTransactionAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific bank transaction by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateBankTransactionAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific bank transaction by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateBankTransferAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
             
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateBankTransferAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
             
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateContactAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Contacts)">
            <summary>
            Updates a specific contact in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateContactAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Contacts)">
            <summary>
            Updates a specific contact in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateContactAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
             
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateContactAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
             
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactID">Unique identifier for a Contact</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateContactGroupAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.ContactGroups)">
            <summary>
            Updates a specific contact group 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
            <returns>Task of ContactGroups</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateContactGroupAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.ContactGroups)">
            <summary>
            Updates a specific contact group 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactGroupID">Unique identifier for a Contact Group</param>
            <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
            <returns>Task of ApiResponse (ContactGroups)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateCreditNoteAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.CreditNotes,System.Nullable{System.Int32})">
            <summary>
            Updates a specific credit note 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of CreditNotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateCreditNoteAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.CreditNotes,System.Nullable{System.Int32})">
            <summary>
            Updates a specific credit note 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (CreditNotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateCreditNoteAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates attachments on a specific credit note by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateCreditNoteAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates attachments on a specific credit note by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNoteID">Unique identifier for a Credit Note</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateExpenseClaimAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.ExpenseClaims)">
            <summary>
            Updates a specific expense claims 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <param name="expenseClaims"></param>
            <returns>Task of ExpenseClaims</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateExpenseClaimAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.ExpenseClaims)">
            <summary>
            Updates a specific expense claims 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
            <param name="expenseClaims"></param>
            <returns>Task of ApiResponse (ExpenseClaims)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateInvoiceAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Invoices,System.Nullable{System.Int32})">
            <summary>
            Updates a specific sales invoices or purchase bills 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="invoices"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Invoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateInvoiceAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Invoices,System.Nullable{System.Int32})">
            <summary>
            Updates a specific sales invoices or purchase bills 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="invoices"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Invoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateInvoiceAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates an attachment from a specific invoices or purchase bill by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateInvoiceAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates an attachment from a specific invoices or purchase bill by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoiceID">Unique identifier for an Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateItemAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Items,System.Nullable{System.Int32})">
            <summary>
            Updates a specific item 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <param name="items"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Items</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateItemAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Items,System.Nullable{System.Int32})">
            <summary>
            Updates a specific item 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="itemID">Unique identifier for an Item</param>
            <param name="items"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Items)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateLinkedTransactionAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.LinkedTransactions)">
            <summary>
            Updates a specific linked transactions (billable expenses) 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
            <param name="linkedTransactions"></param>
            <returns>Task of LinkedTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateLinkedTransactionAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.LinkedTransactions)">
            <summary>
            Updates a specific linked transactions (billable expenses) 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
            <param name="linkedTransactions"></param>
            <returns>Task of ApiResponse (LinkedTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateManualJournalAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.ManualJournals)">
            <summary>
            Updates a specific manual journal 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="manualJournals"></param>
            <returns>Task of ManualJournals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateManualJournalAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.ManualJournals)">
            <summary>
            Updates a specific manual journal 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="manualJournals"></param>
            <returns>Task of ApiResponse (ManualJournals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateManualJournalAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific manual journal by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateManualJournalAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific manual journal by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournalID">Unique identifier for a ManualJournal</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateBankTransactionsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BankTransactions,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more spent or received money transaction 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactions"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of BankTransactions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateBankTransactionsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.BankTransactions,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more spent or received money transaction 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankTransactions"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (BankTransactions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateContactsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Contacts,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates one or more contacts in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contacts"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Contacts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateContactsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Contacts,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates one or more contacts in a Xero organisation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contacts"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Contacts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateCreditNotesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.CreditNotes,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of CreditNotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateCreditNotesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.CreditNotes,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more credit notes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (CreditNotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateEmployeesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Employees,System.Nullable{System.Boolean})">
            <summary>
            Creates a single new employees used in Xero payrun 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employees">Employees with array of Employee object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateEmployeesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Employees,System.Nullable{System.Boolean})">
            <summary>
            Creates a single new employees used in Xero payrun 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employees">Employees with array of Employee object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateInvoicesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Invoices,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more sales invoices or purchase bills 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoices"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Invoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateInvoicesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Invoices,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more sales invoices or purchase bills 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="invoices"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Invoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateItemsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Items,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more items 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="items"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Items</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateItemsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Items,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Updates or creates one or more items 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="items"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Items)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateManualJournalsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ManualJournals,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates a single manual journal 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ManualJournals</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateManualJournalsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.ManualJournals,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates a single manual journal 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (ManualJournals)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreatePurchaseOrdersAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.PurchaseOrders,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates one or more purchase orders 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrders"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of PurchaseOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreatePurchaseOrdersAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.PurchaseOrders,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates one or more purchase orders 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrders"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (PurchaseOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateQuotesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Quotes,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates one or more quotes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quotes"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of Quotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateQuotesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.Quotes,System.Nullable{System.Boolean})">
            <summary>
            Updates or creates one or more quotes 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quotes"></param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (Quotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateRepeatingInvoicesAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.RepeatingInvoices,System.Nullable{System.Boolean})">
            <summary>
            Creates or deletes one or more repeating invoice templates 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of RepeatingInvoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateOrCreateRepeatingInvoicesAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.RepeatingInvoices,System.Nullable{System.Boolean})">
            <summary>
            Creates or deletes one or more repeating invoice templates 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
            <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
            <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdatePurchaseOrderAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.PurchaseOrders)">
            <summary>
            Updates a specific purchase order 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="purchaseOrders"></param>
            <returns>Task of PurchaseOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdatePurchaseOrderAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.PurchaseOrders)">
            <summary>
            Updates a specific purchase order 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="purchaseOrders"></param>
            <returns>Task of ApiResponse (PurchaseOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdatePurchaseOrderAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment for a specific purchase order by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdatePurchaseOrderAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment for a specific purchase order by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateQuoteAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Quotes)">
            <summary>
            Updates a specific quote 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="quotes"></param>
            <returns>Task of Quotes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateQuoteAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Quotes)">
            <summary>
            Updates a specific quote 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="quotes"></param>
            <returns>Task of ApiResponse (Quotes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateQuoteAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific quote by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateQuoteAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific quote by filename 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="quoteID">Unique identifier for an Quote</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateReceiptAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Receipts,System.Nullable{System.Int32})">
            <summary>
            Updates a specific draft expense claim receipts 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="receipts"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of Receipts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateReceiptAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.Receipts,System.Nullable{System.Int32})">
            <summary>
            Updates a specific draft expense claim receipts 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="receipts"></param>
            <param name="unitdp">e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
            <returns>Task of ApiResponse (Receipts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateReceiptAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment on a specific expense claim receipts by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateReceiptAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment on a specific expense claim receipts by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="receiptID">Unique identifier for a Receipt</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateRepeatingInvoiceAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.RepeatingInvoices)">
            <summary>
            Deletes a specific repeating invoice template 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="repeatingInvoices"></param>
            <returns>Task of RepeatingInvoices</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateRepeatingInvoiceAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.RepeatingInvoices)">
            <summary>
            Deletes a specific repeating invoice template 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="repeatingInvoices"></param>
            <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateRepeatingInvoiceAttachmentByFileNameAsync(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific repeating invoices by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of Attachments</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Updates a specific attachment from a specific repeating invoices by file name 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
            <param name="fileName">Name of the attachment</param>
            <param name="body">Byte array of file in body of request</param>
            <returns>Task of ApiResponse (Attachments)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateTaxRateAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.TaxRates)">
            <summary>
            Updates tax rates 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="taxRates"></param>
            <returns>Task of TaxRates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateTaxRateAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Accounting.TaxRates)">
            <summary>
            Updates tax rates 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="taxRates"></param>
            <returns>Task of ApiResponse (TaxRates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateTrackingCategoryAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.TrackingCategory)">
            <summary>
            Updates a specific tracking category 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingCategory"></param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateTrackingCategoryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.TrackingCategory)">
            <summary>
            Updates a specific tracking category 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingCategory"></param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateTrackingOptionsAsync(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.TrackingOption)">
            <summary>
            Updates a specific option for a specific tracking category 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
            <param name="trackingOption"></param>
            <returns>Task of TrackingOptions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AccountingApi.UpdateTrackingOptionsAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.Accounting.TrackingOption)">
            <summary>
            Updates a specific option for a specific tracking category 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
            <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
            <param name="trackingOption"></param>
            <returns>Task of ApiResponse (TrackingOptions)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IAppStoreApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAppStoreApiAsync.GetSubscriptionAsync(System.String,System.Guid)">
            <summary>
            Retrieves a subscription for a given subscriptionId
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="subscriptionId">Unique identifier for Subscription object</param>
            <returns>Task of Subscription</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAppStoreApiAsync.GetSubscriptionAsyncWithHttpInfo(System.String,System.Guid)">
            <summary>
            Retrieves a subscription for a given subscriptionId
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="subscriptionId">Unique identifier for Subscription object</param>
            <returns>Task of ApiResponse (Subscription)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IAppStoreApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.AppStoreApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AppStoreApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AppStoreApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AppStoreApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AppStoreApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AppStoreApi.#ctor(Xero.DotNet.OAuth2.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AppStoreApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AppStoreApi.#ctor(Xero.DotNet.OAuth2.Client.ISynchronousClient,Xero.DotNet.OAuth2.Client.IAsynchronousClient,Xero.DotNet.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AccountingApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.AppStoreApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AppStoreApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.AppStoreApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.AppStoreApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AppStoreApi.GetSubscriptionAsync(System.String,System.Guid)">
            <summary>
            Retrieves a subscription for a given subscriptionId 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="subscriptionId">Unique identifier for Subscription object</param>
            <returns>Task of Subscription</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AppStoreApi.GetSubscriptionAsyncWithHttpInfo(System.String,System.Guid)">
            <summary>
            Retrieves a subscription for a given subscriptionId 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="subscriptionId">Unique identifier for Subscription object</param>
            <returns>Task of ApiResponse (Subscription)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IAssetApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAssetApiAsync.CreateAssetAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Asset.Asset)">
            <summary>
            adds a fixed asset
            </summary>
            <remarks>
            Adds an asset to the system
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="asset">Fixed asset you are creating</param>
            <returns>Task of Asset</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAssetApiAsync.CreateAssetAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Asset.Asset)">
            <summary>
            adds a fixed asset
            </summary>
            <remarks>
            Adds an asset to the system
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="asset">Fixed asset you are creating</param>
            <returns>Task of ApiResponse (Asset)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAssetApiAsync.CreateAssetTypeAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Asset.AssetType)">
            <summary>
            adds a fixed asset type
            </summary>
            <remarks>
            Adds an fixed asset type to the system
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="assetType">Asset type to add (optional)</param>
            <returns>Task of AssetType</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAssetApiAsync.CreateAssetTypeAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Asset.AssetType)">
            <summary>
            adds a fixed asset type
            </summary>
            <remarks>
            Adds an fixed asset type to the system
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="assetType">Asset type to add (optional)</param>
            <returns>Task of ApiResponse (AssetType)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAssetApiAsync.GetAssetByIdAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves fixed asset by id
            </summary>
            <remarks>
            By passing in the appropriate asset id, you can search for a specific fixed asset in the system 
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">fixed asset id for single object</param>
            <returns>Task of Asset</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAssetApiAsync.GetAssetByIdAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves fixed asset by id
            </summary>
            <remarks>
            By passing in the appropriate asset id, you can search for a specific fixed asset in the system 
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">fixed asset id for single object</param>
            <returns>Task of ApiResponse (Asset)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAssetApiAsync.GetAssetSettingsAsync(System.String,System.String)">
            <summary>
            searches fixed asset settings
            </summary>
            <remarks>
            By passing in the appropriate options, you can search for available fixed asset types in the system
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of Setting</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAssetApiAsync.GetAssetSettingsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            searches fixed asset settings
            </summary>
            <remarks>
            By passing in the appropriate options, you can search for available fixed asset types in the system
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (Setting)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAssetApiAsync.GetAssetTypesAsync(System.String,System.String)">
            <summary>
            searches fixed asset types
            </summary>
            <remarks>
            By passing in the appropriate options, you can search for available fixed asset types in the system
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of List&lt;AssetType&gt;</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAssetApiAsync.GetAssetTypesAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            searches fixed asset types
            </summary>
            <remarks>
            By passing in the appropriate options, you can search for available fixed asset types in the system
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (List&lt;AssetType&gt;)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAssetApiAsync.GetAssetsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Asset.AssetStatusQueryParam,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            searches fixed asset
            </summary>
            <remarks>
            By passing in the appropriate options, you can search for available fixed asset in the system
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="status">Required when retrieving a collection of assets. See Asset Status Codes</param>
            <param name="page">Results are paged. This specifies which page of the results to return. The default page is 1. (optional)</param>
            <param name="pageSize">The number of records returned per page. By default the number of records returned is 10. (optional)</param>
            <param name="orderBy">Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)</param>
            <param name="sortDirection">ASC or DESC (optional)</param>
            <param name="filterBy">A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)</param>
            <returns>Task of Assets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IAssetApiAsync.GetAssetsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Asset.AssetStatusQueryParam,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            searches fixed asset
            </summary>
            <remarks>
            By passing in the appropriate options, you can search for available fixed asset in the system
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="status">Required when retrieving a collection of assets. See Asset Status Codes</param>
            <param name="page">Results are paged. This specifies which page of the results to return. The default page is 1. (optional)</param>
            <param name="pageSize">The number of records returned per page. By default the number of records returned is 10. (optional)</param>
            <param name="orderBy">Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)</param>
            <param name="sortDirection">ASC or DESC (optional)</param>
            <param name="filterBy">A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)</param>
            <returns>Task of ApiResponse (Assets)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IAssetApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.AssetApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AssetApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AssetApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.#ctor(Xero.DotNet.OAuth2.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AssetApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.#ctor(Xero.DotNet.OAuth2.Client.ISynchronousClient,Xero.DotNet.OAuth2.Client.IAsynchronousClient,Xero.DotNet.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AccountingApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.AssetApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.AssetApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.AssetApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.CreateAssetAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Asset.Asset)">
            <summary>
            adds a fixed asset Adds an asset to the system
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="asset">Fixed asset you are creating</param>
            <returns>Task of Asset</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.CreateAssetAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Asset.Asset)">
            <summary>
            adds a fixed asset Adds an asset to the system
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="asset">Fixed asset you are creating</param>
            <returns>Task of ApiResponse (Asset)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.CreateAssetTypeAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Asset.AssetType)">
            <summary>
            adds a fixed asset type Adds an fixed asset type to the system
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="assetType">Asset type to add (optional)</param>
            <returns>Task of AssetType</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.CreateAssetTypeAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Asset.AssetType)">
            <summary>
            adds a fixed asset type Adds an fixed asset type to the system
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="assetType">Asset type to add (optional)</param>
            <returns>Task of ApiResponse (AssetType)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.GetAssetByIdAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves fixed asset by id By passing in the appropriate asset id, you can search for a specific fixed asset in the system 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">fixed asset id for single object</param>
            <returns>Task of Asset</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.GetAssetByIdAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves fixed asset by id By passing in the appropriate asset id, you can search for a specific fixed asset in the system 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">fixed asset id for single object</param>
            <returns>Task of ApiResponse (Asset)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.GetAssetSettingsAsync(System.String,System.String)">
            <summary>
            searches fixed asset settings By passing in the appropriate options, you can search for available fixed asset types in the system
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of Setting</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.GetAssetSettingsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            searches fixed asset settings By passing in the appropriate options, you can search for available fixed asset types in the system
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (Setting)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.GetAssetTypesAsync(System.String,System.String)">
            <summary>
            searches fixed asset types By passing in the appropriate options, you can search for available fixed asset types in the system
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of List&lt;AssetType&gt;</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.GetAssetTypesAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            searches fixed asset types By passing in the appropriate options, you can search for available fixed asset types in the system
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (List&lt;AssetType&gt;)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.GetAssetsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Asset.AssetStatusQueryParam,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            searches fixed asset By passing in the appropriate options, you can search for available fixed asset in the system
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="status">Required when retrieving a collection of assets. See Asset Status Codes</param>
            <param name="page">Results are paged. This specifies which page of the results to return. The default page is 1. (optional)</param>
            <param name="pageSize">The number of records returned per page. By default the number of records returned is 10. (optional)</param>
            <param name="orderBy">Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)</param>
            <param name="sortDirection">ASC or DESC (optional)</param>
            <param name="filterBy">A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)</param>
            <returns>Task of Assets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.AssetApi.GetAssetsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Asset.AssetStatusQueryParam,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            searches fixed asset By passing in the appropriate options, you can search for available fixed asset in the system
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="status">Required when retrieving a collection of assets. See Asset Status Codes</param>
            <param name="page">Results are paged. This specifies which page of the results to return. The default page is 1. (optional)</param>
            <param name="pageSize">The number of records returned per page. By default the number of records returned is 10. (optional)</param>
            <param name="orderBy">Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)</param>
            <param name="sortDirection">ASC or DESC (optional)</param>
            <param name="filterBy">A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)</param>
            <returns>Task of ApiResponse (Assets)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.CreateFeedConnectionsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Bankfeeds.FeedConnections)">
            <summary>
            Create one or more new feed connection
            </summary>
            <remarks>
            By passing in the FeedConnections array object in the body, you can create one or more new feed connections
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="feedConnections">Feed Connection(s) array object in the body</param>
            <returns>Task of FeedConnections</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.CreateFeedConnectionsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Bankfeeds.FeedConnections)">
            <summary>
            Create one or more new feed connection
            </summary>
            <remarks>
            By passing in the FeedConnections array object in the body, you can create one or more new feed connections
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="feedConnections">Feed Connection(s) array object in the body</param>
            <returns>Task of ApiResponse (FeedConnections)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.CreateStatementsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Bankfeeds.Statements)">
            <summary>
            Creates one or more new statements
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="statements">Statements array of objects in the body (optional)</param>
            <returns>Task of Statements</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.CreateStatementsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Bankfeeds.Statements)">
            <summary>
            Creates one or more new statements
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="statements">Statements array of objects in the body (optional)</param>
            <returns>Task of ApiResponse (Statements)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.DeleteFeedConnectionsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Bankfeeds.FeedConnections)">
            <summary>
            Delete an existing feed connection
            </summary>
            <remarks>
            By passing in FeedConnections array object in the body, you can delete a feed connection.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="feedConnections">Feed Connections array object in the body</param>
            <returns>Task of FeedConnections</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.DeleteFeedConnectionsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Bankfeeds.FeedConnections)">
            <summary>
            Delete an existing feed connection
            </summary>
            <remarks>
            By passing in FeedConnections array object in the body, you can delete a feed connection.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="feedConnections">Feed Connections array object in the body</param>
            <returns>Task of ApiResponse (FeedConnections)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.GetFeedConnectionAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieve single feed connection based on a unique id provided
            </summary>
            <remarks>
            By passing in a FeedConnection Id options, you can search for matching feed connections
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Unique identifier for retrieving single object</param>
            <returns>Task of FeedConnection</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.GetFeedConnectionAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieve single feed connection based on a unique id provided
            </summary>
            <remarks>
            By passing in a FeedConnection Id options, you can search for matching feed connections
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Unique identifier for retrieving single object</param>
            <returns>Task of ApiResponse (FeedConnection)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.GetFeedConnectionsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Searches for feed connections
            </summary>
            <remarks>
            By passing in the appropriate options, you can search for available feed connections in the system.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)</param>
            <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
            <returns>Task of FeedConnections</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.GetFeedConnectionsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Searches for feed connections
            </summary>
            <remarks>
            By passing in the appropriate options, you can search for available feed connections in the system.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)</param>
            <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
            <returns>Task of ApiResponse (FeedConnections)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.GetStatementAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieve single statement based on unique id provided
            </summary>
            <remarks>
            By passing in a statement id, you can search for matching statements
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="statementId">statement id for single object</param>
            <returns>Task of Statement</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.GetStatementAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieve single statement based on unique id provided
            </summary>
            <remarks>
            By passing in a statement id, you can search for matching statements
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="statementId">statement id for single object</param>
            <returns>Task of ApiResponse (Statement)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.GetStatementsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Retrieve all statements
            </summary>
            <remarks>
            By passing in parameters, you can search for matching statements
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">unique id for single object (optional)</param>
            <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
            <param name="xeroApplicationId"> (optional, default to &quot;00000000-0000-0000-0000-0000000010000&quot;)</param>
            <param name="xeroUserId"> (optional, default to &quot;00000000-0000-0000-0000-0000030000000&quot;)</param>
            <returns>Task of Statements</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IBankFeedsApiAsync.GetStatementsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Retrieve all statements
            </summary>
            <remarks>
            By passing in parameters, you can search for matching statements
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">unique id for single object (optional)</param>
            <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
            <param name="xeroApplicationId"> (optional, default to &quot;00000000-0000-0000-0000-0000000010000&quot;)</param>
            <param name="xeroUserId"> (optional, default to &quot;00000000-0000-0000-0000-0000030000000&quot;)</param>
            <returns>Task of ApiResponse (Statements)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IBankFeedsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.BankFeedsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.BankFeedsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.BankFeedsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.#ctor(Xero.DotNet.OAuth2.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.BankFeedsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.#ctor(Xero.DotNet.OAuth2.Client.ISynchronousClient,Xero.DotNet.OAuth2.Client.IAsynchronousClient,Xero.DotNet.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AccountingApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.BankFeedsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.BankFeedsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.BankFeedsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.CreateFeedConnectionsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Bankfeeds.FeedConnections)">
            <summary>
            Create one or more new feed connection By passing in the FeedConnections array object in the body, you can create one or more new feed connections
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="feedConnections">Feed Connection(s) array object in the body</param>
            <returns>Task of FeedConnections</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.CreateFeedConnectionsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Bankfeeds.FeedConnections)">
            <summary>
            Create one or more new feed connection By passing in the FeedConnections array object in the body, you can create one or more new feed connections
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="feedConnections">Feed Connection(s) array object in the body</param>
            <returns>Task of ApiResponse (FeedConnections)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.CreateStatementsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Bankfeeds.Statements)">
            <summary>
            Creates one or more new statements 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="statements">Statements array of objects in the body (optional)</param>
            <returns>Task of Statements</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.CreateStatementsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Bankfeeds.Statements)">
            <summary>
            Creates one or more new statements 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="statements">Statements array of objects in the body (optional)</param>
            <returns>Task of ApiResponse (Statements)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.DeleteFeedConnectionsAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Bankfeeds.FeedConnections)">
            <summary>
            Delete an existing feed connection By passing in FeedConnections array object in the body, you can delete a feed connection.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="feedConnections">Feed Connections array object in the body</param>
            <returns>Task of FeedConnections</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.DeleteFeedConnectionsAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Bankfeeds.FeedConnections)">
            <summary>
            Delete an existing feed connection By passing in FeedConnections array object in the body, you can delete a feed connection.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="feedConnections">Feed Connections array object in the body</param>
            <returns>Task of ApiResponse (FeedConnections)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.GetFeedConnectionAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieve single feed connection based on a unique id provided By passing in a FeedConnection Id options, you can search for matching feed connections
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Unique identifier for retrieving single object</param>
            <returns>Task of FeedConnection</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.GetFeedConnectionAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieve single feed connection based on a unique id provided By passing in a FeedConnection Id options, you can search for matching feed connections
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Unique identifier for retrieving single object</param>
            <returns>Task of ApiResponse (FeedConnection)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.GetFeedConnectionsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Searches for feed connections By passing in the appropriate options, you can search for available feed connections in the system.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)</param>
            <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
            <returns>Task of FeedConnections</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.GetFeedConnectionsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Searches for feed connections By passing in the appropriate options, you can search for available feed connections in the system.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)</param>
            <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
            <returns>Task of ApiResponse (FeedConnections)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.GetStatementAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieve single statement based on unique id provided By passing in a statement id, you can search for matching statements
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="statementId">statement id for single object</param>
            <returns>Task of Statement</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.GetStatementAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieve single statement based on unique id provided By passing in a statement id, you can search for matching statements
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="statementId">statement id for single object</param>
            <returns>Task of ApiResponse (Statement)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.GetStatementsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Retrieve all statements By passing in parameters, you can search for matching statements
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">unique id for single object (optional)</param>
            <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
            <param name="xeroApplicationId"> (optional, default to &quot;00000000-0000-0000-0000-0000000010000&quot;)</param>
            <param name="xeroUserId"> (optional, default to &quot;00000000-0000-0000-0000-0000030000000&quot;)</param>
            <returns>Task of Statements</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.BankFeedsApi.GetStatementsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Retrieve all statements By passing in parameters, you can search for matching statements
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">unique id for single object (optional)</param>
            <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
            <param name="xeroApplicationId"> (optional, default to &quot;00000000-0000-0000-0000-0000000010000&quot;)</param>
            <param name="xeroUserId"> (optional, default to &quot;00000000-0000-0000-0000-0000030000000&quot;)</param>
            <returns>Task of ApiResponse (Statements)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IFilesApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.CreateFileAssociationAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Files.Association)">
            <summary>
            Creates a new file association
            </summary>
            <remarks>
            By passing in the appropriate options, you can create a new folder
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <param name="association"> (optional)</param>
            <returns>Task of Association</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.CreateFileAssociationAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Files.Association)">
            <summary>
            Creates a new file association
            </summary>
            <remarks>
            By passing in the appropriate options, you can create a new folder
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <param name="association"> (optional)</param>
            <returns>Task of ApiResponse (Association)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.CreateFolderAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Files.Folder)">
            <summary>
            Creates a new folder
            </summary>
            <remarks>
            By passing in the appropriate properties, you can create a new folder
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folder"> (optional)</param>
            <returns>Task of Folder</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.CreateFolderAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Files.Folder)">
            <summary>
            Creates a new folder
            </summary>
            <remarks>
            By passing in the appropriate properties, you can create a new folder
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folder"> (optional)</param>
            <returns>Task of ApiResponse (Folder)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.DeleteFileAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific file
            </summary>
            <remarks>
            Delete a specific file
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.DeleteFileAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific file
            </summary>
            <remarks>
            Delete a specific file
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.DeleteFileAssociationAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes an existing file association
            </summary>
            <remarks>
            By passing in the appropriate options, you can create a new folder
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <param name="objectId">Object id for single object</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.DeleteFileAssociationAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes an existing file association
            </summary>
            <remarks>
            By passing in the appropriate options, you can create a new folder
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <param name="objectId">Object id for single object</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.DeleteFolderAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a folder
            </summary>
            <remarks>
            By passing in the appropriate ID, you can delete a folder
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">Folder id for single object</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.DeleteFolderAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a folder
            </summary>
            <remarks>
            By passing in the appropriate ID, you can delete a folder
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">Folder id for single object</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetAssociationsByObjectAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves an association object using a unique object ID
            </summary>
            <remarks>
            By passing in the appropriate options,
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="objectId">Object id for single object</param>
            <returns>Task of List&lt;Association&gt;</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetAssociationsByObjectAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves an association object using a unique object ID
            </summary>
            <remarks>
            By passing in the appropriate options,
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="objectId">Object id for single object</param>
            <returns>Task of ApiResponse (List&lt;Association&gt;)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetFileAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a file by a unique file ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of FileObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetFileAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a file by a unique file ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of ApiResponse (FileObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetFileAssociationsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific file associations
            </summary>
            <remarks>
            By passing in the appropriate options,  
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of List&lt;Association&gt;</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetFileAssociationsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific file associations
            </summary>
            <remarks>
            By passing in the appropriate options,  
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of ApiResponse (List&lt;Association&gt;)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetFileContentAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the content of a specific file
            </summary>
            <remarks>
            By passing in the appropriate options, retrieve data for specific file
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetFileContentAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the content of a specific file
            </summary>
            <remarks>
            By passing in the appropriate options, retrieve data for specific file
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves files
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="pagesize">pass an optional page size value (optional)</param>
            <param name="page">number of records to skip for pagination (optional)</param>
            <param name="sort">values to sort by (optional)</param>
            <returns>Task of Files</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetFilesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves files
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="pagesize">pass an optional page size value (optional)</param>
            <param name="page">number of records to skip for pagination (optional)</param>
            <param name="sort">values to sort by (optional)</param>
            <returns>Task of ApiResponse (Files)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetFolderAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific folder by using a unique folder ID
            </summary>
            <remarks>
            By passing in the appropriate ID, you can search for specific folder
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">Folder id for single object</param>
            <returns>Task of Folder</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetFolderAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific folder by using a unique folder ID
            </summary>
            <remarks>
            By passing in the appropriate ID, you can search for specific folder
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">Folder id for single object</param>
            <returns>Task of ApiResponse (Folder)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetFoldersAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves folders
            </summary>
            <remarks>
            By passing in the appropriate options, you can search for available folders
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="sort">values to sort by (optional)</param>
            <returns>Task of List&lt;Folder&gt;</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetFoldersAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Retrieves folders
            </summary>
            <remarks>
            By passing in the appropriate options, you can search for available folders
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="sort">values to sort by (optional)</param>
            <returns>Task of ApiResponse (List&lt;Folder&gt;)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetInboxAsync(System.String,System.String)">
            <summary>
            Retrieves inbox folder
            </summary>
            <remarks>
            Search for the user inbox
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of Folder</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.GetInboxAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves inbox folder
            </summary>
            <remarks>
            Search for the user inbox
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (Folder)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.UpdateFileAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Files.FileObject)">
            <summary>
            Update a file
            </summary>
            <remarks>
            Updates file properties of a single file
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <param name="fileObject"> (optional)</param>
            <returns>Task of FileObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.UpdateFileAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Files.FileObject)">
            <summary>
            Update a file
            </summary>
            <remarks>
            Updates file properties of a single file
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <param name="fileObject"> (optional)</param>
            <returns>Task of ApiResponse (FileObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.UpdateFolderAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Files.Folder)">
            <summary>
            Updates an existing folder
            </summary>
            <remarks>
            By passing in the appropriate ID and properties, you can update a folder
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">Folder id for single object</param>
            <param name="folder"></param>
            <returns>Task of Folder</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.UpdateFolderAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Files.Folder)">
            <summary>
            Updates an existing folder
            </summary>
            <remarks>
            By passing in the appropriate ID and properties, you can update a folder
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">Folder id for single object</param>
            <param name="folder"></param>
            <returns>Task of ApiResponse (Folder)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.UploadFileAsync(System.String,System.String,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Uploads a File to the inbox
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="body"></param>
            <param name="name">exact name of the file you are uploading</param>
            <param name="filename"></param>
            <param name="mimeType"> (optional)</param>
            <returns>Task of FileObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.UploadFileAsyncWithHttpInfo(System.String,System.String,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Uploads a File to the inbox
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="body"></param>
            <param name="name">exact name of the file you are uploading</param>
            <param name="filename"></param>
            <param name="mimeType"> (optional)</param>
            <returns>Task of ApiResponse (FileObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.UploadFileToFolderAsync(System.String,System.String,System.Guid,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Uploads a File to a specific folder
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">pass required folder id to save file to specific folder</param>
            <param name="body"></param>
            <param name="name">exact name of the file you are uploading</param>
            <param name="filename"></param>
            <param name="mimeType"> (optional)</param>
            <returns>Task of FileObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFilesApiAsync.UploadFileToFolderAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Uploads a File to a specific folder
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">pass required folder id to save file to specific folder</param>
            <param name="body"></param>
            <param name="name">exact name of the file you are uploading</param>
            <param name="filename"></param>
            <param name="mimeType"> (optional)</param>
            <returns>Task of ApiResponse (FileObject)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IFilesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.FilesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.FilesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.FilesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.#ctor(Xero.DotNet.OAuth2.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.FilesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.#ctor(Xero.DotNet.OAuth2.Client.ISynchronousClient,Xero.DotNet.OAuth2.Client.IAsynchronousClient,Xero.DotNet.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AccountingApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.FilesApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.FilesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.FilesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.CreateFileAssociationAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Files.Association)">
            <summary>
            Creates a new file association By passing in the appropriate options, you can create a new folder
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <param name="association"> (optional)</param>
            <returns>Task of Association</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.CreateFileAssociationAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Files.Association)">
            <summary>
            Creates a new file association By passing in the appropriate options, you can create a new folder
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <param name="association"> (optional)</param>
            <returns>Task of ApiResponse (Association)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.CreateFolderAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.Files.Folder)">
            <summary>
            Creates a new folder By passing in the appropriate properties, you can create a new folder
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folder"> (optional)</param>
            <returns>Task of Folder</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.CreateFolderAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.Files.Folder)">
            <summary>
            Creates a new folder By passing in the appropriate properties, you can create a new folder
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folder"> (optional)</param>
            <returns>Task of ApiResponse (Folder)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.DeleteFileAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific file Delete a specific file
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.DeleteFileAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific file Delete a specific file
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.DeleteFileAssociationAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes an existing file association By passing in the appropriate options, you can create a new folder
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <param name="objectId">Object id for single object</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.DeleteFileAssociationAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes an existing file association By passing in the appropriate options, you can create a new folder
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <param name="objectId">Object id for single object</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.DeleteFolderAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a folder By passing in the appropriate ID, you can delete a folder
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">Folder id for single object</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.DeleteFolderAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a folder By passing in the appropriate ID, you can delete a folder
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">Folder id for single object</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetAssociationsByObjectAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves an association object using a unique object ID By passing in the appropriate options,
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="objectId">Object id for single object</param>
            <returns>Task of List&lt;Association&gt;</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetAssociationsByObjectAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves an association object using a unique object ID By passing in the appropriate options,
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="objectId">Object id for single object</param>
            <returns>Task of ApiResponse (List&lt;Association&gt;)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetFileAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a file by a unique file ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of FileObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetFileAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a file by a unique file ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of ApiResponse (FileObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetFileAssociationsAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific file associations By passing in the appropriate options,  
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of List&lt;Association&gt;</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetFileAssociationsAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific file associations By passing in the appropriate options,  
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of ApiResponse (List&lt;Association&gt;)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetFileContentAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the content of a specific file By passing in the appropriate options, retrieve data for specific file
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetFileContentAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the content of a specific file By passing in the appropriate options, retrieve data for specific file
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves files 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="pagesize">pass an optional page size value (optional)</param>
            <param name="page">number of records to skip for pagination (optional)</param>
            <param name="sort">values to sort by (optional)</param>
            <returns>Task of Files</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetFilesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves files 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="pagesize">pass an optional page size value (optional)</param>
            <param name="page">number of records to skip for pagination (optional)</param>
            <param name="sort">values to sort by (optional)</param>
            <returns>Task of ApiResponse (Files)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetFolderAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific folder by using a unique folder ID By passing in the appropriate ID, you can search for specific folder
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">Folder id for single object</param>
            <returns>Task of Folder</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetFolderAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific folder by using a unique folder ID By passing in the appropriate ID, you can search for specific folder
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">Folder id for single object</param>
            <returns>Task of ApiResponse (Folder)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetFoldersAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves folders By passing in the appropriate options, you can search for available folders
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="sort">values to sort by (optional)</param>
            <returns>Task of List&lt;Folder&gt;</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetFoldersAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Retrieves folders By passing in the appropriate options, you can search for available folders
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="sort">values to sort by (optional)</param>
            <returns>Task of ApiResponse (List&lt;Folder&gt;)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetInboxAsync(System.String,System.String)">
            <summary>
            Retrieves inbox folder Search for the user inbox
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of Folder</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.GetInboxAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves inbox folder Search for the user inbox
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (Folder)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.UpdateFileAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Files.FileObject)">
            <summary>
            Update a file Updates file properties of a single file
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <param name="fileObject"> (optional)</param>
            <returns>Task of FileObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.UpdateFileAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Files.FileObject)">
            <summary>
            Update a file Updates file properties of a single file
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="fileId">File id for single object</param>
            <param name="fileObject"> (optional)</param>
            <returns>Task of ApiResponse (FileObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.UpdateFolderAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Files.Folder)">
            <summary>
            Updates an existing folder By passing in the appropriate ID and properties, you can update a folder
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">Folder id for single object</param>
            <param name="folder"></param>
            <returns>Task of Folder</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.UpdateFolderAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.Files.Folder)">
            <summary>
            Updates an existing folder By passing in the appropriate ID and properties, you can update a folder
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">Folder id for single object</param>
            <param name="folder"></param>
            <returns>Task of ApiResponse (Folder)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.UploadFileAsync(System.String,System.String,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Uploads a File to the inbox 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="body"></param>
            <param name="name">exact name of the file you are uploading</param>
            <param name="filename"></param>
            <param name="mimeType"> (optional)</param>
            <returns>Task of FileObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.UploadFileAsyncWithHttpInfo(System.String,System.String,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Uploads a File to the inbox 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="body"></param>
            <param name="name">exact name of the file you are uploading</param>
            <param name="filename"></param>
            <param name="mimeType"> (optional)</param>
            <returns>Task of ApiResponse (FileObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.UploadFileToFolderAsync(System.String,System.String,System.Guid,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Uploads a File to a specific folder 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">pass required folder id to save file to specific folder</param>
            <param name="body"></param>
            <param name="name">exact name of the file you are uploading</param>
            <param name="filename"></param>
            <param name="mimeType"> (optional)</param>
            <returns>Task of FileObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FilesApi.UploadFileToFolderAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Uploads a File to a specific folder 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="folderId">pass required folder id to save file to specific folder</param>
            <param name="body"></param>
            <param name="name">exact name of the file you are uploading</param>
            <param name="filename"></param>
            <param name="mimeType"> (optional)</param>
            <returns>Task of ApiResponse (FileObject)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IFinanceApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetAccountingActivityAccountUsageAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Get account usage
            </summary>
            <remarks>
            A summary of how each account is being transacted on exposing the level of detail and amounts attributable to manual adjustments.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="startMonth">date, yyyy-MM                 If no parameter is provided, the month 12 months prior to the end month will be used.                Account usage for up to 12 months from this date will be returned. (optional)</param>
            <param name="endMonth">date, yyyy-MM                 If no parameter is provided, the current month will be used.                Account usage for up to 12 months prior to this date will be returned. (optional)</param>
            <returns>Task of AccountUsageResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetAccountingActivityAccountUsageAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Get account usage
            </summary>
            <remarks>
            A summary of how each account is being transacted on exposing the level of detail and amounts attributable to manual adjustments.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="startMonth">date, yyyy-MM                 If no parameter is provided, the month 12 months prior to the end month will be used.                Account usage for up to 12 months from this date will be returned. (optional)</param>
            <param name="endMonth">date, yyyy-MM                 If no parameter is provided, the current month will be used.                Account usage for up to 12 months prior to this date will be returned. (optional)</param>
            <returns>Task of ApiResponse (AccountUsageResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetAccountingActivityLockHistoryAsync(System.String,System.String,System.String)">
            <summary>
            Get lock history
            </summary>
            <remarks>
            Provides a history of locking of accounting books. Locking may be an indicator of good accounting practices that could reduce the risk of changes to accounting records in prior periods.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any changes to hard or soft lock dates that were made within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a change is visible from this API. (optional)</param>
            <returns>Task of LockHistoryResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetAccountingActivityLockHistoryAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Get lock history
            </summary>
            <remarks>
            Provides a history of locking of accounting books. Locking may be an indicator of good accounting practices that could reduce the risk of changes to accounting records in prior periods.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any changes to hard or soft lock dates that were made within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a change is visible from this API. (optional)</param>
            <returns>Task of ApiResponse (LockHistoryResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetAccountingActivityReportHistoryAsync(System.String,System.String,System.String)">
            <summary>
            Get report history
            </summary>
            <remarks>
            For a specified organisation, provides a summary of all the reports published within a given period, which may be an indicator for good business management and oversight.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any reports that were published within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a published report is visible from this API. (optional)</param>
            <returns>Task of ReportHistoryResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetAccountingActivityReportHistoryAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Get report history
            </summary>
            <remarks>
            For a specified organisation, provides a summary of all the reports published within a given period, which may be an indicator for good business management and oversight.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any reports that were published within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a published report is visible from this API. (optional)</param>
            <returns>Task of ApiResponse (ReportHistoryResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetAccountingActivityUserActivitiesAsync(System.String,System.String,System.String)">
            <summary>
            Get user activities
            </summary>
            <remarks>
            For a specified organisation, provides a list of all the users registered, and a history of their accounting transactions. Also identifies the existence of an external accounting advisor and the level of interaction.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="dataMonth">date, yyyy-MM                 The specified month must be complete (in the past); The current month cannot be specified since it is not complete.                If no parameter is provided, the month immediately previous to the current month will be used.                Any user activities occurring within the specified month will be returned.                Please be aware that there may be a delay of up to 3 days before a user activity is visible from this API. (optional)</param>
            <returns>Task of UserActivitiesResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetAccountingActivityUserActivitiesAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Get user activities
            </summary>
            <remarks>
            For a specified organisation, provides a list of all the users registered, and a history of their accounting transactions. Also identifies the existence of an external accounting advisor and the level of interaction.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="dataMonth">date, yyyy-MM                 The specified month must be complete (in the past); The current month cannot be specified since it is not complete.                If no parameter is provided, the month immediately previous to the current month will be used.                Any user activities occurring within the specified month will be returned.                Please be aware that there may be a delay of up to 3 days before a user activity is visible from this API. (optional)</param>
            <returns>Task of ApiResponse (UserActivitiesResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetBankStatementAccountingAsync(System.String,System.String,System.Guid,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Get Bank Statement Accounting
            </summary>
            <remarks>
            For lenders that prefer using bank statement data as the source of truth.  We provide a data point that will allow access to customer bank statements, plus for reconciled bank transactions the matching accounting, invoice and billing data as well.  As customers reconcile bank statements to invoices and bills, this transaction detail will provide valuable insight for lender&#39;s assessment measures. 
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankAccountID">string, GUID    Bank account Id</param>
            <param name="fromDate">date, yyyy-MM-dd     Specifies the start date of the query period.   The maximum range of the query period is 12 months. If the specified query period is more than 12 months the request will be rejected.</param>
            <param name="toDate">date, yyyy-MM-dd     Specifies the end date of the query period.   If the end date is a future date, the request will be rejected.</param>
            <param name="summaryOnly">boolean, true/false    The default value is true if no parameter is provided.    In summary mode, the response will exclude the computation-heavy LineItems fields from bank transaction, invoice, credit note, prepayment and overpayment data, making the API calls quicker and more efficient. (optional)</param>
            <returns>Task of BankStatementAccountingResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetBankStatementAccountingAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Get Bank Statement Accounting
            </summary>
            <remarks>
            For lenders that prefer using bank statement data as the source of truth.  We provide a data point that will allow access to customer bank statements, plus for reconciled bank transactions the matching accounting, invoice and billing data as well.  As customers reconcile bank statements to invoices and bills, this transaction detail will provide valuable insight for lender&#39;s assessment measures. 
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankAccountID">string, GUID    Bank account Id</param>
            <param name="fromDate">date, yyyy-MM-dd     Specifies the start date of the query period.   The maximum range of the query period is 12 months. If the specified query period is more than 12 months the request will be rejected.</param>
            <param name="toDate">date, yyyy-MM-dd     Specifies the end date of the query period.   If the end date is a future date, the request will be rejected.</param>
            <param name="summaryOnly">boolean, true/false    The default value is true if no parameter is provided.    In summary mode, the response will exclude the computation-heavy LineItems fields from bank transaction, invoice, credit note, prepayment and overpayment data, making the API calls quicker and more efficient. (optional)</param>
            <returns>Task of ApiResponse (BankStatementAccountingResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetCashValidationAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Get cash validation
            </summary>
            <remarks>
            Summarizes the total cash position for each account for an org
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="balanceDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘balance date’ will return transactions based on the accounting date entered by the user.  Transactions before the balanceDate will be included.  The user has discretion as to which accounting period the transaction relates to.    The ‘balance date’  will control the latest maximum date of transactions included in the aggregate numbers.  Balance date does not affect the CurrentStatement object, as this will always return the most recent statement before asAtSystemDate (if specified) (optional)</param>
            <param name="asAtSystemDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘as at’ date will return transactions based on the  creation date.  It reflects the date the transactions were entered into Xero, not the accounting date.  The ‘as at’ date can not be overridden by the user.  This can be used to estimate a ‘historical frequency of reconciliation’.    The ‘as at’ date will affect the current statement in the response, as any candidate statements created after this date will be filtered out.  Thus the current statement returned will be the most recent statement prior to the specified ‘as at’ date.  Be aware that neither the begin date, nor the balance date, will affect the current statement.    Note;  information is only presented when system architecture allows, meaning historical cash validation information will be an estimate. In addition, delete events are not aware of the ‘as at’ functionality in this endpoint, meaning that transactions deleted at the time the API is accessed will be considered to always have been deleted. (optional)</param>
            <param name="beginDate">date, yyyy-MM-dd     If no parameter is provided, the aggregate results will be drawn from the user’s total history.    The ‘begin date’ will return transactions based on the accounting date entered by the user. Transactions after the beginDate will be included.  The user has discretion as to which accounting period the transaction relates to. (optional)</param>
            <returns>Task of List&lt;CashValidationResponse&gt;</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetCashValidationAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Get cash validation
            </summary>
            <remarks>
            Summarizes the total cash position for each account for an org
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="balanceDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘balance date’ will return transactions based on the accounting date entered by the user.  Transactions before the balanceDate will be included.  The user has discretion as to which accounting period the transaction relates to.    The ‘balance date’  will control the latest maximum date of transactions included in the aggregate numbers.  Balance date does not affect the CurrentStatement object, as this will always return the most recent statement before asAtSystemDate (if specified) (optional)</param>
            <param name="asAtSystemDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘as at’ date will return transactions based on the  creation date.  It reflects the date the transactions were entered into Xero, not the accounting date.  The ‘as at’ date can not be overridden by the user.  This can be used to estimate a ‘historical frequency of reconciliation’.    The ‘as at’ date will affect the current statement in the response, as any candidate statements created after this date will be filtered out.  Thus the current statement returned will be the most recent statement prior to the specified ‘as at’ date.  Be aware that neither the begin date, nor the balance date, will affect the current statement.    Note;  information is only presented when system architecture allows, meaning historical cash validation information will be an estimate. In addition, delete events are not aware of the ‘as at’ functionality in this endpoint, meaning that transactions deleted at the time the API is accessed will be considered to always have been deleted. (optional)</param>
            <param name="beginDate">date, yyyy-MM-dd     If no parameter is provided, the aggregate results will be drawn from the user’s total history.    The ‘begin date’ will return transactions based on the accounting date entered by the user. Transactions after the beginDate will be included.  The user has discretion as to which accounting period the transaction relates to. (optional)</param>
            <returns>Task of ApiResponse (List&lt;CashValidationResponse&gt;)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetFinancialStatementBalanceSheetAsync(System.String,System.String,System.String)">
            <summary>
            Get Balance Sheet report
            </summary>
            <remarks>
            The balance sheet report is a standard financial report which describes the financial position of an organisation at a point in time.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="balanceDate">Specifies the date for balance sheet report.    Format yyyy-MM-dd. If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of BalanceSheetResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetFinancialStatementBalanceSheetAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Get Balance Sheet report
            </summary>
            <remarks>
            The balance sheet report is a standard financial report which describes the financial position of an organisation at a point in time.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="balanceDate">Specifies the date for balance sheet report.    Format yyyy-MM-dd. If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of ApiResponse (BalanceSheetResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetFinancialStatementCashflowAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Get Cash flow report
            </summary>
            <remarks>
            The statement of cash flows - direct method, provides the year to date changes in operating, financing and investing cash flow activities for an organisation. Cashflow statement is not available in US region at this stage.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for cash flow report.    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
            <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for cash flow report.    If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of CashflowResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetFinancialStatementCashflowAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Get Cash flow report
            </summary>
            <remarks>
            The statement of cash flows - direct method, provides the year to date changes in operating, financing and investing cash flow activities for an organisation. Cashflow statement is not available in US region at this stage.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for cash flow report.    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
            <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for cash flow report.    If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of ApiResponse (CashflowResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetFinancialStatementContactsExpenseAsync(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Get expense by contacts report
            </summary>
            <remarks>
            The expense by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
            <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
            <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <returns>Task of IncomeByContactResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetFinancialStatementContactsExpenseAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Get expense by contacts report
            </summary>
            <remarks>
            The expense by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
            <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
            <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <returns>Task of ApiResponse (IncomeByContactResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetFinancialStatementContactsRevenueAsync(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Get revenue by contacts report
            </summary>
            <remarks>
            The revenue by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
            <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
            <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <returns>Task of IncomeByContactResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetFinancialStatementContactsRevenueAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Get revenue by contacts report
            </summary>
            <remarks>
            The revenue by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
            <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
            <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <returns>Task of ApiResponse (IncomeByContactResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetFinancialStatementProfitAndLossAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Get Profit &amp; Loss report
            </summary>
            <remarks>
            The profit and loss statement is a standard financial report providing detailed year to date income and expense detail for an organisation.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for profit and loss report    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
            <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for profit and loss report     If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of ProfitAndLossResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetFinancialStatementProfitAndLossAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Get Profit &amp; Loss report
            </summary>
            <remarks>
            The profit and loss statement is a standard financial report providing detailed year to date income and expense detail for an organisation.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for profit and loss report    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
            <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for profit and loss report     If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of ApiResponse (ProfitAndLossResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetFinancialStatementTrialBalanceAsync(System.String,System.String,System.String)">
            <summary>
            Get Trial Balance report
            </summary>
            <remarks>
            The trial balance provides a detailed list of all accounts of an organisation at a point in time, with revenue and expense items being year to date.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="endDate">Date e.g. yyyy-MM-dd     Specifies the end date for trial balance report     If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of TrialBalanceResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IFinanceApiAsync.GetFinancialStatementTrialBalanceAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Get Trial Balance report
            </summary>
            <remarks>
            The trial balance provides a detailed list of all accounts of an organisation at a point in time, with revenue and expense items being year to date.
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="endDate">Date e.g. yyyy-MM-dd     Specifies the end date for trial balance report     If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of ApiResponse (TrialBalanceResponse)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IFinanceApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.FinanceApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.FinanceApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.FinanceApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.#ctor(Xero.DotNet.OAuth2.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.FinanceApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.#ctor(Xero.DotNet.OAuth2.Client.ISynchronousClient,Xero.DotNet.OAuth2.Client.IAsynchronousClient,Xero.DotNet.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AccountingApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.FinanceApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.FinanceApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.FinanceApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetAccountingActivityAccountUsageAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Get account usage A summary of how each account is being transacted on exposing the level of detail and amounts attributable to manual adjustments.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="startMonth">date, yyyy-MM                 If no parameter is provided, the month 12 months prior to the end month will be used.                Account usage for up to 12 months from this date will be returned. (optional)</param>
            <param name="endMonth">date, yyyy-MM                 If no parameter is provided, the current month will be used.                Account usage for up to 12 months prior to this date will be returned. (optional)</param>
            <returns>Task of AccountUsageResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetAccountingActivityAccountUsageAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Get account usage A summary of how each account is being transacted on exposing the level of detail and amounts attributable to manual adjustments.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="startMonth">date, yyyy-MM                 If no parameter is provided, the month 12 months prior to the end month will be used.                Account usage for up to 12 months from this date will be returned. (optional)</param>
            <param name="endMonth">date, yyyy-MM                 If no parameter is provided, the current month will be used.                Account usage for up to 12 months prior to this date will be returned. (optional)</param>
            <returns>Task of ApiResponse (AccountUsageResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetAccountingActivityLockHistoryAsync(System.String,System.String,System.String)">
            <summary>
            Get lock history Provides a history of locking of accounting books. Locking may be an indicator of good accounting practices that could reduce the risk of changes to accounting records in prior periods.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any changes to hard or soft lock dates that were made within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a change is visible from this API. (optional)</param>
            <returns>Task of LockHistoryResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetAccountingActivityLockHistoryAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Get lock history Provides a history of locking of accounting books. Locking may be an indicator of good accounting practices that could reduce the risk of changes to accounting records in prior periods.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any changes to hard or soft lock dates that were made within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a change is visible from this API. (optional)</param>
            <returns>Task of ApiResponse (LockHistoryResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetAccountingActivityReportHistoryAsync(System.String,System.String,System.String)">
            <summary>
            Get report history For a specified organisation, provides a summary of all the reports published within a given period, which may be an indicator for good business management and oversight.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any reports that were published within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a published report is visible from this API. (optional)</param>
            <returns>Task of ReportHistoryResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetAccountingActivityReportHistoryAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Get report history For a specified organisation, provides a summary of all the reports published within a given period, which may be an indicator for good business management and oversight.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any reports that were published within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a published report is visible from this API. (optional)</param>
            <returns>Task of ApiResponse (ReportHistoryResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetAccountingActivityUserActivitiesAsync(System.String,System.String,System.String)">
            <summary>
            Get user activities For a specified organisation, provides a list of all the users registered, and a history of their accounting transactions. Also identifies the existence of an external accounting advisor and the level of interaction.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="dataMonth">date, yyyy-MM                 The specified month must be complete (in the past); The current month cannot be specified since it is not complete.                If no parameter is provided, the month immediately previous to the current month will be used.                Any user activities occurring within the specified month will be returned.                Please be aware that there may be a delay of up to 3 days before a user activity is visible from this API. (optional)</param>
            <returns>Task of UserActivitiesResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetAccountingActivityUserActivitiesAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Get user activities For a specified organisation, provides a list of all the users registered, and a history of their accounting transactions. Also identifies the existence of an external accounting advisor and the level of interaction.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="dataMonth">date, yyyy-MM                 The specified month must be complete (in the past); The current month cannot be specified since it is not complete.                If no parameter is provided, the month immediately previous to the current month will be used.                Any user activities occurring within the specified month will be returned.                Please be aware that there may be a delay of up to 3 days before a user activity is visible from this API. (optional)</param>
            <returns>Task of ApiResponse (UserActivitiesResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetBankStatementAccountingAsync(System.String,System.String,System.Guid,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Get Bank Statement Accounting For lenders that prefer using bank statement data as the source of truth.  We provide a data point that will allow access to customer bank statements, plus for reconciled bank transactions the matching accounting, invoice and billing data as well.  As customers reconcile bank statements to invoices and bills, this transaction detail will provide valuable insight for lender&#39;s assessment measures. 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankAccountID">string, GUID    Bank account Id</param>
            <param name="fromDate">date, yyyy-MM-dd     Specifies the start date of the query period.   The maximum range of the query period is 12 months. If the specified query period is more than 12 months the request will be rejected.</param>
            <param name="toDate">date, yyyy-MM-dd     Specifies the end date of the query period.   If the end date is a future date, the request will be rejected.</param>
            <param name="summaryOnly">boolean, true/false    The default value is true if no parameter is provided.    In summary mode, the response will exclude the computation-heavy LineItems fields from bank transaction, invoice, credit note, prepayment and overpayment data, making the API calls quicker and more efficient. (optional)</param>
            <returns>Task of BankStatementAccountingResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetBankStatementAccountingAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Get Bank Statement Accounting For lenders that prefer using bank statement data as the source of truth.  We provide a data point that will allow access to customer bank statements, plus for reconciled bank transactions the matching accounting, invoice and billing data as well.  As customers reconcile bank statements to invoices and bills, this transaction detail will provide valuable insight for lender&#39;s assessment measures. 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="bankAccountID">string, GUID    Bank account Id</param>
            <param name="fromDate">date, yyyy-MM-dd     Specifies the start date of the query period.   The maximum range of the query period is 12 months. If the specified query period is more than 12 months the request will be rejected.</param>
            <param name="toDate">date, yyyy-MM-dd     Specifies the end date of the query period.   If the end date is a future date, the request will be rejected.</param>
            <param name="summaryOnly">boolean, true/false    The default value is true if no parameter is provided.    In summary mode, the response will exclude the computation-heavy LineItems fields from bank transaction, invoice, credit note, prepayment and overpayment data, making the API calls quicker and more efficient. (optional)</param>
            <returns>Task of ApiResponse (BankStatementAccountingResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetCashValidationAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Get cash validation Summarizes the total cash position for each account for an org
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="balanceDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘balance date’ will return transactions based on the accounting date entered by the user.  Transactions before the balanceDate will be included.  The user has discretion as to which accounting period the transaction relates to.    The ‘balance date’  will control the latest maximum date of transactions included in the aggregate numbers.  Balance date does not affect the CurrentStatement object, as this will always return the most recent statement before asAtSystemDate (if specified) (optional)</param>
            <param name="asAtSystemDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘as at’ date will return transactions based on the  creation date.  It reflects the date the transactions were entered into Xero, not the accounting date.  The ‘as at’ date can not be overridden by the user.  This can be used to estimate a ‘historical frequency of reconciliation’.    The ‘as at’ date will affect the current statement in the response, as any candidate statements created after this date will be filtered out.  Thus the current statement returned will be the most recent statement prior to the specified ‘as at’ date.  Be aware that neither the begin date, nor the balance date, will affect the current statement.    Note;  information is only presented when system architecture allows, meaning historical cash validation information will be an estimate. In addition, delete events are not aware of the ‘as at’ functionality in this endpoint, meaning that transactions deleted at the time the API is accessed will be considered to always have been deleted. (optional)</param>
            <param name="beginDate">date, yyyy-MM-dd     If no parameter is provided, the aggregate results will be drawn from the user’s total history.    The ‘begin date’ will return transactions based on the accounting date entered by the user. Transactions after the beginDate will be included.  The user has discretion as to which accounting period the transaction relates to. (optional)</param>
            <returns>Task of List&lt;CashValidationResponse&gt;</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetCashValidationAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Get cash validation Summarizes the total cash position for each account for an org
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="balanceDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘balance date’ will return transactions based on the accounting date entered by the user.  Transactions before the balanceDate will be included.  The user has discretion as to which accounting period the transaction relates to.    The ‘balance date’  will control the latest maximum date of transactions included in the aggregate numbers.  Balance date does not affect the CurrentStatement object, as this will always return the most recent statement before asAtSystemDate (if specified) (optional)</param>
            <param name="asAtSystemDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘as at’ date will return transactions based on the  creation date.  It reflects the date the transactions were entered into Xero, not the accounting date.  The ‘as at’ date can not be overridden by the user.  This can be used to estimate a ‘historical frequency of reconciliation’.    The ‘as at’ date will affect the current statement in the response, as any candidate statements created after this date will be filtered out.  Thus the current statement returned will be the most recent statement prior to the specified ‘as at’ date.  Be aware that neither the begin date, nor the balance date, will affect the current statement.    Note;  information is only presented when system architecture allows, meaning historical cash validation information will be an estimate. In addition, delete events are not aware of the ‘as at’ functionality in this endpoint, meaning that transactions deleted at the time the API is accessed will be considered to always have been deleted. (optional)</param>
            <param name="beginDate">date, yyyy-MM-dd     If no parameter is provided, the aggregate results will be drawn from the user’s total history.    The ‘begin date’ will return transactions based on the accounting date entered by the user. Transactions after the beginDate will be included.  The user has discretion as to which accounting period the transaction relates to. (optional)</param>
            <returns>Task of ApiResponse (List&lt;CashValidationResponse&gt;)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetFinancialStatementBalanceSheetAsync(System.String,System.String,System.String)">
            <summary>
            Get Balance Sheet report The balance sheet report is a standard financial report which describes the financial position of an organisation at a point in time.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="balanceDate">Specifies the date for balance sheet report.    Format yyyy-MM-dd. If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of BalanceSheetResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetFinancialStatementBalanceSheetAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Get Balance Sheet report The balance sheet report is a standard financial report which describes the financial position of an organisation at a point in time.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="balanceDate">Specifies the date for balance sheet report.    Format yyyy-MM-dd. If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of ApiResponse (BalanceSheetResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetFinancialStatementCashflowAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Get Cash flow report The statement of cash flows - direct method, provides the year to date changes in operating, financing and investing cash flow activities for an organisation. Cashflow statement is not available in US region at this stage.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for cash flow report.    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
            <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for cash flow report.    If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of CashflowResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetFinancialStatementCashflowAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Get Cash flow report The statement of cash flows - direct method, provides the year to date changes in operating, financing and investing cash flow activities for an organisation. Cashflow statement is not available in US region at this stage.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for cash flow report.    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
            <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for cash flow report.    If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of ApiResponse (CashflowResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetFinancialStatementContactsExpenseAsync(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Get expense by contacts report The expense by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
            <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
            <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <returns>Task of IncomeByContactResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetFinancialStatementContactsExpenseAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Get expense by contacts report The expense by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
            <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
            <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <returns>Task of ApiResponse (IncomeByContactResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetFinancialStatementContactsRevenueAsync(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Get revenue by contacts report The revenue by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
            <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
            <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <returns>Task of IncomeByContactResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetFinancialStatementContactsRevenueAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Get revenue by contacts report The revenue by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
            <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
            <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
            <returns>Task of ApiResponse (IncomeByContactResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetFinancialStatementProfitAndLossAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Get Profit &amp; Loss report The profit and loss statement is a standard financial report providing detailed year to date income and expense detail for an organisation.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for profit and loss report    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
            <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for profit and loss report     If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of ProfitAndLossResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetFinancialStatementProfitAndLossAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Get Profit &amp; Loss report The profit and loss statement is a standard financial report providing detailed year to date income and expense detail for an organisation.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for profit and loss report    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
            <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for profit and loss report     If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of ApiResponse (ProfitAndLossResponse)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetFinancialStatementTrialBalanceAsync(System.String,System.String,System.String)">
            <summary>
            Get Trial Balance report The trial balance provides a detailed list of all accounts of an organisation at a point in time, with revenue and expense items being year to date.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="endDate">Date e.g. yyyy-MM-dd     Specifies the end date for trial balance report     If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of TrialBalanceResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.FinanceApi.GetFinancialStatementTrialBalanceAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Get Trial Balance report The trial balance provides a detailed list of all accounts of an organisation at a point in time, with revenue and expense items being year to date.
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="endDate">Date e.g. yyyy-MM-dd     Specifies the end date for trial balance report     If no parameter is provided, the current date will be used. (optional)</param>
            <returns>Task of ApiResponse (TrialBalanceResponse)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IIdentityApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IIdentityApiAsync.DeleteConnectionAsync(System.String,System.Guid)">
            <summary>
            Deletes a connection for this user (i.e. disconnect a tenant)
            </summary>
            <remarks>
            Override the base server url that include version
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="id">Unique identifier for retrieving single object</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IIdentityApiAsync.DeleteConnectionAsyncWithHttpInfo(System.String,System.Guid)">
            <summary>
            Deletes a connection for this user (i.e. disconnect a tenant)
            </summary>
            <remarks>
            Override the base server url that include version
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="id">Unique identifier for retrieving single object</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IIdentityApiAsync.GetConnectionsAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves the connections for this user
            </summary>
            <remarks>
            Override the base server url that include version
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="authEventId">Filter by authEventId (optional)</param>
            <returns>Task of List&lt;Connection&gt;</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IIdentityApiAsync.GetConnectionsAsyncWithHttpInfo(System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves the connections for this user
            </summary>
            <remarks>
            Override the base server url that include version
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="authEventId">Filter by authEventId (optional)</param>
            <returns>Task of ApiResponse (List&lt;Connection&gt;)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IIdentityApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IdentityApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IdentityApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.IdentityApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IdentityApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.IdentityApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IdentityApi.#ctor(Xero.DotNet.OAuth2.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.IdentityApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IdentityApi.#ctor(Xero.DotNet.OAuth2.Client.ISynchronousClient,Xero.DotNet.OAuth2.Client.IAsynchronousClient,Xero.DotNet.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AccountingApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.IdentityApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IdentityApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.IdentityApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.IdentityApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IdentityApi.DeleteConnectionAsync(System.String,System.Guid)">
            <summary>
            Deletes a connection for this user (i.e. disconnect a tenant) Override the base server url that include version
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="id">Unique identifier for retrieving single object</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IdentityApi.DeleteConnectionAsyncWithHttpInfo(System.String,System.Guid)">
            <summary>
            Deletes a connection for this user (i.e. disconnect a tenant) Override the base server url that include version
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="id">Unique identifier for retrieving single object</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IdentityApi.GetConnectionsAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves the connections for this user Override the base server url that include version
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="authEventId">Filter by authEventId (optional)</param>
            <returns>Task of List&lt;Connection&gt;</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IdentityApi.GetConnectionsAsyncWithHttpInfo(System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves the connections for this user Override the base server url that include version
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="authEventId">Filter by authEventId (optional)</param>
            <returns>Task of ApiResponse (List&lt;Connection&gt;)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreateEmployeeAsync(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Employee})">
            <summary>
            Creates a payroll employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employee"></param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreateEmployeeAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Employee})">
            <summary>
            Creates a payroll employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employee"></param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreateLeaveApplicationAsync(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.LeaveApplication})">
            <summary>
            Creates a leave application
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveApplication"></param>
            <returns>Task of LeaveApplications</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreateLeaveApplicationAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.LeaveApplication})">
            <summary>
            Creates a leave application
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveApplication"></param>
            <returns>Task of ApiResponse (LeaveApplications)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreatePayItemAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollAu.PayItem)">
            <summary>
            Creates a pay item
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payItem"></param>
            <returns>Task of PayItems</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreatePayItemAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollAu.PayItem)">
            <summary>
            Creates a pay item
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payItem"></param>
            <returns>Task of ApiResponse (PayItems)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreatePayRunAsync(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayRun})">
            <summary>
            Creates a pay run
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRun"></param>
            <returns>Task of PayRuns</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreatePayRunAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayRun})">
            <summary>
            Creates a pay run
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRun"></param>
            <returns>Task of ApiResponse (PayRuns)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreatePayrollCalendarAsync(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayrollCalendar})">
            <summary>
            Creates a Payroll Calendar
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payrollCalendar"></param>
            <returns>Task of PayrollCalendars</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreatePayrollCalendarAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayrollCalendar})">
            <summary>
            Creates a Payroll Calendar
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payrollCalendar"></param>
            <returns>Task of ApiResponse (PayrollCalendars)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreateSuperfundAsync(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.SuperFund})">
            <summary>
            Creates a superfund
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superFund"></param>
            <returns>Task of SuperFunds</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreateSuperfundAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.SuperFund})">
            <summary>
            Creates a superfund
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superFund"></param>
            <returns>Task of ApiResponse (SuperFunds)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreateTimesheetAsync(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Timesheet})">
            <summary>
            Creates a timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheet"></param>
            <returns>Task of Timesheets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.CreateTimesheetAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Timesheet})">
            <summary>
            Creates a timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheet"></param>
            <returns>Task of ApiResponse (Timesheets)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetEmployeeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves an employee&#39;s detail by unique employee id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves an employee&#39;s detail by unique employee id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetEmployeesAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Searches payroll employees
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetEmployeesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Searches payroll employees
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetLeaveApplicationAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a leave application by a unique leave application id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveApplicationID">Leave Application id for single object</param>
            <returns>Task of LeaveApplications</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetLeaveApplicationAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a leave application by a unique leave application id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveApplicationID">Leave Application id for single object</param>
            <returns>Task of ApiResponse (LeaveApplications)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetLeaveApplicationsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves leave applications
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
            <returns>Task of LeaveApplications</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetLeaveApplicationsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves leave applications
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (LeaveApplications)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetPayItemsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves pay items
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
            <returns>Task of PayItems</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetPayItemsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves pay items
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (PayItems)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetPayRunAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a pay run by using a unique pay run id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayRun id for single object</param>
            <returns>Task of PayRuns</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetPayRunAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a pay run by using a unique pay run id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayRun id for single object</param>
            <returns>Task of ApiResponse (PayRuns)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetPayRunsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves pay runs
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call (optional)</param>
            <returns>Task of PayRuns</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetPayRunsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves pay runs
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (PayRuns)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetPayrollCalendarAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves payroll calendar by using a unique payroll calendar ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payrollCalendarID">Payroll Calendar id for single object</param>
            <returns>Task of PayrollCalendars</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetPayrollCalendarAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves payroll calendar by using a unique payroll calendar ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payrollCalendarID">Payroll Calendar id for single object</param>
            <returns>Task of ApiResponse (PayrollCalendars)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetPayrollCalendarsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payroll calendars
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
            <returns>Task of PayrollCalendars</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetPayrollCalendarsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payroll calendars
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (PayrollCalendars)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetPayslipAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves for a payslip by a unique payslip id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payslipID">Payslip id for single object</param>
            <returns>Task of PayslipObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetPayslipAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves for a payslip by a unique payslip id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payslipID">Payslip id for single object</param>
            <returns>Task of ApiResponse (PayslipObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetSettingsAsync(System.String,System.String)">
            <summary>
            Retrieves payroll settings
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of SettingsObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetSettingsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves payroll settings
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (SettingsObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetSuperfundAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a superfund by using a unique superfund ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superFundID">Superfund id for single object</param>
            <returns>Task of SuperFunds</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetSuperfundAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a superfund by using a unique superfund ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superFundID">Superfund id for single object</param>
            <returns>Task of ApiResponse (SuperFunds)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetSuperfundProductsAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves superfund products
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ABN">The ABN of the Regulated SuperFund (optional)</param>
            <param name="USI">The USI of the Regulated SuperFund (optional)</param>
            <returns>Task of SuperFundProducts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetSuperfundProductsAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves superfund products
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ABN">The ABN of the Regulated SuperFund (optional)</param>
            <param name="USI">The USI of the Regulated SuperFund (optional)</param>
            <returns>Task of ApiResponse (SuperFundProducts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetSuperfundsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves superfunds
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call (optional)</param>
            <returns>Task of SuperFunds</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetSuperfundsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves superfunds
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (SuperFunds)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a timesheet by using a unique timesheet id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Timesheet id for single object</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a timesheet by using a unique timesheet id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Timesheet id for single object</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetTimesheetsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves timesheets
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)</param>
            <returns>Task of Timesheets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.GetTimesheetsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves timesheets
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (Timesheets)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.UpdateEmployeeAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Employee})">
            <summary>
            Updates an employee&#39;s detail
            </summary>
            <remarks>
            Update properties on a single employee
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employee"> (optional)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.UpdateEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Employee})">
            <summary>
            Updates an employee&#39;s detail
            </summary>
            <remarks>
            Update properties on a single employee
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employee"> (optional)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.UpdateLeaveApplicationAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.LeaveApplication})">
            <summary>
            Updates a specific leave application
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveApplicationID">Leave Application id for single object</param>
            <param name="leaveApplication"></param>
            <returns>Task of LeaveApplications</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.UpdateLeaveApplicationAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.LeaveApplication})">
            <summary>
            Updates a specific leave application
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveApplicationID">Leave Application id for single object</param>
            <param name="leaveApplication"></param>
            <returns>Task of ApiResponse (LeaveApplications)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.UpdatePayRunAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayRun})">
            <summary>
            Updates a pay run
            </summary>
            <remarks>
            Update properties on a single PayRun
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayRun id for single object</param>
            <param name="payRun"> (optional)</param>
            <returns>Task of PayRuns</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.UpdatePayRunAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayRun})">
            <summary>
            Updates a pay run
            </summary>
            <remarks>
            Update properties on a single PayRun
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayRun id for single object</param>
            <param name="payRun"> (optional)</param>
            <returns>Task of ApiResponse (PayRuns)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.UpdatePayslipAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayslipLines})">
            <summary>
            Updates a payslip
            </summary>
            <remarks>
            Update lines on a single payslips
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payslipID">Payslip id for single object</param>
            <param name="payslipLines"> (optional)</param>
            <returns>Task of Payslips</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.UpdatePayslipAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayslipLines})">
            <summary>
            Updates a payslip
            </summary>
            <remarks>
            Update lines on a single payslips
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payslipID">Payslip id for single object</param>
            <param name="payslipLines"> (optional)</param>
            <returns>Task of ApiResponse (Payslips)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.UpdateSuperfundAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.SuperFund})">
            <summary>
            Updates a superfund
            </summary>
            <remarks>
            Update properties on a single Superfund
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superFundID">Superfund id for single object</param>
            <param name="superFund"> (optional)</param>
            <returns>Task of SuperFunds</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.UpdateSuperfundAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.SuperFund})">
            <summary>
            Updates a superfund
            </summary>
            <remarks>
            Update properties on a single Superfund
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superFundID">Superfund id for single object</param>
            <param name="superFund"> (optional)</param>
            <returns>Task of ApiResponse (SuperFunds)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.UpdateTimesheetAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Timesheet})">
            <summary>
            Updates a timesheet
            </summary>
            <remarks>
            Update properties on a single timesheet
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Timesheet id for single object</param>
            <param name="timesheet"> (optional)</param>
            <returns>Task of Timesheets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollAuApiAsync.UpdateTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Timesheet})">
            <summary>
            Updates a timesheet
            </summary>
            <remarks>
            Update properties on a single timesheet
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Timesheet id for single object</param>
            <param name="timesheet"> (optional)</param>
            <returns>Task of ApiResponse (Timesheets)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IPayrollAuApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.PayrollAuApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.PayrollAuApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.PayrollAuApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.#ctor(Xero.DotNet.OAuth2.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.PayrollAuApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.#ctor(Xero.DotNet.OAuth2.Client.ISynchronousClient,Xero.DotNet.OAuth2.Client.IAsynchronousClient,Xero.DotNet.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AccountingApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.PayrollAuApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.PayrollAuApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.PayrollAuApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreateEmployeeAsync(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Employee})">
            <summary>
            Creates a payroll employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employee"></param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreateEmployeeAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Employee})">
            <summary>
            Creates a payroll employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employee"></param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreateLeaveApplicationAsync(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.LeaveApplication})">
            <summary>
            Creates a leave application 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveApplication"></param>
            <returns>Task of LeaveApplications</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreateLeaveApplicationAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.LeaveApplication})">
            <summary>
            Creates a leave application 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveApplication"></param>
            <returns>Task of ApiResponse (LeaveApplications)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreatePayItemAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollAu.PayItem)">
            <summary>
            Creates a pay item 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payItem"></param>
            <returns>Task of PayItems</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreatePayItemAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollAu.PayItem)">
            <summary>
            Creates a pay item 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payItem"></param>
            <returns>Task of ApiResponse (PayItems)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreatePayRunAsync(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayRun})">
            <summary>
            Creates a pay run 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRun"></param>
            <returns>Task of PayRuns</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreatePayRunAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayRun})">
            <summary>
            Creates a pay run 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRun"></param>
            <returns>Task of ApiResponse (PayRuns)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreatePayrollCalendarAsync(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayrollCalendar})">
            <summary>
            Creates a Payroll Calendar 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payrollCalendar"></param>
            <returns>Task of PayrollCalendars</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreatePayrollCalendarAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayrollCalendar})">
            <summary>
            Creates a Payroll Calendar 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payrollCalendar"></param>
            <returns>Task of ApiResponse (PayrollCalendars)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreateSuperfundAsync(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.SuperFund})">
            <summary>
            Creates a superfund 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superFund"></param>
            <returns>Task of SuperFunds</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreateSuperfundAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.SuperFund})">
            <summary>
            Creates a superfund 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superFund"></param>
            <returns>Task of ApiResponse (SuperFunds)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreateTimesheetAsync(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Timesheet})">
            <summary>
            Creates a timesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheet"></param>
            <returns>Task of Timesheets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.CreateTimesheetAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Timesheet})">
            <summary>
            Creates a timesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheet"></param>
            <returns>Task of ApiResponse (Timesheets)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetEmployeeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves an employee&#39;s detail by unique employee id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves an employee&#39;s detail by unique employee id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetEmployeesAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Searches payroll employees 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetEmployeesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Searches payroll employees 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetLeaveApplicationAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a leave application by a unique leave application id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveApplicationID">Leave Application id for single object</param>
            <returns>Task of LeaveApplications</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetLeaveApplicationAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a leave application by a unique leave application id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveApplicationID">Leave Application id for single object</param>
            <returns>Task of ApiResponse (LeaveApplications)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetLeaveApplicationsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves leave applications 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
            <returns>Task of LeaveApplications</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetLeaveApplicationsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves leave applications 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (LeaveApplications)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetPayItemsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves pay items 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
            <returns>Task of PayItems</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetPayItemsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves pay items 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (PayItems)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetPayRunAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a pay run by using a unique pay run id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayRun id for single object</param>
            <returns>Task of PayRuns</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetPayRunAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a pay run by using a unique pay run id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayRun id for single object</param>
            <returns>Task of ApiResponse (PayRuns)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetPayRunsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves pay runs 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call (optional)</param>
            <returns>Task of PayRuns</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetPayRunsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves pay runs 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (PayRuns)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetPayrollCalendarAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves payroll calendar by using a unique payroll calendar ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payrollCalendarID">Payroll Calendar id for single object</param>
            <returns>Task of PayrollCalendars</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetPayrollCalendarAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves payroll calendar by using a unique payroll calendar ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payrollCalendarID">Payroll Calendar id for single object</param>
            <returns>Task of ApiResponse (PayrollCalendars)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetPayrollCalendarsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payroll calendars 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
            <returns>Task of PayrollCalendars</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetPayrollCalendarsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payroll calendars 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (PayrollCalendars)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetPayslipAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves for a payslip by a unique payslip id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payslipID">Payslip id for single object</param>
            <returns>Task of PayslipObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetPayslipAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves for a payslip by a unique payslip id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payslipID">Payslip id for single object</param>
            <returns>Task of ApiResponse (PayslipObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetSettingsAsync(System.String,System.String)">
            <summary>
            Retrieves payroll settings 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of SettingsObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetSettingsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves payroll settings 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (SettingsObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetSuperfundAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a superfund by using a unique superfund ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superFundID">Superfund id for single object</param>
            <returns>Task of SuperFunds</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetSuperfundAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a superfund by using a unique superfund ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superFundID">Superfund id for single object</param>
            <returns>Task of ApiResponse (SuperFunds)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetSuperfundProductsAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves superfund products 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ABN">The ABN of the Regulated SuperFund (optional)</param>
            <param name="USI">The USI of the Regulated SuperFund (optional)</param>
            <returns>Task of SuperFundProducts</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetSuperfundProductsAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves superfund products 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ABN">The ABN of the Regulated SuperFund (optional)</param>
            <param name="USI">The USI of the Regulated SuperFund (optional)</param>
            <returns>Task of ApiResponse (SuperFundProducts)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetSuperfundsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves superfunds 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call (optional)</param>
            <returns>Task of SuperFunds</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetSuperfundsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves superfunds 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (SuperFunds)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a timesheet by using a unique timesheet id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Timesheet id for single object</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a timesheet by using a unique timesheet id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Timesheet id for single object</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetTimesheetsAsync(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves timesheets 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)</param>
            <returns>Task of Timesheets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.GetTimesheetsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves timesheets 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
            <param name="where">Filter by an any element (optional)</param>
            <param name="order">Order by an any element (optional)</param>
            <param name="page">e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)</param>
            <returns>Task of ApiResponse (Timesheets)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.UpdateEmployeeAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Employee})">
            <summary>
            Updates an employee&#39;s detail Update properties on a single employee
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employee"> (optional)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.UpdateEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Employee})">
            <summary>
            Updates an employee&#39;s detail Update properties on a single employee
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employee"> (optional)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.UpdateLeaveApplicationAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.LeaveApplication})">
            <summary>
            Updates a specific leave application 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveApplicationID">Leave Application id for single object</param>
            <param name="leaveApplication"></param>
            <returns>Task of LeaveApplications</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.UpdateLeaveApplicationAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.LeaveApplication})">
            <summary>
            Updates a specific leave application 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveApplicationID">Leave Application id for single object</param>
            <param name="leaveApplication"></param>
            <returns>Task of ApiResponse (LeaveApplications)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.UpdatePayRunAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayRun})">
            <summary>
            Updates a pay run Update properties on a single PayRun
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayRun id for single object</param>
            <param name="payRun"> (optional)</param>
            <returns>Task of PayRuns</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.UpdatePayRunAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayRun})">
            <summary>
            Updates a pay run Update properties on a single PayRun
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayRun id for single object</param>
            <param name="payRun"> (optional)</param>
            <returns>Task of ApiResponse (PayRuns)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.UpdatePayslipAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayslipLines})">
            <summary>
            Updates a payslip Update lines on a single payslips
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payslipID">Payslip id for single object</param>
            <param name="payslipLines"> (optional)</param>
            <returns>Task of Payslips</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.UpdatePayslipAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.PayslipLines})">
            <summary>
            Updates a payslip Update lines on a single payslips
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payslipID">Payslip id for single object</param>
            <param name="payslipLines"> (optional)</param>
            <returns>Task of ApiResponse (Payslips)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.UpdateSuperfundAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.SuperFund})">
            <summary>
            Updates a superfund Update properties on a single Superfund
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superFundID">Superfund id for single object</param>
            <param name="superFund"> (optional)</param>
            <returns>Task of SuperFunds</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.UpdateSuperfundAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.SuperFund})">
            <summary>
            Updates a superfund Update properties on a single Superfund
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superFundID">Superfund id for single object</param>
            <param name="superFund"> (optional)</param>
            <returns>Task of ApiResponse (SuperFunds)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.UpdateTimesheetAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Timesheet})">
            <summary>
            Updates a timesheet Update properties on a single timesheet
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Timesheet id for single object</param>
            <param name="timesheet"> (optional)</param>
            <returns>Task of Timesheets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollAuApi.UpdateTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollAu.Timesheet})">
            <summary>
            Updates a timesheet Update properties on a single timesheet
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Timesheet id for single object</param>
            <param name="timesheet"> (optional)</param>
            <returns>Task of ApiResponse (Timesheets)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.ApproveTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Approves a timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.ApproveTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Approves a timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateDeductionAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Deduction)">
            <summary>
            Creates a new deduction for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deduction"></param>
            <returns>Task of DeductionObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateDeductionAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Deduction)">
            <summary>
            Creates a new deduction for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deduction"></param>
            <returns>Task of ApiResponse (DeductionObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEarningsRateAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.EarningsRate)">
            <summary>
            Creates a new earnings rate
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRate"></param>
            <returns>Task of EarningsRateObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEarningsRateAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.EarningsRate)">
            <summary>
            Creates a new earnings rate
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRate"></param>
            <returns>Task of ApiResponse (EarningsRateObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Employee)">
            <summary>
            Creates an employees
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employee"></param>
            <returns>Task of EmployeeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Employee)">
            <summary>
            Creates an employees
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employee"></param>
            <returns>Task of ApiResponse (EmployeeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EarningsTemplate)">
            <summary>
            Creates earnings template records for an employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of EarningsTemplateObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EarningsTemplate)">
            <summary>
            Creates earnings template records for an employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeLeaveAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeave)">
            <summary>
            Creates leave records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeave)">
            <summary>
            Creates leave records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeLeaveSetupAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeaveSetup)">
            <summary>
            Creates a leave set-up for a specific employee. This is required before viewing, configuring and requesting leave for an employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeaveSetup"></param>
            <returns>Task of EmployeeLeaveSetupObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeLeaveSetupAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeaveSetup)">
            <summary>
            Creates a leave set-up for a specific employee. This is required before viewing, configuring and requesting leave for an employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeaveSetup"></param>
            <returns>Task of ApiResponse (EmployeeLeaveSetupObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeLeaveTypeAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeaveType)">
            <summary>
            Creates leave type records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeaveType"></param>
            <returns>Task of EmployeeLeaveTypeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeLeaveTypeAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeaveType)">
            <summary>
            Creates leave type records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeaveType"></param>
            <returns>Task of ApiResponse (EmployeeLeaveTypeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeOpeningBalancesAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeOpeningBalance})">
            <summary>
            Creates opening balances for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeOpeningBalance"></param>
            <returns>Task of EmployeeOpeningBalancesObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeOpeningBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeOpeningBalance})">
            <summary>
            Creates opening balances for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeOpeningBalance"></param>
            <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeePaymentMethodAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.PaymentMethod)">
            <summary>
            Creates a payment method for an employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="paymentMethod"></param>
            <returns>Task of PaymentMethodObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeePaymentMethodAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.PaymentMethod)">
            <summary>
            Creates a payment method for an employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="paymentMethod"></param>
            <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.SalaryAndWage)">
            <summary>
            Creates an employee salary and wage record
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of SalaryAndWageObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.SalaryAndWage)">
            <summary>
            Creates an employee salary and wage record
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmploymentAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.Employment)">
            <summary>
            Creates an employment detail for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employment"></param>
            <returns>Task of EmploymentObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateEmploymentAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.Employment)">
            <summary>
            Creates an employment detail for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employment"></param>
            <returns>Task of ApiResponse (EmploymentObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateLeaveTypeAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.LeaveType)">
            <summary>
            Creates a new leave type
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveType"></param>
            <returns>Task of LeaveTypeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateLeaveTypeAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.LeaveType)">
            <summary>
            Creates a new leave type
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveType"></param>
            <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateMultipleEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollNz.EarningsTemplate})">
            <summary>
            Creates multiple employee earnings template records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of EmployeeEarningsTemplates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateMultipleEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollNz.EarningsTemplate})">
            <summary>
            Creates multiple employee earnings template records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of ApiResponse (EmployeeEarningsTemplates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreatePayRunAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.PayRun)">
            <summary>
            Creates a pay run
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRun"></param>
            <returns>Task of PayRunObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreatePayRunAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.PayRun)">
            <summary>
            Creates a pay run
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRun"></param>
            <returns>Task of ApiResponse (PayRunObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreatePayRunCalendarAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.PayRunCalendar)">
            <summary>
            Creates a new payrun calendar
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunCalendar"></param>
            <returns>Task of PayRunCalendarObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreatePayRunCalendarAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.PayRunCalendar)">
            <summary>
            Creates a new payrun calendar
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunCalendar"></param>
            <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateReimbursementAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Reimbursement)">
            <summary>
            Creates a new reimbursement
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursement"></param>
            <returns>Task of ReimbursementObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateReimbursementAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Reimbursement)">
            <summary>
            Creates a new reimbursement
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursement"></param>
            <returns>Task of ApiResponse (ReimbursementObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateSuperannuationAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Benefit)">
            <summary>
            Creates a new superannuation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="benefit"></param>
            <returns>Task of SuperannuationObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateSuperannuationAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Benefit)">
            <summary>
            Creates a new superannuation
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="benefit"></param>
            <returns>Task of ApiResponse (SuperannuationObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateTimesheetAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Timesheet)">
            <summary>
            Creates a new timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheet"></param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateTimesheetAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Timesheet)">
            <summary>
            Creates a new timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheet"></param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateTimesheetLineAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.TimesheetLine)">
            <summary>
            Create a new timesheet line for a specific time sheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLine"></param>
            <returns>Task of TimesheetLineObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.CreateTimesheetLineAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.TimesheetLine)">
            <summary>
            Create a new timesheet line for a specific time sheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLine"></param>
            <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.DeleteEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes an employee&#39;s earnings template record
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <returns>Task of EarningsTemplateObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.DeleteEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes an employee&#39;s earnings template record
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.DeleteEmployeeLeaveAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a leave record for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.DeleteEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a leave record for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.DeleteEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes an employee&#39;s salary and wages record
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single salary and wages object</param>
            <returns>Task of SalaryAndWageObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.DeleteEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes an employee&#39;s salary and wages record
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single salary and wages object</param>
            <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.DeleteTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetLine</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.DeleteTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetLine)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.DeleteTimesheetLineAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a timesheet line for a specific timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <returns>Task of TimesheetLine</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.DeleteTimesheetLineAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a timesheet line for a specific timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <returns>Task of ApiResponse (TimesheetLine)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetDeductionAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a single deduction by using a unique deduction ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deductionId">Identifier for the deduction</param>
            <returns>Task of DeductionObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetDeductionAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a single deduction by using a unique deduction ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deductionId">Identifier for the deduction</param>
            <returns>Task of ApiResponse (DeductionObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetDeductionsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves deductions for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Deductions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetDeductionsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves deductions for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Deductions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEarningsRateAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific earnings rates by using a unique earnings rate id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRateID">Identifier for the earnings rate</param>
            <returns>Task of EarningsRateObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEarningsRateAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific earnings rates by using a unique earnings rate id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRateID">Identifier for the earnings rate</param>
            <returns>Task of ApiResponse (EarningsRateObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEarningsRatesAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves earnings rates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of EarningsRates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEarningsRatesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves earnings rates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (EarningsRates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves an employees using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves an employees using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeLeaveBalancesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves leave balances for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeLeaveBalances</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeLeaveBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves leave balances for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveBalances)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeLeavePeriodsAsync(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves leave periods for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="startDate">Filter by start date (optional)</param>
            <param name="endDate">Filter by end date (optional)</param>
            <returns>Task of LeavePeriods</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeLeavePeriodsAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves leave periods for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="startDate">Filter by start date (optional)</param>
            <param name="endDate">Filter by end date (optional)</param>
            <returns>Task of ApiResponse (LeavePeriods)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeLeaveTypesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves leave types for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeLeaveTypes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeLeaveTypesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves leave types for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveTypes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeLeavesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves leave records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeLeaves</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeLeavesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves leave records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaves)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeOpeningBalancesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the opening balance for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeOpeningBalancesObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeOpeningBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the opening balance for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeePayTemplatesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves pay templates for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeePayTemplates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeePayTemplatesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves pay templates for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeePayTemplates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeePaymentMethodAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves available payment methods for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of PaymentMethodObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeePaymentMethodAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves available payment methods for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves an employee&#39;s salary and wages record by using a unique salary and wage ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <returns>Task of SalaryAndWages</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves an employee&#39;s salary and wages record by using a unique salary and wage ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <returns>Task of ApiResponse (SalaryAndWages)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeSalaryAndWagesAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves an employee&#39;s salary and wages
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of SalaryAndWages</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeSalaryAndWagesAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves an employee&#39;s salary and wages
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (SalaryAndWages)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeTaxAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves tax records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeTaxObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeeTaxAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves tax records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeesAsync(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves employees
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="filter">Filter by first name and/or lastname (optional)</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetEmployeesAsyncWithHttpInfo(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves employees
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="filter">Filter by first name and/or lastname (optional)</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetLeaveTypeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific leave type by using a unique leave type ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveTypeID">Identifier for the leave type</param>
            <returns>Task of LeaveTypeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetLeaveTypeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific leave type by using a unique leave type ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveTypeID">Identifier for the leave type</param>
            <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetLeaveTypesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves leave types
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
            <returns>Task of LeaveTypes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetLeaveTypesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves leave types
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
            <returns>Task of ApiResponse (LeaveTypes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetPayRunAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific pay run by using a unique pay run ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <returns>Task of PayRunObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetPayRunAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific pay run by using a unique pay run ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <returns>Task of ApiResponse (PayRunObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetPayRunCalendarAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payrun calendar by using a unique payroll calendar ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payrollCalendarID">Identifier for the payrun calendars</param>
            <returns>Task of PayRunCalendarObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetPayRunCalendarAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payrun calendar by using a unique payroll calendar ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payrollCalendarID">Identifier for the payrun calendars</param>
            <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetPayRunCalendarsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payrun calendars
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of PayRunCalendars</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetPayRunCalendarsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payrun calendars
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (PayRunCalendars)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetPayRunsAsync(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves pay runs
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
            <returns>Task of PayRuns</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetPayRunsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves pay runs
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
            <returns>Task of ApiResponse (PayRuns)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetPaySlipAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payslip by a unique pay slip ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paySlipID">Identifier for the payslip</param>
            <returns>Task of PaySlipObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetPaySlipAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payslip by a unique pay slip ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paySlipID">Identifier for the payslip</param>
            <returns>Task of ApiResponse (PaySlipObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetPaySlipsAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves payslips
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of PaySlips</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetPaySlipsAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves payslips
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (PaySlips)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetReimbursementAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific reimbursement by using a unique reimbursement ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursementID">Identifier for the reimbursement</param>
            <returns>Task of ReimbursementObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetReimbursementAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific reimbursement by using a unique reimbursement ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursementID">Identifier for the reimbursement</param>
            <returns>Task of ApiResponse (ReimbursementObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetReimbursementsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves reimbursements
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Reimbursements</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetReimbursementsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves reimbursements
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Reimbursements)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetSettingsAsync(System.String,System.String)">
            <summary>
            Retrieves settings
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of Settings</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetSettingsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves settings
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (Settings)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetStatutoryDeductionAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific statutory deduction by using a unique statutory deductions id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Identifier for the statutory deduction</param>
            <returns>Task of StatutoryDeductionObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetStatutoryDeductionAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific statutory deduction by using a unique statutory deductions id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Identifier for the statutory deduction</param>
            <returns>Task of ApiResponse (StatutoryDeductionObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetStatutoryDeductionsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves statutory deductions
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of StatutoryDeductions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetStatutoryDeductionsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves statutory deductions
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (StatutoryDeductions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetSuperannuationAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific superannuation using a unique superannuation ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superannuationID">Identifier for the superannuation</param>
            <returns>Task of SuperannuationObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetSuperannuationAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific superannuation using a unique superannuation ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superannuationID">Identifier for the superannuation</param>
            <returns>Task of ApiResponse (SuperannuationObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetSuperannuationsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves superannuations
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Superannuations</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetSuperannuationsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves superannuations
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Superannuations)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific timesheet by using a unique timesheet ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific timesheet by using a unique timesheet ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetTimesheetsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves timesheets
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="filter">Filter by employeeId and/or payrollCalendarId (optional)</param>
            <param name="status">filter results by any timesheets with a matching timesheet status (optional)</param>
            <param name="startDate">filter results by any timesheets with a startDate on or after the provided date (optional)</param>
            <param name="endDate">filter results by any timesheets with a endDate on or before the provided date (optional)</param>
            <param name="sort">sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest. (optional)</param>
            <returns>Task of Timesheets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetTimesheetsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves timesheets
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="filter">Filter by employeeId and/or payrollCalendarId (optional)</param>
            <param name="status">filter results by any timesheets with a matching timesheet status (optional)</param>
            <param name="startDate">filter results by any timesheets with a startDate on or after the provided date (optional)</param>
            <param name="endDate">filter results by any timesheets with a endDate on or before the provided date (optional)</param>
            <param name="sort">sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest. (optional)</param>
            <returns>Task of ApiResponse (Timesheets)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetTrackingCategoriesAsync(System.String,System.String)">
            <summary>
            Retrieves tracking categories
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.GetTrackingCategoriesAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves tracking categories
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.RevertTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Reverts a timesheet to draft
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.RevertTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Reverts a timesheet to draft
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdateEmployeeAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.Employee)">
            <summary>
            Updates an existing employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employee"></param>
            <returns>Task of EmployeeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdateEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.Employee)">
            <summary>
            Updates an existing employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employee"></param>
            <returns>Task of ApiResponse (EmployeeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdateEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EarningsTemplate)">
            <summary>
            Updates an earnings template records for an employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of EarningsTemplateObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdateEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EarningsTemplate)">
            <summary>
            Updates an earnings template records for an employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdateEmployeeLeaveAsync(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeave)">
            <summary>
            Updates leave records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdateEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeave)">
            <summary>
            Updates leave records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdateEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.SalaryAndWage)">
            <summary>
            Updates an employee&#39;s salary and wages record
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of SalaryAndWageObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdateEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.SalaryAndWage)">
            <summary>
            Updates an employee&#39;s salary and wages record
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdateEmployeeTaxAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeTax)">
            <summary>
            Updates the tax records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeTax"></param>
            <returns>Task of EmployeeTaxObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdateEmployeeTaxAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeTax)">
            <summary>
            Updates the tax records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeTax"></param>
            <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdatePayRunAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.PayRun)">
            <summary>
            Updates a pay run
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <param name="payRun"></param>
            <returns>Task of PayRunObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdatePayRunAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.PayRun)">
            <summary>
            Updates a pay run
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <param name="payRun"></param>
            <returns>Task of ApiResponse (PayRunObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdatePaySlipLineItemsAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.PaySlip)">
            <summary>
            Creates an employee pay slip
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paySlipID">Identifier for the payslip</param>
            <param name="paySlip"></param>
            <returns>Task of PaySlipObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdatePaySlipLineItemsAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.PaySlip)">
            <summary>
            Creates an employee pay slip
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paySlipID">Identifier for the payslip</param>
            <param name="paySlip"></param>
            <returns>Task of ApiResponse (PaySlipObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdateTimesheetLineAsync(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.TimesheetLine)">
            <summary>
            Updates a timesheet line for a specific timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <param name="timesheetLine"></param>
            <returns>Task of TimesheetLineObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollNzApiAsync.UpdateTimesheetLineAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.TimesheetLine)">
            <summary>
            Updates a timesheet line for a specific timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <param name="timesheetLine"></param>
            <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IPayrollNzApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.PayrollNzApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.PayrollNzApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.PayrollNzApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.#ctor(Xero.DotNet.OAuth2.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.PayrollNzApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.#ctor(Xero.DotNet.OAuth2.Client.ISynchronousClient,Xero.DotNet.OAuth2.Client.IAsynchronousClient,Xero.DotNet.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.DotNet.OAuth2.Api.AccountingApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.PayrollNzApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.PayrollNzApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Xero.DotNet.OAuth2.Api.PayrollNzApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.ApproveTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Approves a timesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.ApproveTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Approves a timesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateDeductionAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Deduction)">
            <summary>
            Creates a new deduction for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deduction"></param>
            <returns>Task of DeductionObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateDeductionAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Deduction)">
            <summary>
            Creates a new deduction for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deduction"></param>
            <returns>Task of ApiResponse (DeductionObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEarningsRateAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.EarningsRate)">
            <summary>
            Creates a new earnings rate 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRate"></param>
            <returns>Task of EarningsRateObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEarningsRateAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.EarningsRate)">
            <summary>
            Creates a new earnings rate 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRate"></param>
            <returns>Task of ApiResponse (EarningsRateObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Employee)">
            <summary>
            Creates an employees 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employee"></param>
            <returns>Task of EmployeeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Employee)">
            <summary>
            Creates an employees 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employee"></param>
            <returns>Task of ApiResponse (EmployeeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EarningsTemplate)">
            <summary>
            Creates earnings template records for an employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of EarningsTemplateObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EarningsTemplate)">
            <summary>
            Creates earnings template records for an employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeLeaveAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeave)">
            <summary>
            Creates leave records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeave)">
            <summary>
            Creates leave records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeLeaveSetupAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeaveSetup)">
            <summary>
            Creates a leave set-up for a specific employee. This is required before viewing, configuring and requesting leave for an employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeaveSetup"></param>
            <returns>Task of EmployeeLeaveSetupObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeLeaveSetupAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeaveSetup)">
            <summary>
            Creates a leave set-up for a specific employee. This is required before viewing, configuring and requesting leave for an employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeaveSetup"></param>
            <returns>Task of ApiResponse (EmployeeLeaveSetupObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeLeaveTypeAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeaveType)">
            <summary>
            Creates leave type records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeaveType"></param>
            <returns>Task of EmployeeLeaveTypeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeLeaveTypeAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeaveType)">
            <summary>
            Creates leave type records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeaveType"></param>
            <returns>Task of ApiResponse (EmployeeLeaveTypeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeOpeningBalancesAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeOpeningBalance})">
            <summary>
            Creates opening balances for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeOpeningBalance"></param>
            <returns>Task of EmployeeOpeningBalancesObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeOpeningBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeOpeningBalance})">
            <summary>
            Creates opening balances for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeOpeningBalance"></param>
            <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeePaymentMethodAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.PaymentMethod)">
            <summary>
            Creates a payment method for an employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="paymentMethod"></param>
            <returns>Task of PaymentMethodObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeePaymentMethodAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.PaymentMethod)">
            <summary>
            Creates a payment method for an employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="paymentMethod"></param>
            <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.SalaryAndWage)">
            <summary>
            Creates an employee salary and wage record 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of SalaryAndWageObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.SalaryAndWage)">
            <summary>
            Creates an employee salary and wage record 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmploymentAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.Employment)">
            <summary>
            Creates an employment detail for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employment"></param>
            <returns>Task of EmploymentObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateEmploymentAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.Employment)">
            <summary>
            Creates an employment detail for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employment"></param>
            <returns>Task of ApiResponse (EmploymentObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateLeaveTypeAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.LeaveType)">
            <summary>
            Creates a new leave type 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveType"></param>
            <returns>Task of LeaveTypeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateLeaveTypeAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.LeaveType)">
            <summary>
            Creates a new leave type 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveType"></param>
            <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateMultipleEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollNz.EarningsTemplate})">
            <summary>
            Creates multiple employee earnings template records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of EmployeeEarningsTemplates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateMultipleEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollNz.EarningsTemplate})">
            <summary>
            Creates multiple employee earnings template records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of ApiResponse (EmployeeEarningsTemplates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreatePayRunAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.PayRun)">
            <summary>
            Creates a pay run 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRun"></param>
            <returns>Task of PayRunObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreatePayRunAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.PayRun)">
            <summary>
            Creates a pay run 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRun"></param>
            <returns>Task of ApiResponse (PayRunObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreatePayRunCalendarAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.PayRunCalendar)">
            <summary>
            Creates a new payrun calendar 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunCalendar"></param>
            <returns>Task of PayRunCalendarObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreatePayRunCalendarAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.PayRunCalendar)">
            <summary>
            Creates a new payrun calendar 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunCalendar"></param>
            <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateReimbursementAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Reimbursement)">
            <summary>
            Creates a new reimbursement 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursement"></param>
            <returns>Task of ReimbursementObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateReimbursementAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Reimbursement)">
            <summary>
            Creates a new reimbursement 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursement"></param>
            <returns>Task of ApiResponse (ReimbursementObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateSuperannuationAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Benefit)">
            <summary>
            Creates a new superannuation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="benefit"></param>
            <returns>Task of SuperannuationObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateSuperannuationAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Benefit)">
            <summary>
            Creates a new superannuation 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="benefit"></param>
            <returns>Task of ApiResponse (SuperannuationObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateTimesheetAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Timesheet)">
            <summary>
            Creates a new timesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheet"></param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateTimesheetAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollNz.Timesheet)">
            <summary>
            Creates a new timesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheet"></param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateTimesheetLineAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.TimesheetLine)">
            <summary>
            Create a new timesheet line for a specific time sheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLine"></param>
            <returns>Task of TimesheetLineObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.CreateTimesheetLineAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.TimesheetLine)">
            <summary>
            Create a new timesheet line for a specific time sheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLine"></param>
            <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.DeleteEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes an employee&#39;s earnings template record 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <returns>Task of EarningsTemplateObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.DeleteEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes an employee&#39;s earnings template record 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.DeleteEmployeeLeaveAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a leave record for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.DeleteEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a leave record for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.DeleteEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes an employee&#39;s salary and wages record 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single salary and wages object</param>
            <returns>Task of SalaryAndWageObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.DeleteEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes an employee&#39;s salary and wages record 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single salary and wages object</param>
            <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.DeleteTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a timesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetLine</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.DeleteTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a timesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetLine)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.DeleteTimesheetLineAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a timesheet line for a specific timesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <returns>Task of TimesheetLine</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.DeleteTimesheetLineAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a timesheet line for a specific timesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <returns>Task of ApiResponse (TimesheetLine)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetDeductionAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a single deduction by using a unique deduction ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deductionId">Identifier for the deduction</param>
            <returns>Task of DeductionObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetDeductionAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a single deduction by using a unique deduction ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deductionId">Identifier for the deduction</param>
            <returns>Task of ApiResponse (DeductionObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetDeductionsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves deductions for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Deductions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetDeductionsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves deductions for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Deductions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEarningsRateAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific earnings rates by using a unique earnings rate id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRateID">Identifier for the earnings rate</param>
            <returns>Task of EarningsRateObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEarningsRateAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific earnings rates by using a unique earnings rate id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRateID">Identifier for the earnings rate</param>
            <returns>Task of ApiResponse (EarningsRateObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEarningsRatesAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves earnings rates 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of EarningsRates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEarningsRatesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves earnings rates 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (EarningsRates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves an employees using a unique employee ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves an employees using a unique employee ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeLeaveBalancesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves leave balances for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeLeaveBalances</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeLeaveBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves leave balances for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveBalances)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeLeavePeriodsAsync(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves leave periods for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="startDate">Filter by start date (optional)</param>
            <param name="endDate">Filter by end date (optional)</param>
            <returns>Task of LeavePeriods</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeLeavePeriodsAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves leave periods for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="startDate">Filter by start date (optional)</param>
            <param name="endDate">Filter by end date (optional)</param>
            <returns>Task of ApiResponse (LeavePeriods)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeLeaveTypesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves leave types for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeLeaveTypes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeLeaveTypesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves leave types for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveTypes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeLeavesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves leave records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeLeaves</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeLeavesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves leave records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaves)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeOpeningBalancesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the opening balance for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeOpeningBalancesObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeOpeningBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves the opening balance for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeePayTemplatesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves pay templates for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeePayTemplates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeePayTemplatesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves pay templates for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeePayTemplates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeePaymentMethodAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves available payment methods for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of PaymentMethodObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeePaymentMethodAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves available payment methods for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves an employee&#39;s salary and wages record by using a unique salary and wage ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <returns>Task of SalaryAndWages</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves an employee&#39;s salary and wages record by using a unique salary and wage ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <returns>Task of ApiResponse (SalaryAndWages)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeSalaryAndWagesAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves an employee&#39;s salary and wages 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of SalaryAndWages</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeSalaryAndWagesAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves an employee&#39;s salary and wages 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (SalaryAndWages)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeTaxAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves tax records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeTaxObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeeTaxAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves tax records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeesAsync(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves employees 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="filter">Filter by first name and/or lastname (optional)</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetEmployeesAsyncWithHttpInfo(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves employees 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="filter">Filter by first name and/or lastname (optional)</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetLeaveTypeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific leave type by using a unique leave type ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveTypeID">Identifier for the leave type</param>
            <returns>Task of LeaveTypeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetLeaveTypeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific leave type by using a unique leave type ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveTypeID">Identifier for the leave type</param>
            <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetLeaveTypesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves leave types 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
            <returns>Task of LeaveTypes</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetLeaveTypesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves leave types 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
            <returns>Task of ApiResponse (LeaveTypes)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetPayRunAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific pay run by using a unique pay run ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <returns>Task of PayRunObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetPayRunAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific pay run by using a unique pay run ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <returns>Task of ApiResponse (PayRunObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetPayRunCalendarAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payrun calendar by using a unique payroll calendar ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payrollCalendarID">Identifier for the payrun calendars</param>
            <returns>Task of PayRunCalendarObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetPayRunCalendarAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payrun calendar by using a unique payroll calendar ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payrollCalendarID">Identifier for the payrun calendars</param>
            <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetPayRunCalendarsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payrun calendars 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of PayRunCalendars</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetPayRunCalendarsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payrun calendars 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (PayRunCalendars)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetPayRunsAsync(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves pay runs 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
            <returns>Task of PayRuns</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetPayRunsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves pay runs 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
            <returns>Task of ApiResponse (PayRuns)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetPaySlipAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payslip by a unique pay slip ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paySlipID">Identifier for the payslip</param>
            <returns>Task of PaySlipObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetPaySlipAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payslip by a unique pay slip ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paySlipID">Identifier for the payslip</param>
            <returns>Task of ApiResponse (PaySlipObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetPaySlipsAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves payslips 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of PaySlips</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetPaySlipsAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves payslips 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (PaySlips)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetReimbursementAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific reimbursement by using a unique reimbursement ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursementID">Identifier for the reimbursement</param>
            <returns>Task of ReimbursementObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetReimbursementAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific reimbursement by using a unique reimbursement ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursementID">Identifier for the reimbursement</param>
            <returns>Task of ApiResponse (ReimbursementObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetReimbursementsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves reimbursements 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Reimbursements</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetReimbursementsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves reimbursements 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Reimbursements)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetSettingsAsync(System.String,System.String)">
            <summary>
            Retrieves settings 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of Settings</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetSettingsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves settings 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (Settings)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetStatutoryDeductionAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific statutory deduction by using a unique statutory deductions id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Identifier for the statutory deduction</param>
            <returns>Task of StatutoryDeductionObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetStatutoryDeductionAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific statutory deduction by using a unique statutory deductions id 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Identifier for the statutory deduction</param>
            <returns>Task of ApiResponse (StatutoryDeductionObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetStatutoryDeductionsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves statutory deductions 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of StatutoryDeductions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetStatutoryDeductionsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves statutory deductions 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (StatutoryDeductions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetSuperannuationAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific superannuation using a unique superannuation ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superannuationID">Identifier for the superannuation</param>
            <returns>Task of SuperannuationObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetSuperannuationAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific superannuation using a unique superannuation ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="superannuationID">Identifier for the superannuation</param>
            <returns>Task of ApiResponse (SuperannuationObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetSuperannuationsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves superannuations 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Superannuations</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetSuperannuationsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves superannuations 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Superannuations)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific timesheet by using a unique timesheet ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific timesheet by using a unique timesheet ID 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetTimesheetsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves timesheets 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="filter">Filter by employeeId and/or payrollCalendarId (optional)</param>
            <param name="status">filter results by any timesheets with a matching timesheet status (optional)</param>
            <param name="startDate">filter results by any timesheets with a startDate on or after the provided date (optional)</param>
            <param name="endDate">filter results by any timesheets with a endDate on or before the provided date (optional)</param>
            <param name="sort">sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest. (optional)</param>
            <returns>Task of Timesheets</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetTimesheetsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves timesheets 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="filter">Filter by employeeId and/or payrollCalendarId (optional)</param>
            <param name="status">filter results by any timesheets with a matching timesheet status (optional)</param>
            <param name="startDate">filter results by any timesheets with a startDate on or after the provided date (optional)</param>
            <param name="endDate">filter results by any timesheets with a endDate on or before the provided date (optional)</param>
            <param name="sort">sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest. (optional)</param>
            <returns>Task of ApiResponse (Timesheets)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetTrackingCategoriesAsync(System.String,System.String)">
            <summary>
            Retrieves tracking categories 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.GetTrackingCategoriesAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves tracking categories 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.RevertTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Reverts a timesheet to draft 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.RevertTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Reverts a timesheet to draft 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdateEmployeeAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.Employee)">
            <summary>
            Updates an existing employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employee"></param>
            <returns>Task of EmployeeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdateEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.Employee)">
            <summary>
            Updates an existing employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employee"></param>
            <returns>Task of ApiResponse (EmployeeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdateEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EarningsTemplate)">
            <summary>
            Updates an earnings template records for an employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of EarningsTemplateObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdateEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EarningsTemplate)">
            <summary>
            Updates an earnings template records for an employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdateEmployeeLeaveAsync(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeave)">
            <summary>
            Updates leave records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdateEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeLeave)">
            <summary>
            Updates leave records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdateEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.SalaryAndWage)">
            <summary>
            Updates an employee&#39;s salary and wages record 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of SalaryAndWageObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdateEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.SalaryAndWage)">
            <summary>
            Updates an employee&#39;s salary and wages record 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdateEmployeeTaxAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeTax)">
            <summary>
            Updates the tax records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeTax"></param>
            <returns>Task of EmployeeTaxObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdateEmployeeTaxAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.EmployeeTax)">
            <summary>
            Updates the tax records for a specific employee 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeTax"></param>
            <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdatePayRunAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.PayRun)">
            <summary>
            Updates a pay run 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <param name="payRun"></param>
            <returns>Task of PayRunObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdatePayRunAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.PayRun)">
            <summary>
            Updates a pay run 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <param name="payRun"></param>
            <returns>Task of ApiResponse (PayRunObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdatePaySlipLineItemsAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.PaySlip)">
            <summary>
            Creates an employee pay slip 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paySlipID">Identifier for the payslip</param>
            <param name="paySlip"></param>
            <returns>Task of PaySlipObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdatePaySlipLineItemsAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.PaySlip)">
            <summary>
            Creates an employee pay slip 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="paySlipID">Identifier for the payslip</param>
            <param name="paySlip"></param>
            <returns>Task of ApiResponse (PaySlipObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdateTimesheetLineAsync(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.TimesheetLine)">
            <summary>
            Updates a timesheet line for a specific timesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <param name="timesheetLine"></param>
            <returns>Task of TimesheetLineObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.PayrollNzApi.UpdateTimesheetLineAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.DotNet.OAuth2.Model.PayrollNz.TimesheetLine)">
            <summary>
            Updates a timesheet line for a specific timesheet 
            </summary>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <param name="timesheetLine"></param>
            <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        </member>
        <member name="T:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.ApproveTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Approves a specific timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.ApproveTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Approves a specific timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateBenefitAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.Benefit)">
            <summary>
            Creates a new employee benefit
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="benefit"></param>
            <returns>Task of BenefitObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateBenefitAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.Benefit)">
            <summary>
            Creates a new employee benefit
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="benefit"></param>
            <returns>Task of ApiResponse (BenefitObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateDeductionAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.Deduction)">
            <summary>
            Creates a new deduction
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deduction"></param>
            <returns>Task of DeductionObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateDeductionAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.Deduction)">
            <summary>
            Creates a new deduction
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deduction"></param>
            <returns>Task of ApiResponse (DeductionObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEarningsRateAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.EarningsRate)">
            <summary>
            Creates a new earnings rate
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRate"></param>
            <returns>Task of EarningsRateObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEarningsRateAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.EarningsRate)">
            <summary>
            Creates a new earnings rate
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRate"></param>
            <returns>Task of ApiResponse (EarningsRateObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.Employee)">
            <summary>
            Creates employees
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employee"></param>
            <returns>Task of EmployeeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.Employee)">
            <summary>
            Creates employees
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employee"></param>
            <returns>Task of ApiResponse (EmployeeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.EarningsTemplate)">
            <summary>
            Creates an earnings template records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of EarningsTemplateObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.EarningsTemplate)">
            <summary>
            Creates an earnings template records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeLeaveAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.EmployeeLeave)">
            <summary>
            Creates leave records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.EmployeeLeave)">
            <summary>
            Creates leave records for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeLeaveTypeAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.EmployeeLeaveType)">
            <summary>
            Creates employee leave type records
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeaveType"></param>
            <returns>Task of EmployeeLeaveTypeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeLeaveTypeAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.EmployeeLeaveType)">
            <summary>
            Creates employee leave type records
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeaveType"></param>
            <returns>Task of ApiResponse (EmployeeLeaveTypeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeOpeningBalancesAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.EmployeeOpeningBalances)">
            <summary>
            Creates an opening balance for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeOpeningBalances"></param>
            <returns>Task of EmployeeOpeningBalancesObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeOpeningBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.EmployeeOpeningBalances)">
            <summary>
            Creates an opening balance for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeOpeningBalances"></param>
            <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeePaymentMethodAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.PaymentMethod)">
            <summary>
            Creates an employee payment method
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="paymentMethod"></param>
            <returns>Task of PaymentMethodObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeePaymentMethodAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.PaymentMethod)">
            <summary>
            Creates an employee payment method
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="paymentMethod"></param>
            <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.SalaryAndWage)">
            <summary>
            Creates a salary and wage record for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of SalaryAndWageObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.SalaryAndWage)">
            <summary>
            Creates a salary and wage record for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeStatutorySickLeaveAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave)">
            <summary>
            Creates statutory sick leave records
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeStatutorySickLeave"></param>
            <returns>Task of EmployeeStatutorySickLeaveObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmployeeStatutorySickLeaveAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave)">
            <summary>
            Creates statutory sick leave records
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeStatutorySickLeave"></param>
            <returns>Task of ApiResponse (EmployeeStatutorySickLeaveObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmploymentAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.Employment)">
            <summary>
            Creates employment detail for a specific employee using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employment"></param>
            <returns>Task of EmploymentObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateEmploymentAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.Employment)">
            <summary>
            Creates employment detail for a specific employee using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employment"></param>
            <returns>Task of ApiResponse (EmploymentObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateLeaveTypeAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.LeaveType)">
            <summary>
            Creates a new leave type
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveType"></param>
            <returns>Task of LeaveTypeObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateLeaveTypeAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.LeaveType)">
            <summary>
            Creates a new leave type
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveType"></param>
            <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateMultipleEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollUk.EarningsTemplate})">
            <summary>
            Creates multiple earnings template records for a specific employee using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of EmployeePayTemplates</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateMultipleEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.DotNet.OAuth2.Model.PayrollUk.EarningsTemplate})">
            <summary>
            Creates multiple earnings template records for a specific employee using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of ApiResponse (EmployeePayTemplates)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreatePayRunCalendarAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.PayRunCalendar)">
            <summary>
            Creates a new payrun calendar
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunCalendar"></param>
            <returns>Task of PayRunCalendarObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreatePayRunCalendarAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.PayRunCalendar)">
            <summary>
            Creates a new payrun calendar
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunCalendar"></param>
            <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateReimbursementAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.Reimbursement)">
            <summary>
            Creates a new reimbursement
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursement"></param>
            <returns>Task of ReimbursementObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateReimbursementAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.Reimbursement)">
            <summary>
            Creates a new reimbursement
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursement"></param>
            <returns>Task of ApiResponse (ReimbursementObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateTimesheetAsync(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.Timesheet)">
            <summary>
            Creates a new timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheet"></param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateTimesheetAsyncWithHttpInfo(System.String,System.String,Xero.DotNet.OAuth2.Model.PayrollUk.Timesheet)">
            <summary>
            Creates a new timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheet"></param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateTimesheetLineAsync(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.TimesheetLine)">
            <summary>
            Creates a new timesheet line for a specific timesheet using a unique timesheet ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLine"></param>
            <returns>Task of TimesheetLineObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.CreateTimesheetLineAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.DotNet.OAuth2.Model.PayrollUk.TimesheetLine)">
            <summary>
            Creates a new timesheet line for a specific timesheet using a unique timesheet ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLine"></param>
            <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.DeleteEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific employee&#39;s earnings template record
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.DeleteEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific employee&#39;s earnings template record
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.DeleteEmployeeLeaveAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific employee&#39;s leave record
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.DeleteEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific employee&#39;s leave record
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.DeleteEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a salary and wages record for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single salary and wages object</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.DeleteEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a salary and wages record for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single salary and wages object</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.DeleteTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetLine</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.DeleteTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetLine)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.DeleteTimesheetLineAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific timesheet line
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <returns>Task of TimesheetLine</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.DeleteTimesheetLineAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific timesheet line
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <returns>Task of ApiResponse (TimesheetLine)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetBenefitAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific benefit by using a unique benefit ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Identifier for the benefit</param>
            <returns>Task of BenefitObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetBenefitAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific benefit by using a unique benefit ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Identifier for the benefit</param>
            <returns>Task of ApiResponse (BenefitObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetBenefitsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves employee benefits
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Benefits</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetBenefitsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves employee benefits
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Benefits)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetDeductionAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific deduction by using a unique deduction ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deductionId">Identifier for the deduction</param>
            <returns>Task of DeductionObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetDeductionAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific deduction by using a unique deduction ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deductionId">Identifier for the deduction</param>
            <returns>Task of ApiResponse (DeductionObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetDeductionsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves deductions
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Deductions</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetDeductionsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves deductions
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Deductions)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetEarningsOrderAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific earnings orders by using a unique earnings orders id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Identifier for the deduction</param>
            <returns>Task of EarningsOrderObject</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetEarningsOrderAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific earnings orders by using a unique earnings orders id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Identifier for the deduction</param>
            <returns>Task of ApiResponse (EarningsOrderObject)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetEarningsOrdersAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves earnings orders
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of EarningsOrders</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetEarningsOrdersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves earnings orders
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (EarningsOrders)</returns>
        </member>
        <member name="M:Xero.DotNet.OAuth2.Api.IPayrollUkApiAsync.GetEarningsRateAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific earnings rates by using a unique earnings rate id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.DotNet.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRateID">Identifier for the earnings rate</param>
            <returns>Task of EarningsRateObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEarningsRateAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific earnings rates by using a unique earnings rate id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRateID">Identifier for the earnings rate</param>
            <returns>Task of ApiResponse (EarningsRateObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEarningsRatesAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves earnings rates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of EarningsRates</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEarningsRatesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves earnings rates
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (EarningsRates)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific employees by using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific employees by using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeLeaveAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave record using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave record using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeLeaveBalancesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave balances using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeLeaveBalances</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeLeaveBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave balances using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveBalances)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeLeavePeriodsAsync(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves a specific employee&#39;s leave periods using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="startDate">Filter by start date (optional)</param>
            <param name="endDate">Filter by end date (optional)</param>
            <returns>Task of LeavePeriods</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeLeavePeriodsAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves a specific employee&#39;s leave periods using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="startDate">Filter by start date (optional)</param>
            <param name="endDate">Filter by end date (optional)</param>
            <returns>Task of ApiResponse (LeavePeriods)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeLeaveTypesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave types using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeLeaveTypes</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeLeaveTypesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave types using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveTypes)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeLeavesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave records using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeLeaves</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeLeavesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave records using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaves)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeOpeningBalancesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s openingbalances using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeOpeningBalancesObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeOpeningBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s openingbalances using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeePayTemplateAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee pay templates using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeePayTemplateObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeePayTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee pay templates using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeePayTemplateObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeePaymentMethodAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s payment method using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of PaymentMethodObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeePaymentMethodAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s payment method using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a specific salary and wages record for a specific employee using a unique salary and wage id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <returns>Task of SalaryAndWages</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a specific salary and wages record for a specific employee using a unique salary and wage id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <returns>Task of ApiResponse (SalaryAndWages)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeSalaryAndWagesAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific employee&#39;s salary and wages by using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of SalaryAndWages</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeSalaryAndWagesAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific employee&#39;s salary and wages by using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (SalaryAndWages)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeStatutoryLeaveBalancesAsync(System.String,System.String,System.Guid,System.String,System.Nullable{System.DateTime})">
            <summary>
            Retrieves a specific employee&#39;s leave balances using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveType">Filter by the type of statutory leave (optional)</param>
            <param name="asOfDate">The date from which to calculate balance remaining. If not specified, current date UTC is used. (optional)</param>
            <returns>Task of EmployeeStatutoryLeaveBalanceObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeStatutoryLeaveBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Nullable{System.DateTime})">
            <summary>
            Retrieves a specific employee&#39;s leave balances using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveType">Filter by the type of statutory leave (optional)</param>
            <param name="asOfDate">The date from which to calculate balance remaining. If not specified, current date UTC is used. (optional)</param>
            <returns>Task of ApiResponse (EmployeeStatutoryLeaveBalanceObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeStatutorySickLeaveAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a statutory sick leave for an employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="statutorySickLeaveID">Statutory sick leave id for single object</param>
            <returns>Task of EmployeeStatutorySickLeaveObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeStatutorySickLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a statutory sick leave for an employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="statutorySickLeaveID">Statutory sick leave id for single object</param>
            <returns>Task of ApiResponse (EmployeeStatutorySickLeaveObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeTaxAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves tax records for a specific employee using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeTaxObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeeTaxAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves tax records for a specific employee using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeesAsync(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves employees
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="filter">Filter by first name, lastname, and/or whether they are an off-payroll worker (optional)</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetEmployeesAsyncWithHttpInfo(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves employees
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="filter">Filter by first name, lastname, and/or whether they are an off-payroll worker (optional)</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetLeaveTypeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific leave type by using a unique leave type ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveTypeID">Identifier for the leave type</param>
            <returns>Task of LeaveTypeObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetLeaveTypeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific leave type by using a unique leave type ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveTypeID">Identifier for the leave type</param>
            <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetLeaveTypesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves leave types
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
            <returns>Task of LeaveTypes</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetLeaveTypesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves leave types
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
            <returns>Task of ApiResponse (LeaveTypes)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetPayRunAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific pay run by using a unique pay run ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <returns>Task of PayRunObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetPayRunAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific pay run by using a unique pay run ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <returns>Task of ApiResponse (PayRunObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetPayRunCalendarAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payrun calendar by using a unique payrun calendar ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunCalendarID">Identifier for the payrun calendars</param>
            <returns>Task of PayRunCalendarObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetPayRunCalendarAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payrun calendar by using a unique payrun calendar ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunCalendarID">Identifier for the payrun calendars</param>
            <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetPayRunCalendarsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payrun calendars
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of PayRunCalendars</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetPayRunCalendarsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payrun calendars
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (PayRunCalendars)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetPayRunsAsync(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves pay runs
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
            <returns>Task of PayRuns</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetPayRunsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves pay runs
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
            <returns>Task of ApiResponse (PayRuns)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetPaySlipAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payslip by using a unique payslip ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payslipID">Identifier for the payslip</param>
            <returns>Task of PayslipObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetPaySlipAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payslip by using a unique payslip ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payslipID">Identifier for the payslip</param>
            <returns>Task of ApiResponse (PayslipObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetPaySlipsAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves payslips
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Payslips</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetPaySlipsAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves payslips
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Payslips)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetReimbursementAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific reimbursement by using a unique reimbursement id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursementID">Identifier for the reimbursement</param>
            <returns>Task of ReimbursementObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetReimbursementAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific reimbursement by using a unique reimbursement id
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursementID">Identifier for the reimbursement</param>
            <returns>Task of ApiResponse (ReimbursementObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetReimbursementsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves reimbursements
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Reimbursements</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetReimbursementsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves reimbursements
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Reimbursements)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetSettingsAsync(System.String,System.String)">
            <summary>
            Retrieves payroll settings
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of Settings</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetSettingsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves payroll settings
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (Settings)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetStatutoryLeaveSummaryAsync(System.String,System.String,System.Guid,System.Nullable{System.Boolean})">
            <summary>
            Retrieves a specific employee&#39;s summary of statutory leaves using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="activeOnly">Filter response with leaves that are currently active or yet to be taken. If not specified, all leaves (past, current, and future scheduled) are returned (optional)</param>
            <returns>Task of EmployeeStatutoryLeavesSummaries</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetStatutoryLeaveSummaryAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Boolean})">
            <summary>
            Retrieves a specific employee&#39;s summary of statutory leaves using a unique employee ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="activeOnly">Filter response with leaves that are currently active or yet to be taken. If not specified, all leaves (past, current, and future scheduled) are returned (optional)</param>
            <returns>Task of ApiResponse (EmployeeStatutoryLeavesSummaries)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieve a specific timesheet by using a unique timesheet ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieve a specific timesheet by using a unique timesheet ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetTimesheetsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves timesheets
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="filter">Filter by employeeId and/or payrollCalendarId (optional)</param>
            <param name="status">filter results by any timesheets with a matching timesheet status (optional)</param>
            <param name="startDate">filter results by any timesheets with a startDate on or after the provided date (optional)</param>
            <param name="endDate">filter results by any timesheets with a endDate on or before the provided date (optional)</param>
            <param name="sort">sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest. (optional)</param>
            <returns>Task of Timesheets</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetTimesheetsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves timesheets
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="filter">Filter by employeeId and/or payrollCalendarId (optional)</param>
            <param name="status">filter results by any timesheets with a matching timesheet status (optional)</param>
            <param name="startDate">filter results by any timesheets with a startDate on or after the provided date (optional)</param>
            <param name="endDate">filter results by any timesheets with a endDate on or before the provided date (optional)</param>
            <param name="sort">sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest. (optional)</param>
            <returns>Task of ApiResponse (Timesheets)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetTrackingCategoriesAsync(System.String,System.String)">
            <summary>
            Retrieves tracking categories
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.GetTrackingCategoriesAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves tracking categories
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.RevertTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Reverts a specific timesheet to draft
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.RevertTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Reverts a specific timesheet to draft
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdateEmployeeAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.Employee)">
            <summary>
            Updates a specific employee&#39;s detail
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employee"></param>
            <returns>Task of EmployeeObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdateEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.Employee)">
            <summary>
            Updates a specific employee&#39;s detail
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employee"></param>
            <returns>Task of ApiResponse (EmployeeObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdateEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate)">
            <summary>
            Updates a specific employee&#39;s earnings template records
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of EarningsTemplateObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdateEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate)">
            <summary>
            Updates a specific employee&#39;s earnings template records
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdateEmployeeLeaveAsync(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave)">
            <summary>
            Updates a specific employee&#39;s leave records
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdateEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave)">
            <summary>
            Updates a specific employee&#39;s leave records
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdateEmployeeOpeningBalancesAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances)">
            <summary>
            Updates a specific employee&#39;s opening balances
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeOpeningBalances"></param>
            <returns>Task of EmployeeOpeningBalancesObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdateEmployeeOpeningBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances)">
            <summary>
            Updates a specific employee&#39;s opening balances
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeOpeningBalances"></param>
            <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdateEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage)">
            <summary>
            Updates salary and wages record for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of SalaryAndWageObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdateEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage)">
            <summary>
            Updates salary and wages record for a specific employee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdatePayRunAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun)">
            <summary>
            Updates a specific pay run
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <param name="payRun"></param>
            <returns>Task of PayRunObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdatePayRunAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun)">
            <summary>
            Updates a specific pay run
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <param name="payRun"></param>
            <returns>Task of ApiResponse (PayRunObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdateTimesheetLineAsync(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine)">
            <summary>
            Updates a specific timesheet line for a specific timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <param name="timesheetLine"></param>
            <returns>Task of TimesheetLineObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IPayrollUkApiAsync.UpdateTimesheetLineAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine)">
            <summary>
            Updates a specific timesheet line for a specific timesheet
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <param name="timesheetLine"></param>
            <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Api.IPayrollUkApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Api.PayrollUkApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Api.PayrollUkApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Api.PayrollUkApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.#ctor(Xero.NetStandard.OAuth2.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Api.PayrollUkApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.#ctor(Xero.NetStandard.OAuth2.Client.ISynchronousClient,Xero.NetStandard.OAuth2.Client.IAsynchronousClient,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Api.AccountingApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Api.PayrollUkApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Api.PayrollUkApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Api.PayrollUkApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.ApproveTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Approves a specific timesheet 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.ApproveTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Approves a specific timesheet 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateBenefitAsync(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit)">
            <summary>
            Creates a new employee benefit 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="benefit"></param>
            <returns>Task of BenefitObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateBenefitAsyncWithHttpInfo(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit)">
            <summary>
            Creates a new employee benefit 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="benefit"></param>
            <returns>Task of ApiResponse (BenefitObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateDeductionAsync(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction)">
            <summary>
            Creates a new deduction 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deduction"></param>
            <returns>Task of DeductionObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateDeductionAsyncWithHttpInfo(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction)">
            <summary>
            Creates a new deduction 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deduction"></param>
            <returns>Task of ApiResponse (DeductionObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEarningsRateAsync(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate)">
            <summary>
            Creates a new earnings rate 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRate"></param>
            <returns>Task of EarningsRateObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEarningsRateAsyncWithHttpInfo(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate)">
            <summary>
            Creates a new earnings rate 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRate"></param>
            <returns>Task of ApiResponse (EarningsRateObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeAsync(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.Employee)">
            <summary>
            Creates employees 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employee"></param>
            <returns>Task of EmployeeObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeAsyncWithHttpInfo(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.Employee)">
            <summary>
            Creates employees 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employee"></param>
            <returns>Task of ApiResponse (EmployeeObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate)">
            <summary>
            Creates an earnings template records for a specific employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of EarningsTemplateObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate)">
            <summary>
            Creates an earnings template records for a specific employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeLeaveAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave)">
            <summary>
            Creates leave records for a specific employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave)">
            <summary>
            Creates leave records for a specific employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeLeaveTypeAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType)">
            <summary>
            Creates employee leave type records 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeaveType"></param>
            <returns>Task of EmployeeLeaveTypeObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeLeaveTypeAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType)">
            <summary>
            Creates employee leave type records 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeLeaveType"></param>
            <returns>Task of ApiResponse (EmployeeLeaveTypeObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeOpeningBalancesAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances)">
            <summary>
            Creates an opening balance for a specific employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeOpeningBalances"></param>
            <returns>Task of EmployeeOpeningBalancesObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeOpeningBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances)">
            <summary>
            Creates an opening balance for a specific employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeOpeningBalances"></param>
            <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeePaymentMethodAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod)">
            <summary>
            Creates an employee payment method 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="paymentMethod"></param>
            <returns>Task of PaymentMethodObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeePaymentMethodAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod)">
            <summary>
            Creates an employee payment method 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="paymentMethod"></param>
            <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage)">
            <summary>
            Creates a salary and wage record for a specific employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of SalaryAndWageObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage)">
            <summary>
            Creates a salary and wage record for a specific employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeStatutorySickLeaveAsync(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave)">
            <summary>
            Creates statutory sick leave records 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeStatutorySickLeave"></param>
            <returns>Task of EmployeeStatutorySickLeaveObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmployeeStatutorySickLeaveAsyncWithHttpInfo(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave)">
            <summary>
            Creates statutory sick leave records 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeStatutorySickLeave"></param>
            <returns>Task of ApiResponse (EmployeeStatutorySickLeaveObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmploymentAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.Employment)">
            <summary>
            Creates employment detail for a specific employee using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employment"></param>
            <returns>Task of EmploymentObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateEmploymentAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.Employment)">
            <summary>
            Creates employment detail for a specific employee using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employment"></param>
            <returns>Task of ApiResponse (EmploymentObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateLeaveTypeAsync(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType)">
            <summary>
            Creates a new leave type 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveType"></param>
            <returns>Task of LeaveTypeObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateLeaveTypeAsyncWithHttpInfo(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType)">
            <summary>
            Creates a new leave type 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveType"></param>
            <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateMultipleEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate})">
            <summary>
            Creates multiple earnings template records for a specific employee using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of EmployeePayTemplates</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateMultipleEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Collections.Generic.List{Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate})">
            <summary>
            Creates multiple earnings template records for a specific employee using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of ApiResponse (EmployeePayTemplates)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreatePayRunCalendarAsync(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar)">
            <summary>
            Creates a new payrun calendar 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunCalendar"></param>
            <returns>Task of PayRunCalendarObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreatePayRunCalendarAsyncWithHttpInfo(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar)">
            <summary>
            Creates a new payrun calendar 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunCalendar"></param>
            <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateReimbursementAsync(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement)">
            <summary>
            Creates a new reimbursement 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursement"></param>
            <returns>Task of ReimbursementObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateReimbursementAsyncWithHttpInfo(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement)">
            <summary>
            Creates a new reimbursement 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursement"></param>
            <returns>Task of ApiResponse (ReimbursementObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateTimesheetAsync(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet)">
            <summary>
            Creates a new timesheet 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheet"></param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateTimesheetAsyncWithHttpInfo(System.String,System.String,Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet)">
            <summary>
            Creates a new timesheet 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheet"></param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateTimesheetLineAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine)">
            <summary>
            Creates a new timesheet line for a specific timesheet using a unique timesheet ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLine"></param>
            <returns>Task of TimesheetLineObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.CreateTimesheetLineAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine)">
            <summary>
            Creates a new timesheet line for a specific timesheet using a unique timesheet ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLine"></param>
            <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.DeleteEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific employee&#39;s earnings template record 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.DeleteEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific employee&#39;s earnings template record 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.DeleteEmployeeLeaveAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific employee&#39;s leave record 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.DeleteEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific employee&#39;s leave record 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.DeleteEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a salary and wages record for a specific employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single salary and wages object</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.DeleteEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a salary and wages record for a specific employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single salary and wages object</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.DeleteTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific timesheet 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetLine</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.DeleteTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Deletes a specific timesheet 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetLine)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.DeleteTimesheetLineAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific timesheet line 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <returns>Task of TimesheetLine</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.DeleteTimesheetLineAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a specific timesheet line 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <returns>Task of ApiResponse (TimesheetLine)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetBenefitAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific benefit by using a unique benefit ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Identifier for the benefit</param>
            <returns>Task of BenefitObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetBenefitAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific benefit by using a unique benefit ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Identifier for the benefit</param>
            <returns>Task of ApiResponse (BenefitObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetBenefitsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves employee benefits 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Benefits</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetBenefitsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves employee benefits 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Benefits)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetDeductionAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific deduction by using a unique deduction ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deductionId">Identifier for the deduction</param>
            <returns>Task of DeductionObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetDeductionAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific deduction by using a unique deduction ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="deductionId">Identifier for the deduction</param>
            <returns>Task of ApiResponse (DeductionObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetDeductionsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves deductions 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Deductions</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetDeductionsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves deductions 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Deductions)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEarningsOrderAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific earnings orders by using a unique earnings orders id 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Identifier for the deduction</param>
            <returns>Task of EarningsOrderObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEarningsOrderAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific earnings orders by using a unique earnings orders id 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="id">Identifier for the deduction</param>
            <returns>Task of ApiResponse (EarningsOrderObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEarningsOrdersAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves earnings orders 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of EarningsOrders</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEarningsOrdersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves earnings orders 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (EarningsOrders)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEarningsRateAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific earnings rates by using a unique earnings rate id 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRateID">Identifier for the earnings rate</param>
            <returns>Task of EarningsRateObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEarningsRateAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific earnings rates by using a unique earnings rate id 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="earningsRateID">Identifier for the earnings rate</param>
            <returns>Task of ApiResponse (EarningsRateObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEarningsRatesAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves earnings rates 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of EarningsRates</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEarningsRatesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves earnings rates 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (EarningsRates)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific employees by using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves specific employees by using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeLeaveAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave record using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave record using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeLeaveBalancesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave balances using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeLeaveBalances</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeLeaveBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave balances using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveBalances)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeLeavePeriodsAsync(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves a specific employee&#39;s leave periods using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="startDate">Filter by start date (optional)</param>
            <param name="endDate">Filter by end date (optional)</param>
            <returns>Task of LeavePeriods</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeLeavePeriodsAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves a specific employee&#39;s leave periods using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="startDate">Filter by start date (optional)</param>
            <param name="endDate">Filter by end date (optional)</param>
            <returns>Task of ApiResponse (LeavePeriods)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeLeaveTypesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave types using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeLeaveTypes</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeLeaveTypesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave types using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaveTypes)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeLeavesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave records using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeLeaves</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeLeavesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s leave records using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeLeaves)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeOpeningBalancesAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s openingbalances using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeOpeningBalancesObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeOpeningBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s openingbalances using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeePayTemplateAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee pay templates using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeePayTemplateObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeePayTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee pay templates using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeePayTemplateObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeePaymentMethodAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s payment method using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of PaymentMethodObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeePaymentMethodAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific employee&#39;s payment method using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a specific salary and wages record for a specific employee using a unique salary and wage id 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <returns>Task of SalaryAndWages</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a specific salary and wages record for a specific employee using a unique salary and wage id 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <returns>Task of ApiResponse (SalaryAndWages)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeSalaryAndWagesAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific employee&#39;s salary and wages by using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of SalaryAndWages</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeSalaryAndWagesAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves a specific employee&#39;s salary and wages by using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (SalaryAndWages)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeStatutoryLeaveBalancesAsync(System.String,System.String,System.Guid,System.String,System.Nullable{System.DateTime})">
            <summary>
            Retrieves a specific employee&#39;s leave balances using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveType">Filter by the type of statutory leave (optional)</param>
            <param name="asOfDate">The date from which to calculate balance remaining. If not specified, current date UTC is used. (optional)</param>
            <returns>Task of EmployeeStatutoryLeaveBalanceObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeStatutoryLeaveBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid,System.String,System.Nullable{System.DateTime})">
            <summary>
            Retrieves a specific employee&#39;s leave balances using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveType">Filter by the type of statutory leave (optional)</param>
            <param name="asOfDate">The date from which to calculate balance remaining. If not specified, current date UTC is used. (optional)</param>
            <returns>Task of ApiResponse (EmployeeStatutoryLeaveBalanceObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeStatutorySickLeaveAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a statutory sick leave for an employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="statutorySickLeaveID">Statutory sick leave id for single object</param>
            <returns>Task of EmployeeStatutorySickLeaveObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeStatutorySickLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a statutory sick leave for an employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="statutorySickLeaveID">Statutory sick leave id for single object</param>
            <returns>Task of ApiResponse (EmployeeStatutorySickLeaveObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeTaxAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves tax records for a specific employee using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of EmployeeTaxObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeeTaxAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves tax records for a specific employee using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeesAsync(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves employees 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="filter">Filter by first name, lastname, and/or whether they are an off-payroll worker (optional)</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Employees</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetEmployeesAsyncWithHttpInfo(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves employees 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="filter">Filter by first name, lastname, and/or whether they are an off-payroll worker (optional)</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Employees)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetLeaveTypeAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific leave type by using a unique leave type ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveTypeID">Identifier for the leave type</param>
            <returns>Task of LeaveTypeObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetLeaveTypeAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific leave type by using a unique leave type ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="leaveTypeID">Identifier for the leave type</param>
            <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetLeaveTypesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves leave types 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
            <returns>Task of LeaveTypes</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetLeaveTypesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Retrieves leave types 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
            <returns>Task of ApiResponse (LeaveTypes)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetPayRunAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific pay run by using a unique pay run ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <returns>Task of PayRunObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetPayRunAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific pay run by using a unique pay run ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <returns>Task of ApiResponse (PayRunObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetPayRunCalendarAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payrun calendar by using a unique payrun calendar ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunCalendarID">Identifier for the payrun calendars</param>
            <returns>Task of PayRunCalendarObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetPayRunCalendarAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payrun calendar by using a unique payrun calendar ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunCalendarID">Identifier for the payrun calendars</param>
            <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetPayRunCalendarsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payrun calendars 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of PayRunCalendars</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetPayRunCalendarsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves payrun calendars 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (PayRunCalendars)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetPayRunsAsync(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves pay runs 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
            <returns>Task of PayRuns</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetPayRunsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves pay runs 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
            <returns>Task of ApiResponse (PayRuns)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetPaySlipAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payslip by using a unique payslip ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payslipID">Identifier for the payslip</param>
            <returns>Task of PayslipObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetPaySlipAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific payslip by using a unique payslip ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payslipID">Identifier for the payslip</param>
            <returns>Task of ApiResponse (PayslipObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetPaySlipsAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves payslips 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Payslips</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetPaySlipsAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves payslips 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Payslips)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetReimbursementAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific reimbursement by using a unique reimbursement id 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursementID">Identifier for the reimbursement</param>
            <returns>Task of ReimbursementObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetReimbursementAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a specific reimbursement by using a unique reimbursement id 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="reimbursementID">Identifier for the reimbursement</param>
            <returns>Task of ApiResponse (ReimbursementObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetReimbursementsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves reimbursements 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of Reimbursements</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetReimbursementsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves reimbursements 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <returns>Task of ApiResponse (Reimbursements)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetSettingsAsync(System.String,System.String)">
            <summary>
            Retrieves payroll settings 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of Settings</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetSettingsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves payroll settings 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (Settings)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetStatutoryLeaveSummaryAsync(System.String,System.String,System.Guid,System.Nullable{System.Boolean})">
            <summary>
            Retrieves a specific employee&#39;s summary of statutory leaves using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="activeOnly">Filter response with leaves that are currently active or yet to be taken. If not specified, all leaves (past, current, and future scheduled) are returned (optional)</param>
            <returns>Task of EmployeeStatutoryLeavesSummaries</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetStatutoryLeaveSummaryAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Boolean})">
            <summary>
            Retrieves a specific employee&#39;s summary of statutory leaves using a unique employee ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="activeOnly">Filter response with leaves that are currently active or yet to be taken. If not specified, all leaves (past, current, and future scheduled) are returned (optional)</param>
            <returns>Task of ApiResponse (EmployeeStatutoryLeavesSummaries)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieve a specific timesheet by using a unique timesheet ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieve a specific timesheet by using a unique timesheet ID 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetTimesheetsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves timesheets 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="filter">Filter by employeeId and/or payrollCalendarId (optional)</param>
            <param name="status">filter results by any timesheets with a matching timesheet status (optional)</param>
            <param name="startDate">filter results by any timesheets with a startDate on or after the provided date (optional)</param>
            <param name="endDate">filter results by any timesheets with a endDate on or before the provided date (optional)</param>
            <param name="sort">sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest. (optional)</param>
            <returns>Task of Timesheets</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetTimesheetsAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves timesheets 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
            <param name="filter">Filter by employeeId and/or payrollCalendarId (optional)</param>
            <param name="status">filter results by any timesheets with a matching timesheet status (optional)</param>
            <param name="startDate">filter results by any timesheets with a startDate on or after the provided date (optional)</param>
            <param name="endDate">filter results by any timesheets with a endDate on or before the provided date (optional)</param>
            <param name="sort">sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest. (optional)</param>
            <returns>Task of ApiResponse (Timesheets)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetTrackingCategoriesAsync(System.String,System.String)">
            <summary>
            Retrieves tracking categories 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of TrackingCategories</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.GetTrackingCategoriesAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            Retrieves tracking categories 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <returns>Task of ApiResponse (TrackingCategories)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.RevertTimesheetAsync(System.String,System.String,System.Guid)">
            <summary>
            Reverts a specific timesheet to draft 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of TimesheetObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.RevertTimesheetAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Reverts a specific timesheet to draft 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <returns>Task of ApiResponse (TimesheetObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdateEmployeeAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.Employee)">
            <summary>
            Updates a specific employee&#39;s detail 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employee"></param>
            <returns>Task of EmployeeObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdateEmployeeAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.Employee)">
            <summary>
            Updates a specific employee&#39;s detail 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employee"></param>
            <returns>Task of ApiResponse (EmployeeObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdateEmployeeEarningsTemplateAsync(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate)">
            <summary>
            Updates a specific employee&#39;s earnings template records 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of EarningsTemplateObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdateEmployeeEarningsTemplateAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate)">
            <summary>
            Updates a specific employee&#39;s earnings template records 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="payTemplateEarningID">Id for single pay template earnings object</param>
            <param name="earningsTemplate"></param>
            <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdateEmployeeLeaveAsync(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave)">
            <summary>
            Updates a specific employee&#39;s leave records 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of EmployeeLeaveObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdateEmployeeLeaveAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave)">
            <summary>
            Updates a specific employee&#39;s leave records 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="leaveID">Leave id for single object</param>
            <param name="employeeLeave"></param>
            <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdateEmployeeOpeningBalancesAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances)">
            <summary>
            Updates a specific employee&#39;s opening balances 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeOpeningBalances"></param>
            <returns>Task of EmployeeOpeningBalancesObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdateEmployeeOpeningBalancesAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances)">
            <summary>
            Updates a specific employee&#39;s opening balances 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="employeeOpeningBalances"></param>
            <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdateEmployeeSalaryAndWageAsync(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage)">
            <summary>
            Updates salary and wages record for a specific employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of SalaryAndWageObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdateEmployeeSalaryAndWageAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage)">
            <summary>
            Updates salary and wages record for a specific employee 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="employeeID">Employee id for single object</param>
            <param name="salaryAndWagesID">Id for single pay template earnings object</param>
            <param name="salaryAndWage"></param>
            <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdatePayRunAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun)">
            <summary>
            Updates a specific pay run 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <param name="payRun"></param>
            <returns>Task of PayRunObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdatePayRunAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun)">
            <summary>
            Updates a specific pay run 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="payRunID">Identifier for the pay run</param>
            <param name="payRun"></param>
            <returns>Task of ApiResponse (PayRunObject)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdateTimesheetLineAsync(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine)">
            <summary>
            Updates a specific timesheet line for a specific timesheet 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <param name="timesheetLine"></param>
            <returns>Task of TimesheetLineObject</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.PayrollUkApi.UpdateTimesheetLineAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine)">
            <summary>
            Updates a specific timesheet line for a specific timesheet 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="timesheetID">Identifier for the timesheet</param>
            <param name="timesheetLineID">Identifier for the timesheet line</param>
            <param name="timesheetLine"></param>
            <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Api.IProjectApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.CreateProjectAsync(System.String,System.String,Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate)">
            <summary>
            Create one or more new projects
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectCreateOrUpdate">Create a new project with ProjectCreateOrUpdate object</param>
            <returns>Task of Project</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.CreateProjectAsyncWithHttpInfo(System.String,System.String,Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate)">
            <summary>
            Create one or more new projects
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectCreateOrUpdate">Create a new project with ProjectCreateOrUpdate object</param>
            <returns>Task of ApiResponse (Project)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.CreateTaskAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate)">
            <summary>
            Allows you to create a task
            </summary>
            <remarks>
            Allows you to create a specific task
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can create a task on a specified projectId</param>
            <param name="taskCreateOrUpdate">The task object you are creating</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.CreateTaskAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate)">
            <summary>
            Allows you to create a task
            </summary>
            <remarks>
            Allows you to create a specific task
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can create a task on a specified projectId</param>
            <param name="taskCreateOrUpdate">The task object you are creating</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.CreateTimeEntryAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate)">
            <summary>
            Creates a time entry for a specific project
            </summary>
            <remarks>
            Allows you to create a specific task
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryCreateOrUpdate">The time entry object you are creating</param>
            <returns>Task of TimeEntry</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.CreateTimeEntryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate)">
            <summary>
            Creates a time entry for a specific project
            </summary>
            <remarks>
            Allows you to create a specific task
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryCreateOrUpdate">The time entry object you are creating</param>
            <returns>Task of ApiResponse (TimeEntry)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.DeleteTaskAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Allows you to delete a task
            </summary>
            <remarks>
            Allows you to delete a specific task
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.DeleteTaskAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Allows you to delete a task
            </summary>
            <remarks>
            Allows you to delete a specific task
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.DeleteTimeEntryAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a time entry for a specific project
            </summary>
            <remarks>
            Allows you to delete a specific time entry
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryId">You can specify an individual task by appending the id to the endpoint</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.DeleteTimeEntryAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a time entry for a specific project
            </summary>
            <remarks>
            Allows you to delete a specific time entry
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryId">You can specify an individual task by appending the id to the endpoint</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetProjectAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a single project
            </summary>
            <remarks>
            Allows you to retrieve a specific project using the projectId
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <returns>Task of Project</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetProjectAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a single project
            </summary>
            <remarks>
            Allows you to retrieve a specific project using the projectId
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <returns>Task of ApiResponse (Project)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetProjectUsersAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves a list of all project users
            </summary>
            <remarks>
            Allows you to retrieve the users on a projects.
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
            <returns>Task of ProjectUsers</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetProjectUsersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves a list of all project users
            </summary>
            <remarks>
            Allows you to retrieve the users on a projects.
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
            <returns>Task of ApiResponse (ProjectUsers)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetProjectsAsync(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Guid},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves all projects
            </summary>
            <remarks>
            Allows you to retrieve, create and update projects.
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectIds">Search for all projects that match a comma separated list of projectIds (optional)</param>
            <param name="contactID">Filter for projects for a specific contact (optional)</param>
            <param name="states">Filter for projects in a particular state (INPROGRESS or CLOSED) (optional)</param>
            <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
            <returns>Task of Projects</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetProjectsAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Guid},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves all projects
            </summary>
            <remarks>
            Allows you to retrieve, create and update projects.
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectIds">Search for all projects that match a comma separated list of projectIds (optional)</param>
            <param name="contactID">Filter for projects for a specific contact (optional)</param>
            <param name="states">Filter for projects in a particular state (INPROGRESS or CLOSED) (optional)</param>
            <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
            <returns>Task of ApiResponse (Projects)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetTaskAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a single project task
            </summary>
            <remarks>
            Allows you to retrieve a specific project
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="taskId">You can specify an individual task by appending the taskId to the endpoint, i.e. GET https://.../tasks/{taskID}</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetTaskAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a single project task
            </summary>
            <remarks>
            Allows you to retrieve a specific project
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="taskId">You can specify an individual task by appending the taskId to the endpoint, i.e. GET https://.../tasks/{taskID}</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetTasksAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{Xero.NetStandard.OAuth2.Model.Project.ChargeType})">
            <summary>
            Retrieves all project tasks
            </summary>
            <remarks>
            Allows you to retrieve a specific project
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
            <param name="taskIds">taskIdsSearch for all tasks that match a comma separated list of taskIds, i.e. GET https://.../tasks?taskIds&#x3D;{taskID},{taskID} (optional)</param>
            <param name="chargeType"> (optional)</param>
            <returns>Task of Tasks</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetTasksAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{Xero.NetStandard.OAuth2.Model.Project.ChargeType})">
            <summary>
            Retrieves all project tasks
            </summary>
            <remarks>
            Allows you to retrieve a specific project
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
            <param name="taskIds">taskIdsSearch for all tasks that match a comma separated list of taskIds, i.e. GET https://.../tasks?taskIds&#x3D;{taskID},{taskID} (optional)</param>
            <param name="chargeType"> (optional)</param>
            <returns>Task of ApiResponse (Tasks)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetTimeEntriesAsync(System.String,System.String,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves all time entries associated with a specific project
            </summary>
            <remarks>
            Allows you to retrieve the time entries associated with a specific project
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">Identifier of the project, that the task (which the time entry is logged against) belongs to.</param>
            <param name="userId">The xero user identifier of the person who logged time. (optional)</param>
            <param name="taskId">Identifier of the task that time entry is logged against. (optional)</param>
            <param name="invoiceId">Finds all time entries for this invoice. (optional)</param>
            <param name="contactId">Finds all time entries for this contact identifier. (optional)</param>
            <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
            <param name="states">Comma-separated list of states to find. Will find all time entries that are in the status of whatever is specified. (optional)</param>
            <param name="isChargeable">Finds all time entries which relate to tasks with the charge type &#x60;TIME&#x60; or &#x60;FIXED&#x60;. (optional)</param>
            <param name="dateAfterUtc">ISO 8601 UTC date. Finds all time entries on or after this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
            <param name="dateBeforeUtc">ISO 8601 UTC date. Finds all time entries on or before this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
            <returns>Task of TimeEntries</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetTimeEntriesAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves all time entries associated with a specific project
            </summary>
            <remarks>
            Allows you to retrieve the time entries associated with a specific project
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">Identifier of the project, that the task (which the time entry is logged against) belongs to.</param>
            <param name="userId">The xero user identifier of the person who logged time. (optional)</param>
            <param name="taskId">Identifier of the task that time entry is logged against. (optional)</param>
            <param name="invoiceId">Finds all time entries for this invoice. (optional)</param>
            <param name="contactId">Finds all time entries for this contact identifier. (optional)</param>
            <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
            <param name="states">Comma-separated list of states to find. Will find all time entries that are in the status of whatever is specified. (optional)</param>
            <param name="isChargeable">Finds all time entries which relate to tasks with the charge type &#x60;TIME&#x60; or &#x60;FIXED&#x60;. (optional)</param>
            <param name="dateAfterUtc">ISO 8601 UTC date. Finds all time entries on or after this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
            <param name="dateBeforeUtc">ISO 8601 UTC date. Finds all time entries on or before this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
            <returns>Task of ApiResponse (TimeEntries)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetTimeEntryAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a single time entry for a specific project
            </summary>
            <remarks>
            Allows you to get a single time entry in a project
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
            <returns>Task of TimeEntry</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.GetTimeEntryAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a single time entry for a specific project
            </summary>
            <remarks>
            Allows you to get a single time entry in a project
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
            <returns>Task of ApiResponse (TimeEntry)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.PatchProjectAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.ProjectPatch)">
            <summary>
            creates a project for the specified contact
            </summary>
            <remarks>
            Allows you to update a specific projects.
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="projectPatch">Update the status of an existing Project</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.PatchProjectAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.ProjectPatch)">
            <summary>
            creates a project for the specified contact
            </summary>
            <remarks>
            Allows you to update a specific projects.
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="projectPatch">Update the status of an existing Project</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.UpdateProjectAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate)">
            <summary>
            Updates a specific project
            </summary>
            <remarks>
            Allows you to update a specific projects.
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="projectCreateOrUpdate">Request of type ProjectCreateOrUpdate</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.UpdateProjectAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate)">
            <summary>
            Updates a specific project
            </summary>
            <remarks>
            Allows you to update a specific projects.
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="projectCreateOrUpdate">Request of type ProjectCreateOrUpdate</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.UpdateTaskAsync(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate)">
            <summary>
            Allows you to update a task
            </summary>
            <remarks>
            Allows you to update a specific task
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
            <param name="taskCreateOrUpdate">The task object you are updating</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.UpdateTaskAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate)">
            <summary>
            Allows you to update a task
            </summary>
            <remarks>
            Allows you to update a specific task
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
            <param name="taskCreateOrUpdate">The task object you are updating</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.UpdateTimeEntryAsync(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate)">
            <summary>
            Updates a time entry for a specific project
            </summary>
            <remarks>
            Allows you to update time entry in a project
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
            <param name="timeEntryCreateOrUpdate">The time entry object you are updating</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.IProjectApiAsync.UpdateTimeEntryAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate)">
            <summary>
            Updates a time entry for a specific project
            </summary>
            <remarks>
            Allows you to update time entry in a project
            </remarks>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
            <param name="timeEntryCreateOrUpdate">The time entry object you are updating</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Api.IProjectApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Api.ProjectApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Api.ProjectApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Api.ProjectApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.#ctor(Xero.NetStandard.OAuth2.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Api.ProjectApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.#ctor(Xero.NetStandard.OAuth2.Client.ISynchronousClient,Xero.NetStandard.OAuth2.Client.IAsynchronousClient,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Api.AccountingApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Api.ProjectApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Api.ProjectApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Api.ProjectApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.CreateProjectAsync(System.String,System.String,Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate)">
            <summary>
            Create one or more new projects 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectCreateOrUpdate">Create a new project with ProjectCreateOrUpdate object</param>
            <returns>Task of Project</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.CreateProjectAsyncWithHttpInfo(System.String,System.String,Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate)">
            <summary>
            Create one or more new projects 
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectCreateOrUpdate">Create a new project with ProjectCreateOrUpdate object</param>
            <returns>Task of ApiResponse (Project)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.CreateTaskAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate)">
            <summary>
            Allows you to create a task Allows you to create a specific task
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can create a task on a specified projectId</param>
            <param name="taskCreateOrUpdate">The task object you are creating</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.CreateTaskAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate)">
            <summary>
            Allows you to create a task Allows you to create a specific task
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can create a task on a specified projectId</param>
            <param name="taskCreateOrUpdate">The task object you are creating</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.CreateTimeEntryAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate)">
            <summary>
            Creates a time entry for a specific project Allows you to create a specific task
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryCreateOrUpdate">The time entry object you are creating</param>
            <returns>Task of TimeEntry</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.CreateTimeEntryAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate)">
            <summary>
            Creates a time entry for a specific project Allows you to create a specific task
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryCreateOrUpdate">The time entry object you are creating</param>
            <returns>Task of ApiResponse (TimeEntry)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.DeleteTaskAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Allows you to delete a task Allows you to delete a specific task
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.DeleteTaskAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Allows you to delete a task Allows you to delete a specific task
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.DeleteTimeEntryAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a time entry for a specific project Allows you to delete a specific time entry
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryId">You can specify an individual task by appending the id to the endpoint</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.DeleteTimeEntryAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Deletes a time entry for a specific project Allows you to delete a specific time entry
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryId">You can specify an individual task by appending the id to the endpoint</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetProjectAsync(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a single project Allows you to retrieve a specific project using the projectId
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <returns>Task of Project</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetProjectAsyncWithHttpInfo(System.String,System.String,System.Guid)">
            <summary>
            Retrieves a single project Allows you to retrieve a specific project using the projectId
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <returns>Task of ApiResponse (Project)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetProjectUsersAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves a list of all project users Allows you to retrieve the users on a projects.
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
            <returns>Task of ProjectUsers</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetProjectUsersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves a list of all project users Allows you to retrieve the users on a projects.
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
            <returns>Task of ApiResponse (ProjectUsers)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetProjectsAsync(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Guid},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves all projects Allows you to retrieve, create and update projects.
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectIds">Search for all projects that match a comma separated list of projectIds (optional)</param>
            <param name="contactID">Filter for projects for a specific contact (optional)</param>
            <param name="states">Filter for projects in a particular state (INPROGRESS or CLOSED) (optional)</param>
            <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
            <returns>Task of Projects</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetProjectsAsyncWithHttpInfo(System.String,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Guid},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves all projects Allows you to retrieve, create and update projects.
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectIds">Search for all projects that match a comma separated list of projectIds (optional)</param>
            <param name="contactID">Filter for projects for a specific contact (optional)</param>
            <param name="states">Filter for projects in a particular state (INPROGRESS or CLOSED) (optional)</param>
            <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
            <returns>Task of ApiResponse (Projects)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetTaskAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a single project task Allows you to retrieve a specific project
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="taskId">You can specify an individual task by appending the taskId to the endpoint, i.e. GET https://.../tasks/{taskID}</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetTaskAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a single project task Allows you to retrieve a specific project
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="taskId">You can specify an individual task by appending the taskId to the endpoint, i.e. GET https://.../tasks/{taskID}</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetTasksAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{Xero.NetStandard.OAuth2.Model.Project.ChargeType})">
            <summary>
            Retrieves all project tasks Allows you to retrieve a specific project
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
            <param name="taskIds">taskIdsSearch for all tasks that match a comma separated list of taskIds, i.e. GET https://.../tasks?taskIds&#x3D;{taskID},{taskID} (optional)</param>
            <param name="chargeType"> (optional)</param>
            <returns>Task of Tasks</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetTasksAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{Xero.NetStandard.OAuth2.Model.Project.ChargeType})">
            <summary>
            Retrieves all project tasks Allows you to retrieve a specific project
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
            <param name="taskIds">taskIdsSearch for all tasks that match a comma separated list of taskIds, i.e. GET https://.../tasks?taskIds&#x3D;{taskID},{taskID} (optional)</param>
            <param name="chargeType"> (optional)</param>
            <returns>Task of ApiResponse (Tasks)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetTimeEntriesAsync(System.String,System.String,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves all time entries associated with a specific project Allows you to retrieve the time entries associated with a specific project
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">Identifier of the project, that the task (which the time entry is logged against) belongs to.</param>
            <param name="userId">The xero user identifier of the person who logged time. (optional)</param>
            <param name="taskId">Identifier of the task that time entry is logged against. (optional)</param>
            <param name="invoiceId">Finds all time entries for this invoice. (optional)</param>
            <param name="contactId">Finds all time entries for this contact identifier. (optional)</param>
            <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
            <param name="states">Comma-separated list of states to find. Will find all time entries that are in the status of whatever is specified. (optional)</param>
            <param name="isChargeable">Finds all time entries which relate to tasks with the charge type &#x60;TIME&#x60; or &#x60;FIXED&#x60;. (optional)</param>
            <param name="dateAfterUtc">ISO 8601 UTC date. Finds all time entries on or after this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
            <param name="dateBeforeUtc">ISO 8601 UTC date. Finds all time entries on or before this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
            <returns>Task of TimeEntries</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetTimeEntriesAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves all time entries associated with a specific project Allows you to retrieve the time entries associated with a specific project
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">Identifier of the project, that the task (which the time entry is logged against) belongs to.</param>
            <param name="userId">The xero user identifier of the person who logged time. (optional)</param>
            <param name="taskId">Identifier of the task that time entry is logged against. (optional)</param>
            <param name="invoiceId">Finds all time entries for this invoice. (optional)</param>
            <param name="contactId">Finds all time entries for this contact identifier. (optional)</param>
            <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
            <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
            <param name="states">Comma-separated list of states to find. Will find all time entries that are in the status of whatever is specified. (optional)</param>
            <param name="isChargeable">Finds all time entries which relate to tasks with the charge type &#x60;TIME&#x60; or &#x60;FIXED&#x60;. (optional)</param>
            <param name="dateAfterUtc">ISO 8601 UTC date. Finds all time entries on or after this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
            <param name="dateBeforeUtc">ISO 8601 UTC date. Finds all time entries on or before this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
            <returns>Task of ApiResponse (TimeEntries)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetTimeEntryAsync(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a single time entry for a specific project Allows you to get a single time entry in a project
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
            <returns>Task of TimeEntry</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.GetTimeEntryAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Retrieves a single time entry for a specific project Allows you to get a single time entry in a project
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
            <returns>Task of ApiResponse (TimeEntry)</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.PatchProjectAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.ProjectPatch)">
            <summary>
            creates a project for the specified contact Allows you to update a specific projects.
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="projectPatch">Update the status of an existing Project</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.PatchProjectAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.ProjectPatch)">
            <summary>
            creates a project for the specified contact Allows you to update a specific projects.
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="projectPatch">Update the status of an existing Project</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.UpdateProjectAsync(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate)">
            <summary>
            Updates a specific project Allows you to update a specific projects.
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="projectCreateOrUpdate">Request of type ProjectCreateOrUpdate</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.UpdateProjectAsyncWithHttpInfo(System.String,System.String,System.Guid,Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate)">
            <summary>
            Updates a specific project Allows you to update a specific projects.
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="projectCreateOrUpdate">Request of type ProjectCreateOrUpdate</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.UpdateTaskAsync(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate)">
            <summary>
            Allows you to update a task Allows you to update a specific task
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
            <param name="taskCreateOrUpdate">The task object you are updating</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.UpdateTaskAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate)">
            <summary>
            Allows you to update a task Allows you to update a specific task
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
            <param name="taskCreateOrUpdate">The task object you are updating</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.UpdateTimeEntryAsync(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate)">
            <summary>
            Updates a time entry for a specific project Allows you to update time entry in a project
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
            <param name="timeEntryCreateOrUpdate">The time entry object you are updating</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Api.ProjectApi.UpdateTimeEntryAsyncWithHttpInfo(System.String,System.String,System.Guid,System.Guid,Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate)">
            <summary>
            Updates a time entry for a specific project Allows you to update time entry in a project
            </summary>
            <exception cref="T:Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
            <param name="xeroTenantId">Xero identifier for Tenant</param>
            <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
            <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
            <param name="timeEntryCreateOrUpdate">The time entry object you are updating</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.CustomJsonCodec">
            <summary>
            Allows RestSharp to Serialize/Deserialize JSON using our custom logic, but only when ContentType is JSON. 
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.CustomJsonCodec.Deserialize(RestSharp.IRestResponse,System.Type)">
            <summary>
            Deserialize the JSON string into a proper object.
            </summary>
            <param name="response">The HTTP response.</param>
            <param name="type">Object type.</param>
            <returns>Object representation of the JSON string.</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.CustomStringEnumConverter">
            <summary>
            Override class used to support deserialising null enum values
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.CustomStringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            Has a special case where null is read into a 0-value enum.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.ApiClient">
            <summary>
            Provides a default implementation of an Api client (both synchronous and asynchronous implementatios),
            encapsulating general REST accessor use cases.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.InterceptRequest(RestSharp.IRestRequest)">
            <summary>
            Allows for extending request processing for <see cref="T:Xero.NetStandard.OAuth2.Client.ApiClient"/> generated code.
            </summary>
            <param name="request">The RestSharp request object</param>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.InterceptResponse(RestSharp.IRestRequest,RestSharp.IRestResponse)">
            <summary>
            Allows for extending response processing for <see cref="T:Xero.NetStandard.OAuth2.Client.ApiClient"/> generated code.
            </summary>
            <param name="request">The RestSharp request object</param>
            <param name="response">The RestSharp response object</param>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Client.ApiClient" />, defaulting to the global configurations' base url.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Client.ApiClient" />
            </summary>
            <param name="basePath">The target service's base path in URL format.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.Method(Xero.NetStandard.OAuth2.Client.HttpMethod)">
            <summary>
            Constructs the RestSharp version of an http method
            </summary>
            <param name="method">Swagger Client Custom HttpMethod</param>
            <returns>RestSharp's HttpMethod instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.newRequest(Xero.NetStandard.OAuth2.Client.HttpMethod,System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Provides all logic for constructing a new RestSharp <see cref="T:RestSharp.RestRequest"/>.
            At this point, all information for querying the service is known. Here, it is simply
            mapped into the RestSharp request.
            </summary>
            <param name="method">The http verb.</param>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>[private] A new RestRequest instance.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.GetAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP GET request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.PostAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP POST request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.PutAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP PUT request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.DeleteAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP DELETE request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.HeadAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP HEAD request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.OptionsAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP OPTION request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.PatchAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP PATCH request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.Get``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP GET request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.Post``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP POST request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.Put``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP PUT request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.Delete``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP DELETE request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.Head``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP HEAD request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.Options``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP OPTION request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiClient.Patch``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP PATCH request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.ApiException">
            <summary>
            API Exception
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.ApiException.ErrorCode">
            <summary>
            Gets or sets the error code (HTTP status code)
            </summary>
            <value>The error code (HTTP status code).</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.ApiException.ErrorContent">
            <summary>
            Gets or sets the error content (body json object)
            </summary>
            <value>The error content (Http response body).</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.ApiException.RetryAfter">
            <summary>
            Gets or sets retry after value
            </summary>
            <value>
            The number of seconds the client should wait before retrying the request.
            Set from the value of the Retry-After header returned by the server.
            </value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.ApiException.LimitType">
            <summary>
            Gets or sets the limit type value
            </summary>
            <value>The type of the rate limit hit, such as minute or daily.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Client.ApiException"/> class.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiException.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
            <param name="errorContent">Error content.</param>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiException.#ctor(System.Int32,System.String,System.Object,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Client.ApiException"/> class for the case when a rate limit is hit.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
            <param name="errorContent">Error content.</param>
            <param name="limitType">The type of limit hit.</param>
            <param name="retryAfter">Number of seconds to wait before retrying.</param>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.IApiResponse">
            <summary>
            Provides a non-generic contract for the ApiResponse wrapper.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IApiResponse.ResponseType">
            <summary>
            The data type of <see cref="P:Xero.NetStandard.OAuth2.Client.IApiResponse.Content"/>
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IApiResponse.Content">
            <summary>
            The content of this response
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IApiResponse.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IApiResponse.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IApiResponse.ErrorText">
            <summary>
            Gets or sets any error text defined by the calling client.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IApiResponse.Cookies">
            <summary>
            Gets or sets any cookies passed along on the response.
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1">
            <summary>
            API Response
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.ApiResponse`1.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.ApiResponse`1.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.ApiResponse`1.Data">
            <summary>
            Gets or sets the data (parsed HTTP body)
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.ApiResponse`1.ErrorText">
            <summary>
            Gets or sets any error text defined by the calling client.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.ApiResponse`1.Cookies">
            <summary>
            Gets or sets any cookies passed along on the response.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.ApiResponse`1.ResponseType">
            <summary>
            The content of this response
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.ApiResponse`1.Content">
            <summary>
            The data type of <see cref="P:Xero.NetStandard.OAuth2.Client.ApiResponse`1.Content"/>
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,Xero.NetStandard.OAuth2.Client.Multimap{System.String,System.String},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="headers">HTTP headers.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.ClientUtils">
            <summary>
            Utility functions providing some benefit to API client consumers.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ClientUtils.SanitizeFilename(System.String)">
            <summary>
            Sanitize filename by removing the path
            </summary>
            <param name="filename">Filename</param>
            <returns>Filename</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap(System.String,System.String,System.Object)">
            <summary>
            Convert params to key/value pairs. 
            Use collectionFormat to properly format lists and collections.
            </summary>
            <param name="collectionFormat">The swagger-supported collection format, one of: csv, tsv, ssv, pipes, multi</param>
            <param name="name">Key name.</param>
            <param name="value">Value object.</param>
            <returns>A multimap of keys with 1..n associated values.</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(System.Object,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
            If parameter is a list, join the list with ",".
            Otherwise just return the string.
            </summary>
            <param name="obj">The parameter (header, path, query, form).</param>
            <param name="configuration">An optional configuration instance, providing formatting options used in processing.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ClientUtils.IsCollection(System.Object)">
            <summary>
            Check if generic object is a collection.
            </summary>
            <param name="value"></param>
            <returns>True if object is a collection type</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ClientUtils.UrlEncode(System.String)">
            <summary>
            URL encode a string
            Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
            </summary>
            <param name="input">String to be URL encoded</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ClientUtils.Base64Encode(System.String)">
            <summary>
            Encode string in base64 format.
            </summary>
            <param name="text">String to be encoded.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ClientUtils.ReadAsBytes(System.IO.Stream)">
            <summary>
            Convert stream to byte array
            </summary>
            <param name="inputStream">Input stream to be converted</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ClientUtils.ConvertType(System.Object,System.Type)">
            <summary>
            Dynamically cast the object into target type.
            </summary>
            <param name="fromObject">Object to be casted</param>
            <param name="toObject">Target type</param>
            <returns>Casted object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ClientUtils.SelectHeaderContentType(System.String[])">
            <summary>
            Select the Content-Type header's value from the given content-type array:
            if JSON type exists in the given array, use it;
            otherwise use the first one defined in 'consumes'
            </summary>
            <param name="contentTypes">The Content-Type array to select from.</param>
            <returns>The Content-Type header to use.</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ClientUtils.SelectHeaderAccept(System.String[])">
            <summary>
            Select the Accept header's value from the given accepts array:
            if JSON exists in the given array, use it;
            otherwise use all of them (joining into a string)
            </summary>
            <param name="accepts">The accepts array to select from.</param>
            <returns>The Accept header to use.</returns>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.ClientUtils.JsonRegex">
            <summary>
            Provides a case-insensitive check that a provided content type is a known JSON-like content type.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ClientUtils.IsJsonMime(System.String)">
            <summary>
            Check if the given MIME is a JSON MIME.
            JSON MIME examples:
               application/json
               application/json; charset=UTF8
               APPLICATION/JSON
               application/vnd.company+json
            </summary>
            <param name="mime">MIME</param>
            <returns>Returns True if MIME type is json.</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.Configuration">
            <summary>
            Represents a set of configuration settings
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.Configuration.Version">
            <summary>
            Version of the package.
            </summary>
            <value>Version of the package.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.Configuration.ISO8601_DATETIME_FORMAT">
            <summary>
            Identifier for ISO 8601 DateTime Format
            </summary>
            <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory">
            <summary>
            Default creation of exceptions for a given method name and response object
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.Configuration._basePath">
            <summary>
            Defines the base path of the target API server.
            Example: http://localhost:3000/v1/
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.Configuration._apiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            This is the key and value comprising the "secret" for acessing an API.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.Configuration._apiKeyPrefix">
            <summary>
            Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            </summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Client.Configuration" /> class
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Configuration.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Client.Configuration" /> class
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Configuration.BasePath">
            <summary>
            Gets or sets the base path for API access.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Configuration.DefaultHeader">
            <summary>
            Gets or sets the default header.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Configuration.Timeout">
            <summary>
            Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 300000 milliseconds.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Configuration.UserAgent">
            <summary>
            Gets or sets the HTTP user agent.
            </summary>
            <value>Http user agent.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Configuration.Username">
            <summary>
            Gets or sets the username (HTTP basic authentication).
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Configuration.Password">
            <summary>
            Gets or sets the password (HTTP basic authentication).
            </summary>
            <value>The password.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Configuration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Configuration.AccessToken">
            <summary>
            Gets or sets the access token for OAuth2 authentication.
            
            This helper property simplifies code generation.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Configuration.TempFolderPath">
            <summary>
            Gets or sets the temporary folder path to store the files downloaded from the server.
            </summary>
            <value>Folder path.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Configuration.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when serializing in the ApiClient
            By default, it's set to ISO 8601 - "o", for others see:
            https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
            and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
            No validation is done to ensure that the string you're providing is valid
            </summary>
            <value>The DateTimeFormat string</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Configuration.ApiKeyPrefix">
             <summary>
             Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            
             Whatever you set here will be prepended to the value defined in AddApiKey.
             
             An example invocation here might be:
             <example>
             ApiKeyPrefix["Authorization"] = "Bearer";
             </example>
             … where ApiKey["Authorization"] would then be used to set the value of your bearer token.
             
             <remarks>
             OAuth2 workflows should set tokens via AccessToken.
             </remarks>
             </summary>
             <value>The prefix of the API key.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Configuration.ApiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Configuration.ToDebugReport">
            <summary>
            Returns a string with essential information for debugging.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Configuration.AddApiKey(System.String,System.String)">
            <summary>
            Add Api Key Header.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
            <returns></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Configuration.AddApiKeyPrefix(System.String,System.String)">
            <summary>
            Sets the API key prefix.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(Xero.NetStandard.OAuth2.Client.IReadableConfiguration,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Merge configurations.
            </summary>
            <param name="first">First configuration.</param>
            <param name="second">Second configuration.</param>
            <return>Merged configuration.</return>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.ExceptionFactory">
            <summary>
            A delegate to ExceptionFactory method
            </summary>
            <param name="methodName">Method name</param>
            <param name="response">Response</param>
            <returns>Exceptions</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.GlobalConfiguration">
            <summary>
            <see cref="T:Xero.NetStandard.OAuth2.Client.GlobalConfiguration"/> provides a compile-time extension point for globally configuring
            API Clients.
            </summary>
            <remarks>
            A customized implementation via partial class may reside in another file and may
            be excluded from automatic generation via a .openapi-generator-ignore file.
            </remarks>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.GlobalConfiguration.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.GlobalConfiguration.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance">
            <summary>
            Gets or sets the default Configuration.
            </summary>
            <value>Configuration.</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.HttpMethod">
            <summary>
            Http methods supported by swagger
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.HttpMethod.Get">
            <summary>HTTP GET request.</summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.HttpMethod.Post">
            <summary>HTTP POST request.</summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.HttpMethod.Put">
            <summary>HTTP PUT request.</summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.HttpMethod.Delete">
            <summary>HTTP DELETE request.</summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.HttpMethod.Head">
            <summary>HTTP HEAD request.</summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.HttpMethod.Options">
            <summary>HTTP OPTIONS request.</summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Client.HttpMethod.Patch">
            <summary>HTTP PATCH request.</summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.IApiAccessor">
            <summary>
            Represents configuration aspects required to interact with the API endpoints.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IApiAccessor.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.IApiAccessor.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IApiAccessor.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.IAsynchronousClient">
            <summary>
            Contract for Asynchronous RESTful API interactions.
            
            This interface allows consumers to provide a custom API accessor client.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.IAsynchronousClient.GetAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the GET http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.IAsynchronousClient.PostAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the POST http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.IAsynchronousClient.PutAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the PUT http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.IAsynchronousClient.DeleteAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the DELETE http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.IAsynchronousClient.HeadAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the HEAD http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.IAsynchronousClient.OptionsAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the OPTIONS http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.IAsynchronousClient.PatchAsync``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the PATCH http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.IReadableConfiguration">
            <summary>
            Represents a readable-only configuration contract.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IReadableConfiguration.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <value>Access token.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IReadableConfiguration.ApiKey">
            <summary>
            Gets the API key.
            </summary>
            <value>API key.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IReadableConfiguration.ApiKeyPrefix">
            <summary>
            Gets the API key prefix.
            </summary>
            <value>API key prefix.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IReadableConfiguration.BasePath">
            <summary>
            Gets the base path.
            </summary>
            <value>Base path.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IReadableConfiguration.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>Date time foramt.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IReadableConfiguration.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <value>Default header.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IReadableConfiguration.TempFolderPath">
            <summary>
            Gets the temp folder path.
            </summary>
            <value>Temp folder path.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IReadableConfiguration.Timeout">
            <summary>
            Gets the HTTP connection timeout (in milliseconds)
            </summary>
            <value>HTTP connection timeout.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IReadableConfiguration.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
            <value>User agent.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IReadableConfiguration.Username">
            <summary>
            Gets the username.
            </summary>
            <value>Username.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.IReadableConfiguration.Password">
            <summary>
            Gets the password.
            </summary>
            <value>Password.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.IReadableConfiguration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.ISynchronousClient">
            <summary>
            Contract for Synchronous RESTful API interactions.
            
            This interface allows consumers to provide a custom API accessor client.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ISynchronousClient.Get``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the GET http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ISynchronousClient.Post``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the POST http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ISynchronousClient.Put``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the PUT http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ISynchronousClient.Delete``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the DELETE http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ISynchronousClient.Head``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the HEAD http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ISynchronousClient.Options``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the OPTIONS http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.ISynchronousClient.Patch``1(System.String,Xero.NetStandard.OAuth2.Client.RequestOptions,Xero.NetStandard.OAuth2.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the PATCH http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Xero.NetStandard.OAuth2.Client.ApiResponse`1"/></returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.Multimap`2">
            <summary>
            A dictionary in which one key has many associated values.
            </summary>
            <typeparam name="T">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value associated with the key.</typeparam>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.GetEnumerator">
            <summary>
            To get the enumerator.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            To get the enumerator.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Add values to Multimap
            </summary>
            <param name="item">Key value pair</param>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.Add(Xero.NetStandard.OAuth2.Client.Multimap{`0,`1})">
            <summary>
            Add Multimap to Multimap
            </summary>
            <param name="multimap">Multimap</param>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.Clear">
            <summary>
            Clear Multimap
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Determines whether Multimap contains the specified item.
            </summary>
            <param name="item">Key value pair</param>
            <exception cref="T:System.NotImplementedException">Method needs to be implemented</exception>
            <returns>true if the Multimap contains the item; otherwise, false.</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)">
            <summary>
             Copy items of the Multimap to an array,
                starting at a particular array index.
            </summary>
            <param name="array">The array that is the destination of the items copied
                from Multimap. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.NotImplementedException">Method needs to be implemented</exception>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Removes the specified item from the Multimap.
            </summary>
            <param name="item">Key value pair</param>
            <returns>true if the item is successfully removed; otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException">Method needs to be implemented</exception>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Multimap`2.Count">
            <summary>
            Gets the number of items contained in the Multimap.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Multimap`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the Multimap is read-only.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Adds an item with the provided key and value to the Multimap.
            </summary>
            <param name="key">The object to use as the key of the item to add.</param>
            <param name="value">The object to use as the value of the item to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when couldn't add the value to Multimap.</exception>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.ContainsKey(`0)">
            <summary>
            Determines whether the Multimap contains an item with the specified key.
            </summary>
            <param name="key">The key to locate in the Multimap.</param>
            <returns>true if the Multimap contains an item with
                the key; otherwise, false.</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.Remove(`0)">
            <summary>
            Removes item with the specified key from the Multimap.
            </summary>
            <param name="key">The key to locate in the Multimap.</param>
            <returns>true if the item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.TryGetValue(`0,System.Collections.Generic.IList{`1}@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the
                key is found; otherwise, the default value for the type of the value parameter.
                This parameter is passed uninitialized.</param>
            <returns> true if the object that implements Multimap contains
                an item with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Multimap`2.Item(`0)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
            <param name="key">The key of the item to get or set.</param>
            <returns>The value of the specified key.</returns>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Multimap`2.Keys">
            <summary>
            Gets a System.Collections.Generic.ICollection containing the keys of the Multimap.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.Multimap`2.Values">
            <summary>
            Gets a System.Collections.Generic.ICollection containing the values of the Multimap.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.CopyTo(System.Array,System.Int32)">
            <summary>
             Copy the items of the Multimap to an System.Array,
                starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the items copied
                from Multimap. The System.Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.Add(`0,`1)">
            <summary>
            Adds an item with the provided key and value to the Multimap.
            </summary>
            <param name="key">The object to use as the key of the item to add.</param>
            <param name="value">The object to use as the value of the item to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when couldn't add value to Multimap.</exception>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.TryRemove(`0,System.Collections.Generic.IList{`1}@)">
            Helper method to encapsulate generator differences between dictioary types.
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.Multimap`2.TryAdd(`0,System.Collections.Generic.IList{`1})">
            Helper method to encapsulate generator differences between dictioary types.
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter">
            <summary>
            Formatter for 'date' openapi formats ss defined by full-date - RFC3339
            see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter" /> class.
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Client.RequestOptions">
            <summary>
            A container for generalized request inputs. This type allows consumers to extend the request functionality
            by abstracting away from the default (built-in) request framework (e.g. RestSharp).
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.RequestOptions.PathParameters">
            <summary>
            Parameters to be bound to path parts of the Request's URL
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.RequestOptions.QueryParameters">
            <summary>
            Query parameters to be applied to the request.
            Keys may have 1 or more values associated.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.RequestOptions.HeaderParameters">
            <summary>
            Header parameters to be applied to to the request.
            Keys may have 1 or more values associated.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.RequestOptions.FormParameters">
            <summary>
            Form parameters to be sent along with the request.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.RequestOptions.FileParameters">
            <summary>
            File parameters to be sent along with the request.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.RequestOptions.Cookies">
            <summary>
            Cookies to be sent along with the request.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Client.RequestOptions.Data">
            <summary>
            Any data associated with a request body.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Client.RequestOptions.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Xero.NetStandard.OAuth2.Client.RequestOptions"/>
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Account">
            <summary>
            Account
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Account.StatusEnum">
            <summary>
            Accounts with a status of ACTIVE can be updated to ARCHIVED. See Account Status Codes
            </summary>
            <value>Accounts with a status of ACTIVE can be updated to ARCHIVED. See Account Status Codes</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.StatusEnum.ARCHIVED">
            <summary>
            Enum ARCHIVED for value: ARCHIVED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.Status">
            <summary>
            Accounts with a status of ACTIVE can be updated to ARCHIVED. See Account Status Codes
            </summary>
            <value>Accounts with a status of ACTIVE can be updated to ARCHIVED. See Account Status Codes</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Account.BankAccountTypeEnum">
            <summary>
            For bank accounts only. See Bank Account types
            </summary>
            <value>For bank accounts only. See Bank Account types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.BankAccountTypeEnum.BANK">
            <summary>
            Enum BANK for value: BANK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.BankAccountTypeEnum.CREDITCARD">
            <summary>
            Enum CREDITCARD for value: CREDITCARD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.BankAccountTypeEnum.PAYPAL">
            <summary>
            Enum PAYPAL for value: PAYPAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.BankAccountTypeEnum.NONE">
            <summary>
            Enum NONE for value: NONE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.BankAccountTypeEnum.Empty">
            <summary>
            Enum Empty for value: 
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.BankAccountType">
            <summary>
            For bank accounts only. See Bank Account types
            </summary>
            <value>For bank accounts only. See Bank Account types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.CurrencyCode">
            <summary>
            Gets or Sets CurrencyCode
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Account.ClassEnum">
            <summary>
            See Account Class Types
            </summary>
            <value>See Account Class Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.ClassEnum.ASSET">
            <summary>
            Enum ASSET for value: ASSET
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.ClassEnum.EQUITY">
            <summary>
            Enum EQUITY for value: EQUITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.ClassEnum.EXPENSE">
            <summary>
            Enum EXPENSE for value: EXPENSE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.ClassEnum.LIABILITY">
            <summary>
            Enum LIABILITY for value: LIABILITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.ClassEnum.REVENUE">
            <summary>
            Enum REVENUE for value: REVENUE
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.Class">
            <summary>
            See Account Class Types
            </summary>
            <value>See Account Class Types</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum">
            <summary>
            If this is a system account then this element is returned. See System Account types. Note that non-system accounts may have this element set as either “” or null.
            </summary>
            <value>If this is a system account then this element is returned. See System Account types. Note that non-system accounts may have this element set as either “” or null.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.DEBTORS">
            <summary>
            Enum DEBTORS for value: DEBTORS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.CREDITORS">
            <summary>
            Enum CREDITORS for value: CREDITORS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.BANKCURRENCYGAIN">
            <summary>
            Enum BANKCURRENCYGAIN for value: BANKCURRENCYGAIN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.GST">
            <summary>
            Enum GST for value: GST
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.GSTONIMPORTS">
            <summary>
            Enum GSTONIMPORTS for value: GSTONIMPORTS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.HISTORICAL">
            <summary>
            Enum HISTORICAL for value: HISTORICAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.REALISEDCURRENCYGAIN">
            <summary>
            Enum REALISEDCURRENCYGAIN for value: REALISEDCURRENCYGAIN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.RETAINEDEARNINGS">
            <summary>
            Enum RETAINEDEARNINGS for value: RETAINEDEARNINGS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.ROUNDING">
            <summary>
            Enum ROUNDING for value: ROUNDING
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.TRACKINGTRANSFERS">
            <summary>
            Enum TRACKINGTRANSFERS for value: TRACKINGTRANSFERS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.UNPAIDEXPCLM">
            <summary>
            Enum UNPAIDEXPCLM for value: UNPAIDEXPCLM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.UNREALISEDCURRENCYGAIN">
            <summary>
            Enum UNREALISEDCURRENCYGAIN for value: UNREALISEDCURRENCYGAIN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.WAGEPAYABLES">
            <summary>
            Enum WAGEPAYABLES for value: WAGEPAYABLES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.CISASSETS">
            <summary>
            Enum CISASSETS for value: CISASSETS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.CISASSET">
            <summary>
            Enum CISASSET for value: CISASSET
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.CISLABOUR">
            <summary>
            Enum CISLABOUR for value: CISLABOUR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.CISLABOUREXPENSE">
            <summary>
            Enum CISLABOUREXPENSE for value: CISLABOUREXPENSE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.CISLABOURINCOME">
            <summary>
            Enum CISLABOURINCOME for value: CISLABOURINCOME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.CISLIABILITY">
            <summary>
            Enum CISLIABILITY for value: CISLIABILITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.CISMATERIALS">
            <summary>
            Enum CISMATERIALS for value: CISMATERIALS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccountEnum.Empty">
            <summary>
            Enum Empty for value: 
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.SystemAccount">
            <summary>
            If this is a system account then this element is returned. See System Account types. Note that non-system accounts may have this element set as either “” or null.
            </summary>
            <value>If this is a system account then this element is returned. See System Account types. Note that non-system accounts may have this element set as either “” or null.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.Code">
            <summary>
            Customer defined alpha numeric account code e.g 200 or SALES (max length &#x3D; 10)
            </summary>
            <value>Customer defined alpha numeric account code e.g 200 or SALES (max length &#x3D; 10)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.Name">
            <summary>
            Name of account (max length &#x3D; 150)
            </summary>
            <value>Name of account (max length &#x3D; 150)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.AccountID">
            <summary>
            The Xero identifier for an account – specified as a string following  the endpoint name   e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9
            </summary>
            <value>The Xero identifier for an account – specified as a string following  the endpoint name   e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.BankAccountNumber">
            <summary>
            For bank accounts only (Account Type BANK)
            </summary>
            <value>For bank accounts only (Account Type BANK)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.Description">
            <summary>
            Description of the Account. Valid for all types of accounts except bank accounts (max length &#x3D; 4000)
            </summary>
            <value>Description of the Account. Valid for all types of accounts except bank accounts (max length &#x3D; 4000)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.TaxType">
            <summary>
            The tax type from TaxRates
            </summary>
            <value>The tax type from TaxRates</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.EnablePaymentsToAccount">
            <summary>
            Boolean – describes whether account can have payments applied to it
            </summary>
            <value>Boolean – describes whether account can have payments applied to it</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.ShowInExpenseClaims">
            <summary>
            Boolean – describes whether account code is available for use with expense claims
            </summary>
            <value>Boolean – describes whether account code is available for use with expense claims</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.ReportingCode">
            <summary>
            Shown if set
            </summary>
            <value>Shown if set</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.ReportingCodeName">
            <summary>
            Shown if set
            </summary>
            <value>Shown if set</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.HasAttachments">
            <summary>
            boolean to indicate if an account has an attachment (read only)
            </summary>
            <value>boolean to indicate if an account has an attachment (read only)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.UpdatedDateUTC">
            <summary>
            Last modified date UTC format
            </summary>
            <value>Last modified date UTC format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.AddToWatchlist">
            <summary>
            Boolean – describes whether the account is shown in the watchlist widget on the dashboard
            </summary>
            <value>Boolean – describes whether the account is shown in the watchlist widget on the dashboard</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Account.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Account.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Account.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Account.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Account.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Account)">
            <summary>
            Returns true if Account instances are equal
            </summary>
            <param name="input">Instance of Account to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Account.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Account.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Accounts">
            <summary>
            Accounts
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Accounts._Accounts">
            <summary>
            Gets or Sets _Accounts
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Accounts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Accounts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Accounts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Accounts.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Accounts)">
            <summary>
            Returns true if Accounts instances are equal
            </summary>
            <param name="input">Instance of Accounts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Accounts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Accounts.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.AccountsPayable">
            <summary>
            AccountsPayable
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AccountsPayable.Outstanding">
            <summary>
            Gets or Sets Outstanding
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AccountsPayable.Overdue">
            <summary>
            Gets or Sets Overdue
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AccountsPayable.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AccountsPayable.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AccountsPayable.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AccountsPayable.Equals(Xero.NetStandard.OAuth2.Model.Accounting.AccountsPayable)">
            <summary>
            Returns true if AccountsPayable instances are equal
            </summary>
            <param name="input">Instance of AccountsPayable to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AccountsPayable.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AccountsPayable.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.AccountsReceivable">
            <summary>
            AccountsReceivable
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AccountsReceivable.Outstanding">
            <summary>
            Gets or Sets Outstanding
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AccountsReceivable.Overdue">
            <summary>
            Gets or Sets Overdue
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AccountsReceivable.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AccountsReceivable.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AccountsReceivable.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AccountsReceivable.Equals(Xero.NetStandard.OAuth2.Model.Accounting.AccountsReceivable)">
            <summary>
            Returns true if AccountsReceivable instances are equal
            </summary>
            <param name="input">Instance of AccountsReceivable to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AccountsReceivable.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AccountsReceivable.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.AccountType">
            <summary>
            See Account Types
            </summary>
            <value>See Account Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.BANK">
            <summary>
            Enum BANK for value: BANK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.CURRENT">
            <summary>
            Enum CURRENT for value: CURRENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.CURRLIAB">
            <summary>
            Enum CURRLIAB for value: CURRLIAB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.DEPRECIATN">
            <summary>
            Enum DEPRECIATN for value: DEPRECIATN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.DIRECTCOSTS">
            <summary>
            Enum DIRECTCOSTS for value: DIRECTCOSTS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.EQUITY">
            <summary>
            Enum EQUITY for value: EQUITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.EXPENSE">
            <summary>
            Enum EXPENSE for value: EXPENSE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.FIXED">
            <summary>
            Enum FIXED for value: FIXED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.INVENTORY">
            <summary>
            Enum INVENTORY for value: INVENTORY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.LIABILITY">
            <summary>
            Enum LIABILITY for value: LIABILITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.NONCURRENT">
            <summary>
            Enum NONCURRENT for value: NONCURRENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.OTHERINCOME">
            <summary>
            Enum OTHERINCOME for value: OTHERINCOME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.OVERHEADS">
            <summary>
            Enum OVERHEADS for value: OVERHEADS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.PREPAYMENT">
            <summary>
            Enum PREPAYMENT for value: PREPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.REVENUE">
            <summary>
            Enum REVENUE for value: REVENUE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.SALES">
            <summary>
            Enum SALES for value: SALES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.TERMLIAB">
            <summary>
            Enum TERMLIAB for value: TERMLIAB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.PAYGLIABILITY">
            <summary>
            Enum PAYGLIABILITY for value: PAYGLIABILITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.PAYG">
            <summary>
            Enum PAYG for value: PAYG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.SUPERANNUATIONEXPENSE">
            <summary>
            Enum SUPERANNUATIONEXPENSE for value: SUPERANNUATIONEXPENSE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.SUPERANNUATIONLIABILITY">
            <summary>
            Enum SUPERANNUATIONLIABILITY for value: SUPERANNUATIONLIABILITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AccountType.WAGESEXPENSE">
            <summary>
            Enum WAGESEXPENSE for value: WAGESEXPENSE
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Action.StatusEnum">
            <summary>
            Status of the action for this organisation
            </summary>
            <value>Status of the action for this organisation</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Action.StatusEnum.ALLOWED">
            <summary>
            Enum ALLOWED for value: ALLOWED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Action.StatusEnum.NOTALLOWED">
            <summary>
            Enum NOTALLOWED for value: NOT-ALLOWED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Action.Status">
            <summary>
            Status of the action for this organisation
            </summary>
            <value>Status of the action for this organisation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Action.Name">
            <summary>
            Name of the actions for this organisation
            </summary>
            <value>Name of the actions for this organisation</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Action.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Action.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Action.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Action.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Action)">
            <summary>
            Returns true if Action instances are equal
            </summary>
            <param name="input">Instance of Action to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Action.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Action.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Actions">
            <summary>
            Actions
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Actions._Actions">
            <summary>
            Gets or Sets _Actions
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Actions.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Actions.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Actions.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Actions.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Actions)">
            <summary>
            Returns true if Actions instances are equal
            </summary>
            <param name="input">Instance of Actions to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Actions.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Actions.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Address.AddressTypeEnum">
            <summary>
            define the type of address
            </summary>
            <value>define the type of address</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Address.AddressTypeEnum.POBOX">
            <summary>
            Enum POBOX for value: POBOX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Address.AddressTypeEnum.STREET">
            <summary>
            Enum STREET for value: STREET
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Address.AddressType">
            <summary>
            define the type of address
            </summary>
            <value>define the type of address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Address.AddressLine1">
            <summary>
            max length &#x3D; 500
            </summary>
            <value>max length &#x3D; 500</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Address.AddressLine2">
            <summary>
            max length &#x3D; 500
            </summary>
            <value>max length &#x3D; 500</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Address.AddressLine3">
            <summary>
            max length &#x3D; 500
            </summary>
            <value>max length &#x3D; 500</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Address.AddressLine4">
            <summary>
            max length &#x3D; 500
            </summary>
            <value>max length &#x3D; 500</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Address.City">
            <summary>
            max length &#x3D; 255
            </summary>
            <value>max length &#x3D; 255</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Address.Region">
            <summary>
            max length &#x3D; 255
            </summary>
            <value>max length &#x3D; 255</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Address.PostalCode">
            <summary>
            max length &#x3D; 50
            </summary>
            <value>max length &#x3D; 50</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Address.Country">
            <summary>
            max length &#x3D; 50, [A-Z], [a-z] only
            </summary>
            <value>max length &#x3D; 50, [A-Z], [a-z] only</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Address.AttentionTo">
            <summary>
            max length &#x3D; 255
            </summary>
            <value>max length &#x3D; 255</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Address.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Address.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Address.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Address.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Address)">
            <summary>
            Returns true if Address instances are equal
            </summary>
            <param name="input">Instance of Address to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Address.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Address.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation">
            <summary>
            AddressForOrganisation
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.AddressTypeEnum">
            <summary>
            define the type of address
            </summary>
            <value>define the type of address</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.AddressTypeEnum.POBOX">
            <summary>
            Enum POBOX for value: POBOX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.AddressTypeEnum.STREET">
            <summary>
            Enum STREET for value: STREET
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.AddressTypeEnum.DELIVERY">
            <summary>
            Enum DELIVERY for value: DELIVERY
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.AddressType">
            <summary>
            define the type of address
            </summary>
            <value>define the type of address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.AddressLine1">
            <summary>
            max length &#x3D; 500
            </summary>
            <value>max length &#x3D; 500</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.AddressLine2">
            <summary>
            max length &#x3D; 500
            </summary>
            <value>max length &#x3D; 500</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.AddressLine3">
            <summary>
            max length &#x3D; 500
            </summary>
            <value>max length &#x3D; 500</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.AddressLine4">
            <summary>
            max length &#x3D; 500
            </summary>
            <value>max length &#x3D; 500</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.City">
            <summary>
            max length &#x3D; 255
            </summary>
            <value>max length &#x3D; 255</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.Region">
            <summary>
            max length &#x3D; 255
            </summary>
            <value>max length &#x3D; 255</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.PostalCode">
            <summary>
            max length &#x3D; 50
            </summary>
            <value>max length &#x3D; 50</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.Country">
            <summary>
            max length &#x3D; 50, [A-Z], [a-z] only
            </summary>
            <value>max length &#x3D; 50, [A-Z], [a-z] only</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.AttentionTo">
            <summary>
            max length &#x3D; 255
            </summary>
            <value>max length &#x3D; 255</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.Equals(Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation)">
            <summary>
            Returns true if AddressForOrganisation instances are equal
            </summary>
            <param name="input">Instance of AddressForOrganisation to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.AddressForOrganisation.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Allocation">
            <summary>
            Allocation
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Accounting.Allocation" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.Invoice">
            <summary>
            Gets or Sets Invoice
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.Overpayment">
            <summary>
            Gets or Sets Overpayment
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.Prepayment">
            <summary>
            Gets or Sets Prepayment
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.CreditNote">
            <summary>
            Gets or Sets CreditNote
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.Amount">
            <summary>
            the amount being applied to the invoice
            </summary>
            <value>the amount being applied to the invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.Date">
            <summary>
            the date the allocation is applied YYYY-MM-DD.
            </summary>
            <value>the date the allocation is applied YYYY-MM-DD.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.StatusAttributeString">
            <summary>
            A string to indicate if a invoice status
            </summary>
            <value>A string to indicate if a invoice status</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Allocation)">
            <summary>
            Returns true if Allocation instances are equal
            </summary>
            <param name="input">Instance of Allocation to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocation.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Allocations">
            <summary>
            Allocations
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Allocations._Allocations">
            <summary>
            Gets or Sets _Allocations
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocations.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocations.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocations.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocations.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Allocations)">
            <summary>
            Returns true if Allocations instances are equal
            </summary>
            <param name="input">Instance of Allocations to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocations.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Allocations.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Attachment">
            <summary>
            Attachment
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Attachment.AttachmentID">
            <summary>
            Unique ID for the file
            </summary>
            <value>Unique ID for the file</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Attachment.FileName">
            <summary>
            Name of the file
            </summary>
            <value>Name of the file</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Attachment.Url">
            <summary>
            URL to the file on xero.com
            </summary>
            <value>URL to the file on xero.com</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Attachment.MimeType">
            <summary>
            Type of file
            </summary>
            <value>Type of file</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Attachment.ContentLength">
            <summary>
            Length of the file content
            </summary>
            <value>Length of the file content</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Attachment.IncludeOnline">
            <summary>
            Include the file with the online invoice
            </summary>
            <value>Include the file with the online invoice</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Attachment.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Attachment.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Attachment.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Attachment.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Attachment)">
            <summary>
            Returns true if Attachment instances are equal
            </summary>
            <param name="input">Instance of Attachment to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Attachment.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Attachment.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Attachments">
            <summary>
            Attachments
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Attachments._Attachments">
            <summary>
            Gets or Sets _Attachments
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Attachments.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Attachments.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Attachments.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Attachments.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Attachments)">
            <summary>
            Returns true if Attachments instances are equal
            </summary>
            <param name="input">Instance of Attachments to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Attachments.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Attachments.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BalanceDetails">
            <summary>
            An array to specify multiple currency balances of an account
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BalanceDetails.Balance">
            <summary>
            The opening balances of the account. Debits are positive, credits are negative values
            </summary>
            <value>The opening balances of the account. Debits are positive, credits are negative values</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BalanceDetails.CurrencyCode">
            <summary>
            The currency of the balance (Not required for base currency)
            </summary>
            <value>The currency of the balance (Not required for base currency)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BalanceDetails.CurrencyRate">
            <summary>
            (Optional) Exchange rate to base currency when money is spent or received. If not specified, XE rate for the day is applied
            </summary>
            <value>(Optional) Exchange rate to base currency when money is spent or received. If not specified, XE rate for the day is applied</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BalanceDetails.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BalanceDetails.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BalanceDetails.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BalanceDetails.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BalanceDetails)">
            <summary>
            Returns true if BalanceDetails instances are equal
            </summary>
            <param name="input">Instance of BalanceDetails to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BalanceDetails.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BalanceDetails.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Balances">
            <summary>
            The raw AccountsReceivable(sales invoices) and AccountsPayable(bills) outstanding and overdue amounts, not converted to base currency (read only)
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Balances.AccountsReceivable">
            <summary>
            Gets or Sets AccountsReceivable
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Balances.AccountsPayable">
            <summary>
            Gets or Sets AccountsPayable
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Balances.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Balances.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Balances.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Balances.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Balances)">
            <summary>
            Returns true if Balances instances are equal
            </summary>
            <param name="input">Instance of Balances to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Balances.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Balances.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction">
            <summary>
            BankTransaction
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.TypeEnum">
            <summary>
            See Bank Transaction Types
            </summary>
            <value>See Bank Transaction Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.TypeEnum.RECEIVE">
            <summary>
            Enum RECEIVE for value: RECEIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.TypeEnum.RECEIVEOVERPAYMENT">
            <summary>
            Enum RECEIVEOVERPAYMENT for value: RECEIVE-OVERPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.TypeEnum.RECEIVEPREPAYMENT">
            <summary>
            Enum RECEIVEPREPAYMENT for value: RECEIVE-PREPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.TypeEnum.SPEND">
            <summary>
            Enum SPEND for value: SPEND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.TypeEnum.SPENDOVERPAYMENT">
            <summary>
            Enum SPENDOVERPAYMENT for value: SPEND-OVERPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.TypeEnum.SPENDPREPAYMENT">
            <summary>
            Enum SPENDPREPAYMENT for value: SPEND-PREPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.TypeEnum.RECEIVETRANSFER">
            <summary>
            Enum RECEIVETRANSFER for value: RECEIVE-TRANSFER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.TypeEnum.SPENDTRANSFER">
            <summary>
            Enum SPENDTRANSFER for value: SPEND-TRANSFER
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.Type">
            <summary>
            See Bank Transaction Types
            </summary>
            <value>See Bank Transaction Types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.CurrencyCode">
            <summary>
            Gets or Sets CurrencyCode
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.StatusEnum">
            <summary>
            See Bank Transaction Status Codes
            </summary>
            <value>See Bank Transaction Status Codes</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.StatusEnum.AUTHORISED">
            <summary>
            Enum AUTHORISED for value: AUTHORISED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.StatusEnum.VOIDED">
            <summary>
            Enum VOIDED for value: VOIDED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.Status">
            <summary>
            See Bank Transaction Status Codes
            </summary>
            <value>See Bank Transaction Status Codes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.LineAmountTypes">
            <summary>
            Gets or Sets LineAmountTypes
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.LineItems">
            <summary>
            See LineItems
            </summary>
            <value>See LineItems</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.BankAccount">
            <summary>
            Gets or Sets BankAccount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.IsReconciled">
            <summary>
            Boolean to show if transaction is reconciled
            </summary>
            <value>Boolean to show if transaction is reconciled</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.Date">
            <summary>
            Date of transaction – YYYY-MM-DD
            </summary>
            <value>Date of transaction – YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.Reference">
            <summary>
            Reference for the transaction. Only supported for SPEND and RECEIVE transactions.
            </summary>
            <value>Reference for the transaction. Only supported for SPEND and RECEIVE transactions.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.CurrencyRate">
            <summary>
            Exchange rate to base currency when money is spent or received. e.g.0.7500 Only used for bank transactions in non base currency. If this isn’t specified for non base currency accounts then either the user-defined rate (preference) or the XE.com day rate will be used. Setting currency is only supported on overpayments.
            </summary>
            <value>Exchange rate to base currency when money is spent or received. e.g.0.7500 Only used for bank transactions in non base currency. If this isn’t specified for non base currency accounts then either the user-defined rate (preference) or the XE.com day rate will be used. Setting currency is only supported on overpayments.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.Url">
            <summary>
            URL link to a source document – shown as “Go to App Name”
            </summary>
            <value>URL link to a source document – shown as “Go to App Name”</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.SubTotal">
            <summary>
            Total of bank transaction excluding taxes
            </summary>
            <value>Total of bank transaction excluding taxes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.TotalTax">
            <summary>
            Total tax on bank transaction
            </summary>
            <value>Total tax on bank transaction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.Total">
            <summary>
            Total of bank transaction tax inclusive
            </summary>
            <value>Total of bank transaction tax inclusive</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.BankTransactionID">
            <summary>
            Xero generated unique identifier for bank transaction
            </summary>
            <value>Xero generated unique identifier for bank transaction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.PrepaymentID">
            <summary>
            Xero generated unique identifier for a Prepayment. This will be returned on BankTransactions with a Type of SPEND-PREPAYMENT or RECEIVE-PREPAYMENT
            </summary>
            <value>Xero generated unique identifier for a Prepayment. This will be returned on BankTransactions with a Type of SPEND-PREPAYMENT or RECEIVE-PREPAYMENT</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.OverpaymentID">
            <summary>
            Xero generated unique identifier for an Overpayment. This will be returned on BankTransactions with a Type of SPEND-OVERPAYMENT or RECEIVE-OVERPAYMENT
            </summary>
            <value>Xero generated unique identifier for an Overpayment. This will be returned on BankTransactions with a Type of SPEND-OVERPAYMENT or RECEIVE-OVERPAYMENT</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.UpdatedDateUTC">
            <summary>
            Last modified date UTC format
            </summary>
            <value>Last modified date UTC format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.HasAttachments">
            <summary>
            Boolean to indicate if a bank transaction has an attachment
            </summary>
            <value>Boolean to indicate if a bank transaction has an attachment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.StatusAttributeString">
            <summary>
            A string to indicate if a invoice status
            </summary>
            <value>A string to indicate if a invoice status</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction)">
            <summary>
            Returns true if BankTransaction instances are equal
            </summary>
            <param name="input">Instance of BankTransaction to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransaction.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BankTransactions">
            <summary>
            BankTransactions
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransactions._BankTransactions">
            <summary>
            Gets or Sets _BankTransactions
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransactions.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransactions.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransactions.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransactions.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BankTransactions)">
            <summary>
            Returns true if BankTransactions instances are equal
            </summary>
            <param name="input">Instance of BankTransactions to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransactions.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransactions.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer">
            <summary>
            BankTransfer
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.FromBankAccount">
            <summary>
            Gets or Sets FromBankAccount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.ToBankAccount">
            <summary>
            Gets or Sets ToBankAccount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.Amount">
            <summary>
            amount of the transaction
            </summary>
            <value>amount of the transaction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.Date">
            <summary>
            The date of the Transfer YYYY-MM-DD
            </summary>
            <value>The date of the Transfer YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.BankTransferID">
            <summary>
            The identifier of the Bank Transfer
            </summary>
            <value>The identifier of the Bank Transfer</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.CurrencyRate">
            <summary>
            The currency rate
            </summary>
            <value>The currency rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.FromBankTransactionID">
            <summary>
            The Bank Transaction ID for the source account
            </summary>
            <value>The Bank Transaction ID for the source account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.ToBankTransactionID">
            <summary>
            The Bank Transaction ID for the destination account
            </summary>
            <value>The Bank Transaction ID for the destination account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.FromIsReconciled">
            <summary>
            The Bank Transaction boolean to show if it is reconciled for the source account
            </summary>
            <value>The Bank Transaction boolean to show if it is reconciled for the source account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.ToIsReconciled">
            <summary>
            The Bank Transaction boolean to show if it is reconciled for the destination account
            </summary>
            <value>The Bank Transaction boolean to show if it is reconciled for the destination account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.Reference">
            <summary>
            Reference for the transactions.
            </summary>
            <value>Reference for the transactions.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.HasAttachments">
            <summary>
            Boolean to indicate if a Bank Transfer has an attachment
            </summary>
            <value>Boolean to indicate if a Bank Transfer has an attachment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.CreatedDateUTC">
            <summary>
            UTC timestamp of creation date of bank transfer
            </summary>
            <value>UTC timestamp of creation date of bank transfer</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer)">
            <summary>
            Returns true if BankTransfer instances are equal
            </summary>
            <param name="input">Instance of BankTransfer to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfer.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfers">
            <summary>
            BankTransfers
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfers._BankTransfers">
            <summary>
            Gets or Sets _BankTransfers
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfers.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfers.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfers.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfers.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BankTransfers)">
            <summary>
            Returns true if BankTransfers instances are equal
            </summary>
            <param name="input">Instance of BankTransfers to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfers.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BankTransfers.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment">
            <summary>
            BatchPayment
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.TypeEnum">
            <summary>
            PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)
            </summary>
            <value>PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.TypeEnum.PAYBATCH">
            <summary>
            Enum PAYBATCH for value: PAYBATCH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.TypeEnum.RECBATCH">
            <summary>
            Enum RECBATCH for value: RECBATCH
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Type">
            <summary>
            PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)
            </summary>
            <value>PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.StatusEnum">
            <summary>
            AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.
            </summary>
            <value>AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.StatusEnum.AUTHORISED">
            <summary>
            Enum AUTHORISED for value: AUTHORISED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Status">
            <summary>
            AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.
            </summary>
            <value>AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Account">
            <summary>
            Gets or Sets Account
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Reference">
            <summary>
            (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
            </summary>
            <value>(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Particulars">
            <summary>
            (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
            </summary>
            <value>(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Code">
            <summary>
            (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
            </summary>
            <value>(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Details">
            <summary>
            (Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length &#x3D; 18
            </summary>
            <value>(Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length &#x3D; 18</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Narrative">
            <summary>
            (UK Only) Only shows on the statement line in Xero. Max length &#x3D;18
            </summary>
            <value>(UK Only) Only shows on the statement line in Xero. Max length &#x3D;18</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.BatchPaymentID">
            <summary>
            The Xero generated unique identifier for the bank transaction (read-only)
            </summary>
            <value>The Xero generated unique identifier for the bank transaction (read-only)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.DateString">
            <summary>
            Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
            </summary>
            <value>Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Date">
            <summary>
            Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
            </summary>
            <value>Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Amount">
            <summary>
            The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
            </summary>
            <value>The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Payments">
            <summary>
            An array of payments
            </summary>
            <value>An array of payments</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.TotalAmount">
            <summary>
            The total of the payments that make up the batch (read-only)
            </summary>
            <value>The total of the payments that make up the batch (read-only)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to the payment
            </summary>
            <value>UTC timestamp of last update to the payment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.IsReconciled">
            <summary>
            Booelan that tells you if the batch payment has been reconciled (read-only)
            </summary>
            <value>Booelan that tells you if the batch payment has been reconciled (read-only)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment)">
            <summary>
            Returns true if BatchPayment instances are equal
            </summary>
            <param name="input">Instance of BatchPayment to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayment.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDelete">
            <summary>
            BatchPaymentDelete
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDelete.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDelete" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDelete.BatchPaymentID">
            <summary>
            The Xero generated unique identifier for the bank transaction (read-only)
            </summary>
            <value>The Xero generated unique identifier for the bank transaction (read-only)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDelete.Status">
            <summary>
            The status of the batch payment.
            </summary>
            <value>The status of the batch payment.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDelete.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDelete.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDelete.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDelete.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDelete)">
            <summary>
            Returns true if BatchPaymentDelete instances are equal
            </summary>
            <param name="input">Instance of BatchPaymentDelete to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDelete.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDelete.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam">
            <summary>
            BatchPaymentDeleteByUrlParam
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam.Status">
            <summary>
            The status of the batch payment.
            </summary>
            <value>The status of the batch payment.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam)">
            <summary>
            Returns true if BatchPaymentDeleteByUrlParam instances are equal
            </summary>
            <param name="input">Instance of BatchPaymentDeleteByUrlParam to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDeleteByUrlParam.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails">
            <summary>
            Bank details for use on a batch payment stored with each contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails.BankAccountNumber">
            <summary>
            Bank account number for use with Batch Payments
            </summary>
            <value>Bank account number for use with Batch Payments</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails.BankAccountName">
            <summary>
            Name of bank for use with Batch Payments
            </summary>
            <value>Name of bank for use with Batch Payments</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails.Details">
            <summary>
            (Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length &#x3D; 18
            </summary>
            <value>(Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length &#x3D; 18</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails.Code">
            <summary>
            (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
            </summary>
            <value>(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails.Reference">
            <summary>
            (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
            </summary>
            <value>(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails)">
            <summary>
            Returns true if BatchPaymentDetails instances are equal
            </summary>
            <param name="input">Instance of BatchPaymentDetails to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPaymentDetails.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayments">
            <summary>
            BatchPayments
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayments._BatchPayments">
            <summary>
            Gets or Sets _BatchPayments
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayments.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayments.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayments.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayments.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BatchPayments)">
            <summary>
            Returns true if BatchPayments instances are equal
            </summary>
            <param name="input">Instance of BatchPayments to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayments.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BatchPayments.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Bill">
            <summary>
            Bill
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Bill.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Bill.Day">
            <summary>
            Day of Month (0-31)
            </summary>
            <value>Day of Month (0-31)</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Bill.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Bill.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Bill.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Bill.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Bill)">
            <summary>
            Returns true if Bill instances are equal
            </summary>
            <param name="input">Instance of Bill to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Bill.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Bill.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme">
            <summary>
            BrandingTheme
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.TypeEnum">
            <summary>
            Always INVOICE
            </summary>
            <value>Always INVOICE</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.TypeEnum.INVOICE">
            <summary>
            Enum INVOICE for value: INVOICE
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.Type">
            <summary>
            Always INVOICE
            </summary>
            <value>Always INVOICE</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.BrandingThemeID">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.Name">
            <summary>
            Name of branding theme
            </summary>
            <value>Name of branding theme</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.LogoUrl">
            <summary>
            The location of the image file used as the logo on this branding theme
            </summary>
            <value>The location of the image file used as the logo on this branding theme</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.SortOrder">
            <summary>
            Integer – ranked order of branding theme. The default branding theme has a value of 0
            </summary>
            <value>Integer – ranked order of branding theme. The default branding theme has a value of 0</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.CreatedDateUTC">
            <summary>
            UTC timestamp of creation date of branding theme
            </summary>
            <value>UTC timestamp of creation date of branding theme</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme)">
            <summary>
            Returns true if BrandingTheme instances are equal
            </summary>
            <param name="input">Instance of BrandingTheme to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BrandingTheme.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BrandingThemes">
            <summary>
            BrandingThemes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BrandingThemes._BrandingThemes">
            <summary>
            Gets or Sets _BrandingThemes
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BrandingThemes.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BrandingThemes.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BrandingThemes.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BrandingThemes.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BrandingThemes)">
            <summary>
            Returns true if BrandingThemes instances are equal
            </summary>
            <param name="input">Instance of BrandingThemes to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BrandingThemes.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BrandingThemes.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Budget">
            <summary>
            Budget
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Budget.TypeEnum">
            <summary>
            Type of Budget. OVERALL or TRACKING
            </summary>
            <value>Type of Budget. OVERALL or TRACKING</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Budget.TypeEnum.OVERALL">
            <summary>
            Enum OVERALL for value: OVERALL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Budget.TypeEnum.TRACKING">
            <summary>
            Enum TRACKING for value: TRACKING
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Budget.Type">
            <summary>
            Type of Budget. OVERALL or TRACKING
            </summary>
            <value>Type of Budget. OVERALL or TRACKING</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Budget.BudgetID">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Budget.Description">
            <summary>
            The Budget description
            </summary>
            <value>The Budget description</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Budget.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to budget
            </summary>
            <value>UTC timestamp of last update to budget</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Budget.BudgetLines">
            <summary>
            Gets or Sets BudgetLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Budget.Tracking">
            <summary>
            Gets or Sets Tracking
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Budget.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Budget.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Budget.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Budget.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Budget)">
            <summary>
            Returns true if Budget instances are equal
            </summary>
            <param name="input">Instance of Budget to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Budget.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Budget.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BudgetBalance">
            <summary>
            BudgetBalance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BudgetBalance.Period">
            <summary>
            Period the amount applies to (e.g. “2019-08”)
            </summary>
            <value>Period the amount applies to (e.g. “2019-08”)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BudgetBalance.Amount">
            <summary>
            LineItem Quantity
            </summary>
            <value>LineItem Quantity</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BudgetBalance.UnitAmount">
            <summary>
            Budgeted amount
            </summary>
            <value>Budgeted amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BudgetBalance.Notes">
            <summary>
            Any footnotes associated with this balance
            </summary>
            <value>Any footnotes associated with this balance</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetBalance.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetBalance.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetBalance.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetBalance.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BudgetBalance)">
            <summary>
            Returns true if BudgetBalance instances are equal
            </summary>
            <param name="input">Instance of BudgetBalance to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetBalance.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetBalance.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLine">
            <summary>
            BudgetLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLine.AccountID">
            <summary>
            See Accounts
            </summary>
            <value>See Accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLine.AccountCode">
            <summary>
            See Accounts
            </summary>
            <value>See Accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLine.BudgetBalances">
            <summary>
            Gets or Sets BudgetBalances
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLine.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BudgetLine)">
            <summary>
            Returns true if BudgetLine instances are equal
            </summary>
            <param name="input">Instance of BudgetLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLines">
            <summary>
            BudgetLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLines.Period">
            <summary>
            Period the amount applies to (e.g. “2019-08”)
            </summary>
            <value>Period the amount applies to (e.g. “2019-08”)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLines.Amount">
            <summary>
            LineItem Quantity
            </summary>
            <value>LineItem Quantity</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLines.UnitAmount">
            <summary>
            Budgeted amount
            </summary>
            <value>Budgeted amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLines.Notes">
            <summary>
            Any footnotes associated with this balance
            </summary>
            <value>Any footnotes associated with this balance</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLines.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLines.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLines.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLines.Equals(Xero.NetStandard.OAuth2.Model.Accounting.BudgetLines)">
            <summary>
            Returns true if BudgetLines instances are equal
            </summary>
            <param name="input">Instance of BudgetLines to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLines.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.BudgetLines.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Budgets">
            <summary>
            Budgets
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Budgets._Budgets">
            <summary>
            Gets or Sets _Budgets
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Budgets.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Budgets.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Budgets.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Budgets.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Budgets)">
            <summary>
            Returns true if Budgets instances are equal
            </summary>
            <param name="input">Instance of Budgets to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Budgets.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Budgets.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSetting">
            <summary>
            CISOrgSetting
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSetting.CISContractorEnabled">
            <summary>
            true or false - Boolean that describes if the organisation is a CIS Contractor
            </summary>
            <value>true or false - Boolean that describes if the organisation is a CIS Contractor</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSetting.CISSubContractorEnabled">
            <summary>
            true or false - Boolean that describes if the organisation is a CIS SubContractor
            </summary>
            <value>true or false - Boolean that describes if the organisation is a CIS SubContractor</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSetting.Rate">
            <summary>
            CIS Deduction rate for the organisation
            </summary>
            <value>CIS Deduction rate for the organisation</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSetting.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSetting.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSetting.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSetting.Equals(Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSetting)">
            <summary>
            Returns true if CISOrgSetting instances are equal
            </summary>
            <param name="input">Instance of CISOrgSetting to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSetting.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSetting.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSettings">
            <summary>
            CISOrgSettings
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSettings.CISSettings">
            <summary>
            Gets or Sets CISSettings
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSettings.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSettings.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSettings.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSettings.Equals(Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSettings)">
            <summary>
            Returns true if CISOrgSettings instances are equal
            </summary>
            <param name="input">Instance of CISOrgSettings to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSettings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISOrgSettings.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.CISSetting">
            <summary>
            CISSetting
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CISSetting.CISEnabled">
            <summary>
            Boolean that describes if the contact is a CIS Subcontractor
            </summary>
            <value>Boolean that describes if the contact is a CIS Subcontractor</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CISSetting.Rate">
            <summary>
            CIS Deduction rate for the contact if he is a subcontractor. If the contact is not CISEnabled, then the rate is not returned
            </summary>
            <value>CIS Deduction rate for the contact if he is a subcontractor. If the contact is not CISEnabled, then the rate is not returned</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISSetting.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISSetting.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISSetting.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISSetting.Equals(Xero.NetStandard.OAuth2.Model.Accounting.CISSetting)">
            <summary>
            Returns true if CISSetting instances are equal
            </summary>
            <param name="input">Instance of CISSetting to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISSetting.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISSetting.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.CISSettings">
            <summary>
            CISSettings
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CISSettings._CISSettings">
            <summary>
            Gets or Sets _CISSettings
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISSettings.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISSettings.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISSettings.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISSettings.Equals(Xero.NetStandard.OAuth2.Model.Accounting.CISSettings)">
            <summary>
            Returns true if CISSettings instances are equal
            </summary>
            <param name="input">Instance of CISSettings to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISSettings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CISSettings.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Contact">
            <summary>
            Contact
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Contact.ContactStatusEnum">
            <summary>
            Current status of a contact – see contact status types
            </summary>
            <value>Current status of a contact – see contact status types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Contact.ContactStatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Contact.ContactStatusEnum.ARCHIVED">
            <summary>
            Enum ARCHIVED for value: ARCHIVED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Contact.ContactStatusEnum.GDPRREQUEST">
            <summary>
            Enum GDPRREQUEST for value: GDPRREQUEST
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.ContactStatus">
            <summary>
            Current status of a contact – see contact status types
            </summary>
            <value>Current status of a contact – see contact status types</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Contact.SalesDefaultLineAmountTypeEnum">
            <summary>
            The default sales line amount type for a contact. Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.
            </summary>
            <value>The default sales line amount type for a contact. Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Contact.SalesDefaultLineAmountTypeEnum.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for value: INCLUSIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Contact.SalesDefaultLineAmountTypeEnum.EXCLUSIVE">
            <summary>
            Enum EXCLUSIVE for value: EXCLUSIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Contact.SalesDefaultLineAmountTypeEnum.NONE">
            <summary>
            Enum NONE for value: NONE
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.SalesDefaultLineAmountType">
            <summary>
            The default sales line amount type for a contact. Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.
            </summary>
            <value>The default sales line amount type for a contact. Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Contact.PurchasesDefaultLineAmountTypeEnum">
            <summary>
            The default purchases line amount type for a contact Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.
            </summary>
            <value>The default purchases line amount type for a contact Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Contact.PurchasesDefaultLineAmountTypeEnum.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for value: INCLUSIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Contact.PurchasesDefaultLineAmountTypeEnum.EXCLUSIVE">
            <summary>
            Enum EXCLUSIVE for value: EXCLUSIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Contact.PurchasesDefaultLineAmountTypeEnum.NONE">
            <summary>
            Enum NONE for value: NONE
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.PurchasesDefaultLineAmountType">
            <summary>
            The default purchases line amount type for a contact Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.
            </summary>
            <value>The default purchases line amount type for a contact Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.DefaultCurrency">
            <summary>
            Gets or Sets DefaultCurrency
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.ContactID">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.MergedToContactID">
            <summary>
            ID for the destination of a merged contact. Only returned when using paging or when fetching a contact by ContactId or ContactNumber.
            </summary>
            <value>ID for the destination of a merged contact. Only returned when using paging or when fetching a contact by ContactId or ContactNumber.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.ContactNumber">
            <summary>
            This can be updated via the API only i.e. This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50). If the Contact Number is used, this is displayed as Contact Code in the Contacts UI in Xero.
            </summary>
            <value>This can be updated via the API only i.e. This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50). If the Contact Number is used, this is displayed as Contact Code in the Contacts UI in Xero.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.AccountNumber">
            <summary>
            A user defined account number. This can be updated via the API and the Xero UI (max length &#x3D; 50)
            </summary>
            <value>A user defined account number. This can be updated via the API and the Xero UI (max length &#x3D; 50)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.Name">
            <summary>
            Full name of contact/organisation (max length &#x3D; 255)
            </summary>
            <value>Full name of contact/organisation (max length &#x3D; 255)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.FirstName">
            <summary>
            First name of contact person (max length &#x3D; 255)
            </summary>
            <value>First name of contact person (max length &#x3D; 255)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.LastName">
            <summary>
            Last name of contact person (max length &#x3D; 255)
            </summary>
            <value>Last name of contact person (max length &#x3D; 255)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.CompanyNumber">
            <summary>
            Company registration number (max length &#x3D; 50)
            </summary>
            <value>Company registration number (max length &#x3D; 50)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.EmailAddress">
            <summary>
            Email address of contact person (umlauts not supported) (max length  &#x3D; 255)
            </summary>
            <value>Email address of contact person (umlauts not supported) (max length  &#x3D; 255)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.SkypeUserName">
            <summary>
            Skype user name of contact
            </summary>
            <value>Skype user name of contact</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.ContactPersons">
            <summary>
            See contact persons
            </summary>
            <value>See contact persons</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.BankAccountDetails">
            <summary>
            Bank account number of contact
            </summary>
            <value>Bank account number of contact</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.TaxNumber">
            <summary>
            Tax number of contact – this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using (max length &#x3D; 50)
            </summary>
            <value>Tax number of contact – this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using (max length &#x3D; 50)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.AccountsReceivableTaxType">
            <summary>
            The tax type from TaxRates
            </summary>
            <value>The tax type from TaxRates</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.AccountsPayableTaxType">
            <summary>
            The tax type from TaxRates
            </summary>
            <value>The tax type from TaxRates</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.Addresses">
            <summary>
            Store certain address types for a contact – see address types
            </summary>
            <value>Store certain address types for a contact – see address types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.Phones">
            <summary>
            Store certain phone types for a contact – see phone types
            </summary>
            <value>Store certain phone types for a contact – see phone types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.IsSupplier">
            <summary>
            true or false – Boolean that describes if a contact that has any AP  invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts payable invoice is generated against this contact.
            </summary>
            <value>true or false – Boolean that describes if a contact that has any AP  invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts payable invoice is generated against this contact.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.IsCustomer">
            <summary>
            true or false – Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts receivable invoice is generated against this contact.
            </summary>
            <value>true or false – Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts receivable invoice is generated against this contact.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.XeroNetworkKey">
            <summary>
            Store XeroNetworkKey for contacts.
            </summary>
            <value>Store XeroNetworkKey for contacts.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.SalesDefaultAccountCode">
            <summary>
            The default sales account code for contacts
            </summary>
            <value>The default sales account code for contacts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.PurchasesDefaultAccountCode">
            <summary>
            The default purchases account code for contacts
            </summary>
            <value>The default purchases account code for contacts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.SalesTrackingCategories">
            <summary>
            The default sales tracking categories for contacts
            </summary>
            <value>The default sales tracking categories for contacts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.PurchasesTrackingCategories">
            <summary>
            The default purchases tracking categories for contacts
            </summary>
            <value>The default purchases tracking categories for contacts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.TrackingCategoryName">
            <summary>
            The name of the Tracking Category assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories
            </summary>
            <value>The name of the Tracking Category assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.TrackingCategoryOption">
            <summary>
            The name of the Tracking Option assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories
            </summary>
            <value>The name of the Tracking Option assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.PaymentTerms">
            <summary>
            Gets or Sets PaymentTerms
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to contact
            </summary>
            <value>UTC timestamp of last update to contact</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.ContactGroups">
            <summary>
            Displays which contact groups a contact is included in
            </summary>
            <value>Displays which contact groups a contact is included in</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.Website">
            <summary>
            Website address for contact (read only)
            </summary>
            <value>Website address for contact (read only)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.BrandingTheme">
            <summary>
            Gets or Sets BrandingTheme
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.BatchPayments">
            <summary>
            Gets or Sets BatchPayments
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.Discount">
            <summary>
            The default discount rate for the contact (read only)
            </summary>
            <value>The default discount rate for the contact (read only)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.Balances">
            <summary>
            Gets or Sets Balances
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.Attachments">
            <summary>
            Displays array of attachments from the API
            </summary>
            <value>Displays array of attachments from the API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.HasAttachments">
            <summary>
            A boolean to indicate if a contact has an attachment
            </summary>
            <value>A boolean to indicate if a contact has an attachment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.ValidationErrors">
            <summary>
            Displays validation errors returned from the API
            </summary>
            <value>Displays validation errors returned from the API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.HasValidationErrors">
            <summary>
            A boolean to indicate if a contact has an validation errors
            </summary>
            <value>A boolean to indicate if a contact has an validation errors</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contact.StatusAttributeString">
            <summary>
            Status of object
            </summary>
            <value>Status of object</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Contact.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Contact.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Contact.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Contact.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Contact)">
            <summary>
            Returns true if Contact instances are equal
            </summary>
            <param name="input">Instance of Contact to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Contact.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Contact.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup">
            <summary>
            ContactGroup
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.StatusEnum">
            <summary>
            The Status of a contact group. To delete a contact group update the status to DELETED. Only contact groups with a status of ACTIVE are returned on GETs.
            </summary>
            <value>The Status of a contact group. To delete a contact group update the status to DELETED. Only contact groups with a status of ACTIVE are returned on GETs.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.Status">
            <summary>
            The Status of a contact group. To delete a contact group update the status to DELETED. Only contact groups with a status of ACTIVE are returned on GETs.
            </summary>
            <value>The Status of a contact group. To delete a contact group update the status to DELETED. Only contact groups with a status of ACTIVE are returned on GETs.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.Name">
            <summary>
            The Name of the contact group. Required when creating a new contact  group
            </summary>
            <value>The Name of the contact group. Required when creating a new contact  group</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.ContactGroupID">
            <summary>
            The Xero identifier for an contact group – specified as a string following the endpoint name. e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9
            </summary>
            <value>The Xero identifier for an contact group – specified as a string following the endpoint name. e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.Contacts">
            <summary>
            The ContactID and Name of Contacts in a contact group. Returned on GETs when the ContactGroupID is supplied in the URL.
            </summary>
            <value>The ContactID and Name of Contacts in a contact group. Returned on GETs when the ContactGroupID is supplied in the URL.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup)">
            <summary>
            Returns true if ContactGroup instances are equal
            </summary>
            <param name="input">Instance of ContactGroup to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroup.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroups">
            <summary>
            ContactGroups
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroups._ContactGroups">
            <summary>
            Gets or Sets _ContactGroups
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroups.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroups.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroups.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroups.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ContactGroups)">
            <summary>
            Returns true if ContactGroups instances are equal
            </summary>
            <param name="input">Instance of ContactGroups to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroups.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactGroups.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ContactPerson">
            <summary>
            ContactPerson
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ContactPerson.FirstName">
            <summary>
            First name of person
            </summary>
            <value>First name of person</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ContactPerson.LastName">
            <summary>
            Last name of person
            </summary>
            <value>Last name of person</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ContactPerson.EmailAddress">
            <summary>
            Email address of person
            </summary>
            <value>Email address of person</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ContactPerson.IncludeInEmails">
            <summary>
            boolean to indicate whether contact should be included on emails with invoices etc.
            </summary>
            <value>boolean to indicate whether contact should be included on emails with invoices etc.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactPerson.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactPerson.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactPerson.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactPerson.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ContactPerson)">
            <summary>
            Returns true if ContactPerson instances are equal
            </summary>
            <param name="input">Instance of ContactPerson to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactPerson.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ContactPerson.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Contacts">
            <summary>
            Contacts
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Contacts._Contacts">
            <summary>
            Gets or Sets _Contacts
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Contacts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Contacts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Contacts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Contacts.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Contacts)">
            <summary>
            Returns true if Contacts instances are equal
            </summary>
            <param name="input">Instance of Contacts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Contacts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Contacts.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ConversionBalances">
            <summary>
            Balance supplied for each account that has a value as at the conversion date.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ConversionBalances.AccountCode">
            <summary>
            The account code for a account
            </summary>
            <value>The account code for a account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ConversionBalances.Balance">
            <summary>
            The opening balances of the account. Debits are positive, credits are negative values
            </summary>
            <value>The opening balances of the account. Debits are positive, credits are negative values</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ConversionBalances.BalanceDetails">
            <summary>
            Gets or Sets BalanceDetails
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ConversionBalances.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ConversionBalances.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ConversionBalances.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ConversionBalances.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ConversionBalances)">
            <summary>
            Returns true if ConversionBalances instances are equal
            </summary>
            <param name="input">Instance of ConversionBalances to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ConversionBalances.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ConversionBalances.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ConversionDate">
            <summary>
            The date when the organisation starts using Xero
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ConversionDate.Month">
            <summary>
            The month the organisation starts using Xero. Value is an integer between 1 and 12
            </summary>
            <value>The month the organisation starts using Xero. Value is an integer between 1 and 12</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ConversionDate.Year">
            <summary>
            The year the organisation starts using Xero. Value is an integer greater than 2006
            </summary>
            <value>The year the organisation starts using Xero. Value is an integer greater than 2006</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ConversionDate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ConversionDate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ConversionDate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ConversionDate.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ConversionDate)">
            <summary>
            Returns true if ConversionDate instances are equal
            </summary>
            <param name="input">Instance of ConversionDate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ConversionDate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ConversionDate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode">
            <summary>
            Defines CountryCode
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AD">
            <summary>
            Enum AD for value: AD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AE">
            <summary>
            Enum AE for value: AE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AF">
            <summary>
            Enum AF for value: AF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AG">
            <summary>
            Enum AG for value: AG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AI">
            <summary>
            Enum AI for value: AI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AL">
            <summary>
            Enum AL for value: AL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AM">
            <summary>
            Enum AM for value: AM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AN">
            <summary>
            Enum AN for value: AN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AO">
            <summary>
            Enum AO for value: AO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AQ">
            <summary>
            Enum AQ for value: AQ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AR">
            <summary>
            Enum AR for value: AR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AS">
            <summary>
            Enum AS for value: AS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AT">
            <summary>
            Enum AT for value: AT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AU">
            <summary>
            Enum AU for value: AU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AW">
            <summary>
            Enum AW for value: AW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.AZ">
            <summary>
            Enum AZ for value: AZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BA">
            <summary>
            Enum BA for value: BA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BB">
            <summary>
            Enum BB for value: BB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BD">
            <summary>
            Enum BD for value: BD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BE">
            <summary>
            Enum BE for value: BE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BF">
            <summary>
            Enum BF for value: BF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BG">
            <summary>
            Enum BG for value: BG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BH">
            <summary>
            Enum BH for value: BH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BI">
            <summary>
            Enum BI for value: BI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BJ">
            <summary>
            Enum BJ for value: BJ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BL">
            <summary>
            Enum BL for value: BL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BM">
            <summary>
            Enum BM for value: BM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BN">
            <summary>
            Enum BN for value: BN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BO">
            <summary>
            Enum BO for value: BO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BR">
            <summary>
            Enum BR for value: BR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BS">
            <summary>
            Enum BS for value: BS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BT">
            <summary>
            Enum BT for value: BT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BW">
            <summary>
            Enum BW for value: BW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BY">
            <summary>
            Enum BY for value: BY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.BZ">
            <summary>
            Enum BZ for value: BZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CA">
            <summary>
            Enum CA for value: CA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CC">
            <summary>
            Enum CC for value: CC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CD">
            <summary>
            Enum CD for value: CD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CF">
            <summary>
            Enum CF for value: CF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CG">
            <summary>
            Enum CG for value: CG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CH">
            <summary>
            Enum CH for value: CH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CI">
            <summary>
            Enum CI for value: CI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CK">
            <summary>
            Enum CK for value: CK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CL">
            <summary>
            Enum CL for value: CL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CM">
            <summary>
            Enum CM for value: CM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CN">
            <summary>
            Enum CN for value: CN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CO">
            <summary>
            Enum CO for value: CO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CR">
            <summary>
            Enum CR for value: CR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CU">
            <summary>
            Enum CU for value: CU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CV">
            <summary>
            Enum CV for value: CV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CW">
            <summary>
            Enum CW for value: CW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CX">
            <summary>
            Enum CX for value: CX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CY">
            <summary>
            Enum CY for value: CY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.CZ">
            <summary>
            Enum CZ for value: CZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.DE">
            <summary>
            Enum DE for value: DE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.DJ">
            <summary>
            Enum DJ for value: DJ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.DK">
            <summary>
            Enum DK for value: DK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.DM">
            <summary>
            Enum DM for value: DM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.DO">
            <summary>
            Enum DO for value: DO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.DZ">
            <summary>
            Enum DZ for value: DZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.EC">
            <summary>
            Enum EC for value: EC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.EE">
            <summary>
            Enum EE for value: EE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.EG">
            <summary>
            Enum EG for value: EG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.EH">
            <summary>
            Enum EH for value: EH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.ER">
            <summary>
            Enum ER for value: ER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.ES">
            <summary>
            Enum ES for value: ES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.ET">
            <summary>
            Enum ET for value: ET
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.FI">
            <summary>
            Enum FI for value: FI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.FJ">
            <summary>
            Enum FJ for value: FJ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.FK">
            <summary>
            Enum FK for value: FK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.FM">
            <summary>
            Enum FM for value: FM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.FO">
            <summary>
            Enum FO for value: FO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.FR">
            <summary>
            Enum FR for value: FR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GA">
            <summary>
            Enum GA for value: GA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GB">
            <summary>
            Enum GB for value: GB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GD">
            <summary>
            Enum GD for value: GD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GE">
            <summary>
            Enum GE for value: GE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GG">
            <summary>
            Enum GG for value: GG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GH">
            <summary>
            Enum GH for value: GH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GI">
            <summary>
            Enum GI for value: GI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GL">
            <summary>
            Enum GL for value: GL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GM">
            <summary>
            Enum GM for value: GM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GN">
            <summary>
            Enum GN for value: GN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GQ">
            <summary>
            Enum GQ for value: GQ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GR">
            <summary>
            Enum GR for value: GR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GT">
            <summary>
            Enum GT for value: GT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GU">
            <summary>
            Enum GU for value: GU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GW">
            <summary>
            Enum GW for value: GW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.GY">
            <summary>
            Enum GY for value: GY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.HK">
            <summary>
            Enum HK for value: HK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.HN">
            <summary>
            Enum HN for value: HN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.HR">
            <summary>
            Enum HR for value: HR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.HT">
            <summary>
            Enum HT for value: HT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.HU">
            <summary>
            Enum HU for value: HU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.ID">
            <summary>
            Enum ID for value: ID
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.IE">
            <summary>
            Enum IE for value: IE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.IL">
            <summary>
            Enum IL for value: IL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.IM">
            <summary>
            Enum IM for value: IM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.IN">
            <summary>
            Enum IN for value: IN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.IO">
            <summary>
            Enum IO for value: IO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.IQ">
            <summary>
            Enum IQ for value: IQ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.IR">
            <summary>
            Enum IR for value: IR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.IS">
            <summary>
            Enum IS for value: IS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.IT">
            <summary>
            Enum IT for value: IT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.JE">
            <summary>
            Enum JE for value: JE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.JM">
            <summary>
            Enum JM for value: JM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.JO">
            <summary>
            Enum JO for value: JO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.JP">
            <summary>
            Enum JP for value: JP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.KE">
            <summary>
            Enum KE for value: KE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.KG">
            <summary>
            Enum KG for value: KG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.KH">
            <summary>
            Enum KH for value: KH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.KI">
            <summary>
            Enum KI for value: KI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.KM">
            <summary>
            Enum KM for value: KM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.KN">
            <summary>
            Enum KN for value: KN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.KP">
            <summary>
            Enum KP for value: KP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.KR">
            <summary>
            Enum KR for value: KR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.KW">
            <summary>
            Enum KW for value: KW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.KY">
            <summary>
            Enum KY for value: KY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.KZ">
            <summary>
            Enum KZ for value: KZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.LA">
            <summary>
            Enum LA for value: LA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.LB">
            <summary>
            Enum LB for value: LB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.LC">
            <summary>
            Enum LC for value: LC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.LI">
            <summary>
            Enum LI for value: LI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.LK">
            <summary>
            Enum LK for value: LK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.LR">
            <summary>
            Enum LR for value: LR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.LS">
            <summary>
            Enum LS for value: LS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.LT">
            <summary>
            Enum LT for value: LT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.LU">
            <summary>
            Enum LU for value: LU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.LV">
            <summary>
            Enum LV for value: LV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.LY">
            <summary>
            Enum LY for value: LY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MA">
            <summary>
            Enum MA for value: MA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MC">
            <summary>
            Enum MC for value: MC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MD">
            <summary>
            Enum MD for value: MD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.ME">
            <summary>
            Enum ME for value: ME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MF">
            <summary>
            Enum MF for value: MF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MG">
            <summary>
            Enum MG for value: MG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MH">
            <summary>
            Enum MH for value: MH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MK">
            <summary>
            Enum MK for value: MK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.ML">
            <summary>
            Enum ML for value: ML
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MM">
            <summary>
            Enum MM for value: MM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MN">
            <summary>
            Enum MN for value: MN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MO">
            <summary>
            Enum MO for value: MO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MP">
            <summary>
            Enum MP for value: MP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MR">
            <summary>
            Enum MR for value: MR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MS">
            <summary>
            Enum MS for value: MS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MT">
            <summary>
            Enum MT for value: MT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MU">
            <summary>
            Enum MU for value: MU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MV">
            <summary>
            Enum MV for value: MV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MW">
            <summary>
            Enum MW for value: MW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MX">
            <summary>
            Enum MX for value: MX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MY">
            <summary>
            Enum MY for value: MY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.MZ">
            <summary>
            Enum MZ for value: MZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.NA">
            <summary>
            Enum NA for value: NA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.NC">
            <summary>
            Enum NC for value: NC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.NE">
            <summary>
            Enum NE for value: NE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.NG">
            <summary>
            Enum NG for value: NG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.NI">
            <summary>
            Enum NI for value: NI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.NL">
            <summary>
            Enum NL for value: NL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.NO">
            <summary>
            Enum NO for value: NO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.NP">
            <summary>
            Enum NP for value: NP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.NR">
            <summary>
            Enum NR for value: NR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.NU">
            <summary>
            Enum NU for value: NU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.NZ">
            <summary>
            Enum NZ for value: NZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.OM">
            <summary>
            Enum OM for value: OM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PA">
            <summary>
            Enum PA for value: PA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PE">
            <summary>
            Enum PE for value: PE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PF">
            <summary>
            Enum PF for value: PF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PG">
            <summary>
            Enum PG for value: PG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PH">
            <summary>
            Enum PH for value: PH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PK">
            <summary>
            Enum PK for value: PK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PL">
            <summary>
            Enum PL for value: PL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PM">
            <summary>
            Enum PM for value: PM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PN">
            <summary>
            Enum PN for value: PN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PR">
            <summary>
            Enum PR for value: PR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PS">
            <summary>
            Enum PS for value: PS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PT">
            <summary>
            Enum PT for value: PT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PW">
            <summary>
            Enum PW for value: PW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.PY">
            <summary>
            Enum PY for value: PY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.QA">
            <summary>
            Enum QA for value: QA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.RE">
            <summary>
            Enum RE for value: RE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.RO">
            <summary>
            Enum RO for value: RO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.RS">
            <summary>
            Enum RS for value: RS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.RU">
            <summary>
            Enum RU for value: RU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.RW">
            <summary>
            Enum RW for value: RW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SA">
            <summary>
            Enum SA for value: SA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SB">
            <summary>
            Enum SB for value: SB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SC">
            <summary>
            Enum SC for value: SC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SD">
            <summary>
            Enum SD for value: SD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SE">
            <summary>
            Enum SE for value: SE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SG">
            <summary>
            Enum SG for value: SG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SH">
            <summary>
            Enum SH for value: SH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SI">
            <summary>
            Enum SI for value: SI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SJ">
            <summary>
            Enum SJ for value: SJ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SK">
            <summary>
            Enum SK for value: SK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SL">
            <summary>
            Enum SL for value: SL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SM">
            <summary>
            Enum SM for value: SM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SN">
            <summary>
            Enum SN for value: SN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SO">
            <summary>
            Enum SO for value: SO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SR">
            <summary>
            Enum SR for value: SR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SS">
            <summary>
            Enum SS for value: SS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.ST">
            <summary>
            Enum ST for value: ST
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SV">
            <summary>
            Enum SV for value: SV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SX">
            <summary>
            Enum SX for value: SX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SY">
            <summary>
            Enum SY for value: SY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.SZ">
            <summary>
            Enum SZ for value: SZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TC">
            <summary>
            Enum TC for value: TC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TD">
            <summary>
            Enum TD for value: TD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TG">
            <summary>
            Enum TG for value: TG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TH">
            <summary>
            Enum TH for value: TH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TJ">
            <summary>
            Enum TJ for value: TJ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TK">
            <summary>
            Enum TK for value: TK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TL">
            <summary>
            Enum TL for value: TL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TM">
            <summary>
            Enum TM for value: TM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TN">
            <summary>
            Enum TN for value: TN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TO">
            <summary>
            Enum TO for value: TO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TR">
            <summary>
            Enum TR for value: TR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TT">
            <summary>
            Enum TT for value: TT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TV">
            <summary>
            Enum TV for value: TV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TW">
            <summary>
            Enum TW for value: TW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.TZ">
            <summary>
            Enum TZ for value: TZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.UA">
            <summary>
            Enum UA for value: UA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.UG">
            <summary>
            Enum UG for value: UG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.US">
            <summary>
            Enum US for value: US
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.UY">
            <summary>
            Enum UY for value: UY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.UZ">
            <summary>
            Enum UZ for value: UZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.VA">
            <summary>
            Enum VA for value: VA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.VC">
            <summary>
            Enum VC for value: VC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.VE">
            <summary>
            Enum VE for value: VE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.VG">
            <summary>
            Enum VG for value: VG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.VI">
            <summary>
            Enum VI for value: VI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.VN">
            <summary>
            Enum VN for value: VN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.VU">
            <summary>
            Enum VU for value: VU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.WF">
            <summary>
            Enum WF for value: WF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.WS">
            <summary>
            Enum WS for value: WS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.XK">
            <summary>
            Enum XK for value: XK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.YE">
            <summary>
            Enum YE for value: YE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.YT">
            <summary>
            Enum YT for value: YT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.ZA">
            <summary>
            Enum ZA for value: ZA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.ZM">
            <summary>
            Enum ZM for value: ZM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CountryCode.ZW">
            <summary>
            Enum ZW for value: ZW
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote">
            <summary>
            CreditNote
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.TypeEnum">
            <summary>
            See Credit Note Types
            </summary>
            <value>See Credit Note Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.TypeEnum.ACCPAYCREDIT">
            <summary>
            Enum ACCPAYCREDIT for value: ACCPAYCREDIT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.TypeEnum.ACCRECCREDIT">
            <summary>
            Enum ACCRECCREDIT for value: ACCRECCREDIT
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.Type">
            <summary>
            See Credit Note Types
            </summary>
            <value>See Credit Note Types</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.StatusEnum">
            <summary>
            See Credit Note Status Codes
            </summary>
            <value>See Credit Note Status Codes</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.StatusEnum.DRAFT">
            <summary>
            Enum DRAFT for value: DRAFT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.StatusEnum.SUBMITTED">
            <summary>
            Enum SUBMITTED for value: SUBMITTED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.StatusEnum.AUTHORISED">
            <summary>
            Enum AUTHORISED for value: AUTHORISED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.StatusEnum.PAID">
            <summary>
            Enum PAID for value: PAID
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.StatusEnum.VOIDED">
            <summary>
            Enum VOIDED for value: VOIDED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.Status">
            <summary>
            See Credit Note Status Codes
            </summary>
            <value>See Credit Note Status Codes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.LineAmountTypes">
            <summary>
            Gets or Sets LineAmountTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.CurrencyCode">
            <summary>
            Gets or Sets CurrencyCode
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.Date">
            <summary>
            The date the credit note is issued YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
            </summary>
            <value>The date the credit note is issued YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.DueDate">
            <summary>
            Date invoice is due – YYYY-MM-DD
            </summary>
            <value>Date invoice is due – YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.LineItems">
            <summary>
            See Invoice Line Items
            </summary>
            <value>See Invoice Line Items</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.SubTotal">
            <summary>
            The subtotal of the credit note excluding taxes
            </summary>
            <value>The subtotal of the credit note excluding taxes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.TotalTax">
            <summary>
            The total tax on the credit note
            </summary>
            <value>The total tax on the credit note</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.Total">
            <summary>
            The total of the Credit Note(subtotal + total tax)
            </summary>
            <value>The total of the Credit Note(subtotal + total tax)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.CISDeduction">
            <summary>
            CIS deduction for UK contractors
            </summary>
            <value>CIS deduction for UK contractors</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.CISRate">
            <summary>
            CIS Deduction rate for the organisation
            </summary>
            <value>CIS Deduction rate for the organisation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to the credit note
            </summary>
            <value>UTC timestamp of last update to the credit note</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.FullyPaidOnDate">
            <summary>
            Date when credit note was fully paid(UTC format)
            </summary>
            <value>Date when credit note was fully paid(UTC format)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.CreditNoteID">
            <summary>
            Xero generated unique identifier
            </summary>
            <value>Xero generated unique identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.CreditNoteNumber">
            <summary>
            ACCRECCREDIT – Unique alpha numeric code identifying credit note (when missing will auto-generate from your Organisation Invoice Settings)
            </summary>
            <value>ACCRECCREDIT – Unique alpha numeric code identifying credit note (when missing will auto-generate from your Organisation Invoice Settings)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.Reference">
            <summary>
            ACCRECCREDIT only – additional reference number
            </summary>
            <value>ACCRECCREDIT only – additional reference number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.SentToContact">
            <summary>
            boolean to indicate if a credit note has been sent to a contact via  the Xero app (currently read only)
            </summary>
            <value>boolean to indicate if a credit note has been sent to a contact via  the Xero app (currently read only)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.CurrencyRate">
            <summary>
            The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used
            </summary>
            <value>The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.RemainingCredit">
            <summary>
            The remaining credit balance on the Credit Note
            </summary>
            <value>The remaining credit balance on the Credit Note</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.Allocations">
            <summary>
            See Allocations
            </summary>
            <value>See Allocations</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.AppliedAmount">
            <summary>
            The amount of applied to an invoice
            </summary>
            <value>The amount of applied to an invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.Payments">
            <summary>
            See Payments
            </summary>
            <value>See Payments</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.BrandingThemeID">
            <summary>
            See BrandingThemes
            </summary>
            <value>See BrandingThemes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.StatusAttributeString">
            <summary>
            A string to indicate if a invoice status
            </summary>
            <value>A string to indicate if a invoice status</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.HasAttachments">
            <summary>
            boolean to indicate if a credit note has an attachment
            </summary>
            <value>boolean to indicate if a credit note has an attachment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.HasErrors">
            <summary>
            A boolean to indicate if a credit note has an validation errors
            </summary>
            <value>A boolean to indicate if a credit note has an validation errors</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.Warnings">
            <summary>
            Displays array of warning messages from the API
            </summary>
            <value>Displays array of warning messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.Equals(Xero.NetStandard.OAuth2.Model.Accounting.CreditNote)">
            <summary>
            Returns true if CreditNote instances are equal
            </summary>
            <param name="input">Instance of CreditNote to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CreditNote.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.CreditNotes">
            <summary>
            CreditNotes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.CreditNotes._CreditNotes">
            <summary>
            Gets or Sets _CreditNotes
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CreditNotes.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CreditNotes.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CreditNotes.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CreditNotes.Equals(Xero.NetStandard.OAuth2.Model.Accounting.CreditNotes)">
            <summary>
            Returns true if CreditNotes instances are equal
            </summary>
            <param name="input">Instance of CreditNotes to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CreditNotes.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.CreditNotes.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Currencies">
            <summary>
            Currencies
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Currencies._Currencies">
            <summary>
            Gets or Sets _Currencies
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Currencies.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Currencies.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Currencies.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Currencies.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Currencies)">
            <summary>
            Returns true if Currencies instances are equal
            </summary>
            <param name="input">Instance of Currencies to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Currencies.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Currencies.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Currency">
            <summary>
            Currency
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Currency.Code">
            <summary>
            Gets or Sets Code
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Currency.Description">
            <summary>
            Name of Currency
            </summary>
            <value>Name of Currency</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Currency.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Currency.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Currency.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Currency.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Currency)">
            <summary>
            Returns true if Currency instances are equal
            </summary>
            <param name="input">Instance of Currency to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Currency.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Currency.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode">
            <summary>
            3 letter alpha code for the currency – see list of currency codes
            </summary>
            <value>3 letter alpha code for the currency – see list of currency codes</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.AED">
            <summary>
            Enum AED for value: AED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.AFN">
            <summary>
            Enum AFN for value: AFN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.ALL">
            <summary>
            Enum ALL for value: ALL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.AMD">
            <summary>
            Enum AMD for value: AMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.ANG">
            <summary>
            Enum ANG for value: ANG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.AOA">
            <summary>
            Enum AOA for value: AOA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.ARS">
            <summary>
            Enum ARS for value: ARS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.AUD">
            <summary>
            Enum AUD for value: AUD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.AWG">
            <summary>
            Enum AWG for value: AWG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.AZN">
            <summary>
            Enum AZN for value: AZN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BAM">
            <summary>
            Enum BAM for value: BAM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BBD">
            <summary>
            Enum BBD for value: BBD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BDT">
            <summary>
            Enum BDT for value: BDT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BGN">
            <summary>
            Enum BGN for value: BGN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BHD">
            <summary>
            Enum BHD for value: BHD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BIF">
            <summary>
            Enum BIF for value: BIF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BMD">
            <summary>
            Enum BMD for value: BMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BND">
            <summary>
            Enum BND for value: BND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BOB">
            <summary>
            Enum BOB for value: BOB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BRL">
            <summary>
            Enum BRL for value: BRL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BSD">
            <summary>
            Enum BSD for value: BSD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BTN">
            <summary>
            Enum BTN for value: BTN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BWP">
            <summary>
            Enum BWP for value: BWP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BYN">
            <summary>
            Enum BYN for value: BYN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BYR">
            <summary>
            Enum BYR for value: BYR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.BZD">
            <summary>
            Enum BZD for value: BZD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.CAD">
            <summary>
            Enum CAD for value: CAD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.CDF">
            <summary>
            Enum CDF for value: CDF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.CHF">
            <summary>
            Enum CHF for value: CHF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.CLP">
            <summary>
            Enum CLP for value: CLP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.CNY">
            <summary>
            Enum CNY for value: CNY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.COP">
            <summary>
            Enum COP for value: COP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.CRC">
            <summary>
            Enum CRC for value: CRC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.CUC">
            <summary>
            Enum CUC for value: CUC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.CUP">
            <summary>
            Enum CUP for value: CUP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.CVE">
            <summary>
            Enum CVE for value: CVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.CZK">
            <summary>
            Enum CZK for value: CZK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.DJF">
            <summary>
            Enum DJF for value: DJF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.DKK">
            <summary>
            Enum DKK for value: DKK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.DOP">
            <summary>
            Enum DOP for value: DOP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.DZD">
            <summary>
            Enum DZD for value: DZD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.EGP">
            <summary>
            Enum EGP for value: EGP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.ERN">
            <summary>
            Enum ERN for value: ERN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.ETB">
            <summary>
            Enum ETB for value: ETB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.EUR">
            <summary>
            Enum EUR for value: EUR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.FJD">
            <summary>
            Enum FJD for value: FJD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.FKP">
            <summary>
            Enum FKP for value: FKP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.GBP">
            <summary>
            Enum GBP for value: GBP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.GEL">
            <summary>
            Enum GEL for value: GEL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.GGP">
            <summary>
            Enum GGP for value: GGP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.GHS">
            <summary>
            Enum GHS for value: GHS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.GIP">
            <summary>
            Enum GIP for value: GIP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.GMD">
            <summary>
            Enum GMD for value: GMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.GNF">
            <summary>
            Enum GNF for value: GNF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.GTQ">
            <summary>
            Enum GTQ for value: GTQ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.GYD">
            <summary>
            Enum GYD for value: GYD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.HKD">
            <summary>
            Enum HKD for value: HKD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.HNL">
            <summary>
            Enum HNL for value: HNL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.HRK">
            <summary>
            Enum HRK for value: HRK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.HTG">
            <summary>
            Enum HTG for value: HTG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.HUF">
            <summary>
            Enum HUF for value: HUF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.IDR">
            <summary>
            Enum IDR for value: IDR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.ILS">
            <summary>
            Enum ILS for value: ILS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.IMP">
            <summary>
            Enum IMP for value: IMP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.INR">
            <summary>
            Enum INR for value: INR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.IQD">
            <summary>
            Enum IQD for value: IQD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.IRR">
            <summary>
            Enum IRR for value: IRR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.ISK">
            <summary>
            Enum ISK for value: ISK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.JEP">
            <summary>
            Enum JEP for value: JEP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.JMD">
            <summary>
            Enum JMD for value: JMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.JOD">
            <summary>
            Enum JOD for value: JOD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.JPY">
            <summary>
            Enum JPY for value: JPY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.KES">
            <summary>
            Enum KES for value: KES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.KGS">
            <summary>
            Enum KGS for value: KGS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.KHR">
            <summary>
            Enum KHR for value: KHR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.KMF">
            <summary>
            Enum KMF for value: KMF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.KPW">
            <summary>
            Enum KPW for value: KPW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.KRW">
            <summary>
            Enum KRW for value: KRW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.KWD">
            <summary>
            Enum KWD for value: KWD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.KYD">
            <summary>
            Enum KYD for value: KYD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.KZT">
            <summary>
            Enum KZT for value: KZT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.LAK">
            <summary>
            Enum LAK for value: LAK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.LBP">
            <summary>
            Enum LBP for value: LBP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.LKR">
            <summary>
            Enum LKR for value: LKR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.LRD">
            <summary>
            Enum LRD for value: LRD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.LSL">
            <summary>
            Enum LSL for value: LSL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.LTL">
            <summary>
            Enum LTL for value: LTL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.LYD">
            <summary>
            Enum LYD for value: LYD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MAD">
            <summary>
            Enum MAD for value: MAD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MDL">
            <summary>
            Enum MDL for value: MDL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MGA">
            <summary>
            Enum MGA for value: MGA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MKD">
            <summary>
            Enum MKD for value: MKD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MMK">
            <summary>
            Enum MMK for value: MMK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MNT">
            <summary>
            Enum MNT for value: MNT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MOP">
            <summary>
            Enum MOP for value: MOP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MRU">
            <summary>
            Enum MRU for value: MRU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MUR">
            <summary>
            Enum MUR for value: MUR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MVR">
            <summary>
            Enum MVR for value: MVR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MWK">
            <summary>
            Enum MWK for value: MWK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MXN">
            <summary>
            Enum MXN for value: MXN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MYR">
            <summary>
            Enum MYR for value: MYR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.MZN">
            <summary>
            Enum MZN for value: MZN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.NAD">
            <summary>
            Enum NAD for value: NAD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.NGN">
            <summary>
            Enum NGN for value: NGN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.NIO">
            <summary>
            Enum NIO for value: NIO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.NOK">
            <summary>
            Enum NOK for value: NOK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.NPR">
            <summary>
            Enum NPR for value: NPR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.NZD">
            <summary>
            Enum NZD for value: NZD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.OMR">
            <summary>
            Enum OMR for value: OMR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.PAB">
            <summary>
            Enum PAB for value: PAB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.PEN">
            <summary>
            Enum PEN for value: PEN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.PGK">
            <summary>
            Enum PGK for value: PGK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.PHP">
            <summary>
            Enum PHP for value: PHP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.PKR">
            <summary>
            Enum PKR for value: PKR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.PLN">
            <summary>
            Enum PLN for value: PLN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.PYG">
            <summary>
            Enum PYG for value: PYG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.QAR">
            <summary>
            Enum QAR for value: QAR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.RON">
            <summary>
            Enum RON for value: RON
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.RSD">
            <summary>
            Enum RSD for value: RSD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.RUB">
            <summary>
            Enum RUB for value: RUB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.RWF">
            <summary>
            Enum RWF for value: RWF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SAR">
            <summary>
            Enum SAR for value: SAR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SBD">
            <summary>
            Enum SBD for value: SBD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SCR">
            <summary>
            Enum SCR for value: SCR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SDG">
            <summary>
            Enum SDG for value: SDG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SEK">
            <summary>
            Enum SEK for value: SEK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SGD">
            <summary>
            Enum SGD for value: SGD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SHP">
            <summary>
            Enum SHP for value: SHP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SLL">
            <summary>
            Enum SLL for value: SLL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SOS">
            <summary>
            Enum SOS for value: SOS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SPL">
            <summary>
            Enum SPL for value: SPL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SRD">
            <summary>
            Enum SRD for value: SRD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.STN">
            <summary>
            Enum STN for value: STN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SVC">
            <summary>
            Enum SVC for value: SVC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SYP">
            <summary>
            Enum SYP for value: SYP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.SZL">
            <summary>
            Enum SZL for value: SZL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.THB">
            <summary>
            Enum THB for value: THB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.TJS">
            <summary>
            Enum TJS for value: TJS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.TMT">
            <summary>
            Enum TMT for value: TMT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.TND">
            <summary>
            Enum TND for value: TND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.TOP">
            <summary>
            Enum TOP for value: TOP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.TRY_LIRA">
            <summary>
            Enum TRY_LIRA for value: TRY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.TTD">
            <summary>
            Enum TTD for value: TTD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.TVD">
            <summary>
            Enum TVD for value: TVD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.TWD">
            <summary>
            Enum TWD for value: TWD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.TZS">
            <summary>
            Enum TZS for value: TZS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.UAH">
            <summary>
            Enum UAH for value: UAH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.UGX">
            <summary>
            Enum UGX for value: UGX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.USD">
            <summary>
            Enum USD for value: USD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.UYU">
            <summary>
            Enum UYU for value: UYU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.UZS">
            <summary>
            Enum UZS for value: UZS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.VEF">
            <summary>
            Enum VEF for value: VEF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.VND">
            <summary>
            Enum VND for value: VND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.VUV">
            <summary>
            Enum VUV for value: VUV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.WST">
            <summary>
            Enum WST for value: WST
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.XAF">
            <summary>
            Enum XAF for value: XAF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.XCD">
            <summary>
            Enum XCD for value: XCD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.XDR">
            <summary>
            Enum XDR for value: XDR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.XOF">
            <summary>
            Enum XOF for value: XOF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.XPF">
            <summary>
            Enum XPF for value: XPF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.YER">
            <summary>
            Enum YER for value: YER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.ZAR">
            <summary>
            Enum ZAR for value: ZAR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.ZMW">
            <summary>
            Enum ZMW for value: ZMW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.ZMK">
            <summary>
            Enum ZMK for value: ZMK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.ZWD">
            <summary>
            Enum ZWD for value: ZWD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.CurrencyCode.EMPTY_CURRENCY">
            <summary>
            Enum EMPTY_CURRENCY for value: 
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Element">
            <summary>
            Element
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Element.ValidationErrors">
            <summary>
            Array of Validation Error message
            </summary>
            <value>Array of Validation Error message</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Element.BatchPaymentID">
            <summary>
            Unique ID for batch payment object with validation error
            </summary>
            <value>Unique ID for batch payment object with validation error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Element.BankTransactionID">
            <summary>
            Gets or Sets BankTransactionID
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Element.CreditNoteID">
            <summary>
            Gets or Sets CreditNoteID
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Element.ContactID">
            <summary>
            Gets or Sets ContactID
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Element.InvoiceID">
            <summary>
            Gets or Sets InvoiceID
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Element.ItemID">
            <summary>
            Gets or Sets ItemID
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Element.PurchaseOrderID">
            <summary>
            Gets or Sets PurchaseOrderID
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Element.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Element.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Element.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Element.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Element)">
            <summary>
            Returns true if Element instances are equal
            </summary>
            <param name="input">Instance of Element to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Element.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Element.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Employee">
            <summary>
            Employee
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Employee.StatusEnum">
            <summary>
            Current status of an employee – see contact status types
            </summary>
            <value>Current status of an employee – see contact status types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Employee.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Employee.StatusEnum.ARCHIVED">
            <summary>
            Enum ARCHIVED for value: ARCHIVED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Employee.StatusEnum.GDPRREQUEST">
            <summary>
            Enum GDPRREQUEST for value: GDPRREQUEST
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Employee.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Employee.Status">
            <summary>
            Current status of an employee – see contact status types
            </summary>
            <value>Current status of an employee – see contact status types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Employee.EmployeeID">
            <summary>
            The Xero identifier for an employee e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
            </summary>
            <value>The Xero identifier for an employee e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Employee.FirstName">
            <summary>
            First name of an employee (max length &#x3D; 255)
            </summary>
            <value>First name of an employee (max length &#x3D; 255)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Employee.LastName">
            <summary>
            Last name of an employee (max length &#x3D; 255)
            </summary>
            <value>Last name of an employee (max length &#x3D; 255)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Employee.ExternalLink">
            <summary>
            Gets or Sets ExternalLink
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Employee.UpdatedDateUTC">
            <summary>
            Gets or Sets UpdatedDateUTC
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Employee.StatusAttributeString">
            <summary>
            A string to indicate if a invoice status
            </summary>
            <value>A string to indicate if a invoice status</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Employee.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Employee.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Employee.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Employee.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Employee.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Employee)">
            <summary>
            Returns true if Employee instances are equal
            </summary>
            <param name="input">Instance of Employee to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Employee.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Employee.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Employees">
            <summary>
            Employees
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Employees._Employees">
            <summary>
            Gets or Sets _Employees
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Employees.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Employees.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Employees.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Employees.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Employees)">
            <summary>
            Returns true if Employees instances are equal
            </summary>
            <param name="input">Instance of Employees to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Employees.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Employees.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Error.ErrorNumber">
            <summary>
            Exception number
            </summary>
            <value>Exception number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Error.Type">
            <summary>
            Exception type
            </summary>
            <value>Exception type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Error.Message">
            <summary>
            Exception message
            </summary>
            <value>Exception message</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Error.Elements">
            <summary>
            Array of Elements of validation Errors
            </summary>
            <value>Array of Elements of validation Errors</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Error.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Error.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Error.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Error.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Error)">
            <summary>
            Returns true if Error instances are equal
            </summary>
            <param name="input">Instance of Error to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Error.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Error.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim">
            <summary>
            ExpenseClaim
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.StatusEnum">
            <summary>
            Current status of an expense claim – see status types
            </summary>
            <value>Current status of an expense claim – see status types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.StatusEnum.SUBMITTED">
            <summary>
            Enum SUBMITTED for value: SUBMITTED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.StatusEnum.AUTHORISED">
            <summary>
            Enum AUTHORISED for value: AUTHORISED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.StatusEnum.PAID">
            <summary>
            Enum PAID for value: PAID
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.StatusEnum.VOIDED">
            <summary>
            Enum VOIDED for value: VOIDED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.Status">
            <summary>
            Current status of an expense claim – see status types
            </summary>
            <value>Current status of an expense claim – see status types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.ExpenseClaimID">
            <summary>
            Xero generated unique identifier for an expense claim
            </summary>
            <value>Xero generated unique identifier for an expense claim</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.Payments">
            <summary>
            See Payments
            </summary>
            <value>See Payments</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.User">
            <summary>
            Gets or Sets User
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.Receipts">
            <summary>
            Gets or Sets Receipts
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.UpdatedDateUTC">
            <summary>
            Last modified date UTC format
            </summary>
            <value>Last modified date UTC format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.Total">
            <summary>
            The total of an expense claim being paid
            </summary>
            <value>The total of an expense claim being paid</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.AmountDue">
            <summary>
            The amount due to be paid for an expense claim
            </summary>
            <value>The amount due to be paid for an expense claim</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.AmountPaid">
            <summary>
            The amount still to pay for an expense claim
            </summary>
            <value>The amount still to pay for an expense claim</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.PaymentDueDate">
            <summary>
            The date when the expense claim is due to be paid YYYY-MM-DD
            </summary>
            <value>The date when the expense claim is due to be paid YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.ReportingDate">
            <summary>
            The date the expense claim will be reported in Xero YYYY-MM-DD
            </summary>
            <value>The date the expense claim will be reported in Xero YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.ReceiptID">
            <summary>
            The Xero identifier for the Receipt e.g. e59a2c7f-1306-4078-a0f3-73537afcbba9
            </summary>
            <value>The Xero identifier for the Receipt e.g. e59a2c7f-1306-4078-a0f3-73537afcbba9</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim)">
            <summary>
            Returns true if ExpenseClaim instances are equal
            </summary>
            <param name="input">Instance of ExpenseClaim to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaim.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaims">
            <summary>
            ExpenseClaims
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaims._ExpenseClaims">
            <summary>
            Gets or Sets _ExpenseClaims
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaims.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaims.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaims.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaims.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaims)">
            <summary>
            Returns true if ExpenseClaims instances are equal
            </summary>
            <param name="input">Instance of ExpenseClaims to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaims.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExpenseClaims.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink">
            <summary>
            ExternalLink
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.LinkTypeEnum">
            <summary>
            See External link types
            </summary>
            <value>See External link types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.LinkTypeEnum.Facebook">
            <summary>
            Enum Facebook for value: Facebook
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.LinkTypeEnum.GooglePlus">
            <summary>
            Enum GooglePlus for value: GooglePlus
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.LinkTypeEnum.LinkedIn">
            <summary>
            Enum LinkedIn for value: LinkedIn
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.LinkTypeEnum.Twitter">
            <summary>
            Enum Twitter for value: Twitter
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.LinkTypeEnum.Website">
            <summary>
            Enum Website for value: Website
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.LinkType">
            <summary>
            See External link types
            </summary>
            <value>See External link types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.Url">
            <summary>
            URL for service e.g. http://twitter.com/xeroapi
            </summary>
            <value>URL for service e.g. http://twitter.com/xeroapi</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink)">
            <summary>
            Returns true if ExternalLink instances are equal
            </summary>
            <param name="input">Instance of ExternalLink to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ExternalLink.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecord">
            <summary>
            HistoryRecord
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecord.Details">
            <summary>
            details
            </summary>
            <value>details</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecord.Changes">
            <summary>
            Name of branding theme
            </summary>
            <value>Name of branding theme</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecord.User">
            <summary>
            has a value of 0
            </summary>
            <value>has a value of 0</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecord.DateUTC">
            <summary>
            UTC timestamp of creation date of branding theme
            </summary>
            <value>UTC timestamp of creation date of branding theme</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecord.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecord.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecord.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecord.Equals(Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecord)">
            <summary>
            Returns true if HistoryRecord instances are equal
            </summary>
            <param name="input">Instance of HistoryRecord to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecord.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecord.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecords">
            <summary>
            HistoryRecords
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecords._HistoryRecords">
            <summary>
            Gets or Sets _HistoryRecords
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecords.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecords.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecords.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecords.Equals(Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecords)">
            <summary>
            Returns true if HistoryRecords instances are equal
            </summary>
            <param name="input">Instance of HistoryRecords to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecords.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.HistoryRecords.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummary">
            <summary>
            A summary of the import from setup endpoint
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummary.Accounts">
            <summary>
            Gets or Sets Accounts
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummary.Organisation">
            <summary>
            Gets or Sets Organisation
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummary.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummary.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummary.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummary.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ImportSummary)">
            <summary>
            Returns true if ImportSummary instances are equal
            </summary>
            <param name="input">Instance of ImportSummary to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummary.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummary.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts">
            <summary>
            A summary of the accounts changes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.Total">
            <summary>
            The total number of accounts in the org
            </summary>
            <value>The total number of accounts in the org</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.New">
            <summary>
            The number of new accounts created
            </summary>
            <value>The number of new accounts created</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.Updated">
            <summary>
            The number of accounts updated
            </summary>
            <value>The number of accounts updated</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.Deleted">
            <summary>
            The number of accounts deleted
            </summary>
            <value>The number of accounts deleted</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.Locked">
            <summary>
            The number of locked accounts
            </summary>
            <value>The number of locked accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.System">
            <summary>
            The number of system accounts
            </summary>
            <value>The number of system accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.Errored">
            <summary>
            The number of accounts that had an error
            </summary>
            <value>The number of accounts that had an error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.Present">
            <summary>
            Gets or Sets Present
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.NewOrUpdated">
            <summary>
            The number of new or updated accounts
            </summary>
            <value>The number of new or updated accounts</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts)">
            <summary>
            Returns true if ImportSummaryAccounts instances are equal
            </summary>
            <param name="input">Instance of ImportSummaryAccounts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryAccounts.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryObject">
            <summary>
            ImportSummaryObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryObject.ImportSummary">
            <summary>
            Gets or Sets ImportSummary
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryObject.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryObject)">
            <summary>
            Returns true if ImportSummaryObject instances are equal
            </summary>
            <param name="input">Instance of ImportSummaryObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryOrganisation">
            <summary>
            ImportSummaryOrganisation
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryOrganisation.Present">
            <summary>
            Gets or Sets Present
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryOrganisation.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryOrganisation.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryOrganisation.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryOrganisation.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryOrganisation)">
            <summary>
            Returns true if ImportSummaryOrganisation instances are equal
            </summary>
            <param name="input">Instance of ImportSummaryOrganisation to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryOrganisation.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ImportSummaryOrganisation.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Invoice">
            <summary>
            Invoice
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.TypeEnum">
            <summary>
            See Invoice Types
            </summary>
            <value>See Invoice Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.TypeEnum.ACCPAY">
            <summary>
            Enum ACCPAY for value: ACCPAY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.TypeEnum.ACCPAYCREDIT">
            <summary>
            Enum ACCPAYCREDIT for value: ACCPAYCREDIT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.TypeEnum.APOVERPAYMENT">
            <summary>
            Enum APOVERPAYMENT for value: APOVERPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.TypeEnum.APPREPAYMENT">
            <summary>
            Enum APPREPAYMENT for value: APPREPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.TypeEnum.ACCREC">
            <summary>
            Enum ACCREC for value: ACCREC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.TypeEnum.ACCRECCREDIT">
            <summary>
            Enum ACCRECCREDIT for value: ACCRECCREDIT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.TypeEnum.AROVERPAYMENT">
            <summary>
            Enum AROVERPAYMENT for value: AROVERPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.TypeEnum.ARPREPAYMENT">
            <summary>
            Enum ARPREPAYMENT for value: ARPREPAYMENT
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Type">
            <summary>
            See Invoice Types
            </summary>
            <value>See Invoice Types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.LineAmountTypes">
            <summary>
            Gets or Sets LineAmountTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.CurrencyCode">
            <summary>
            Gets or Sets CurrencyCode
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.StatusEnum">
            <summary>
            See Invoice Status Codes
            </summary>
            <value>See Invoice Status Codes</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.StatusEnum.DRAFT">
            <summary>
            Enum DRAFT for value: DRAFT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.StatusEnum.SUBMITTED">
            <summary>
            Enum SUBMITTED for value: SUBMITTED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.StatusEnum.AUTHORISED">
            <summary>
            Enum AUTHORISED for value: AUTHORISED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.StatusEnum.PAID">
            <summary>
            Enum PAID for value: PAID
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.StatusEnum.VOIDED">
            <summary>
            Enum VOIDED for value: VOIDED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Status">
            <summary>
            See Invoice Status Codes
            </summary>
            <value>See Invoice Status Codes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.LineItems">
            <summary>
            See LineItems
            </summary>
            <value>See LineItems</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Date">
            <summary>
            Date invoice was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
            </summary>
            <value>Date invoice was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.DueDate">
            <summary>
            Date invoice is due – YYYY-MM-DD
            </summary>
            <value>Date invoice is due – YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.InvoiceNumber">
            <summary>
            ACCREC – Unique alpha numeric code identifying invoice (when missing will auto-generate from your Organisation Invoice Settings) (max length &#x3D; 255)
            </summary>
            <value>ACCREC – Unique alpha numeric code identifying invoice (when missing will auto-generate from your Organisation Invoice Settings) (max length &#x3D; 255)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Reference">
            <summary>
            ACCREC only – additional reference number
            </summary>
            <value>ACCREC only – additional reference number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.BrandingThemeID">
            <summary>
            See BrandingThemes
            </summary>
            <value>See BrandingThemes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Url">
            <summary>
            URL link to a source document – shown as “Go to [appName]” in the Xero app
            </summary>
            <value>URL link to a source document – shown as “Go to [appName]” in the Xero app</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.CurrencyRate">
            <summary>
            The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used. (max length &#x3D; [18].[6])
            </summary>
            <value>The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used. (max length &#x3D; [18].[6])</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.SentToContact">
            <summary>
            Boolean to set whether the invoice in the Xero app should be marked as “sent”. This can be set only on invoices that have been approved
            </summary>
            <value>Boolean to set whether the invoice in the Xero app should be marked as “sent”. This can be set only on invoices that have been approved</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.ExpectedPaymentDate">
            <summary>
            Shown on sales invoices (Accounts Receivable) when this has been set
            </summary>
            <value>Shown on sales invoices (Accounts Receivable) when this has been set</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.PlannedPaymentDate">
            <summary>
            Shown on bills (Accounts Payable) when this has been set
            </summary>
            <value>Shown on bills (Accounts Payable) when this has been set</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.CISDeduction">
            <summary>
            CIS deduction for UK contractors
            </summary>
            <value>CIS deduction for UK contractors</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.CISRate">
            <summary>
            CIS Deduction rate for the organisation
            </summary>
            <value>CIS Deduction rate for the organisation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.SubTotal">
            <summary>
            Total of invoice excluding taxes
            </summary>
            <value>Total of invoice excluding taxes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.TotalTax">
            <summary>
            Total tax on invoice
            </summary>
            <value>Total tax on invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Total">
            <summary>
            Total of Invoice tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
            </summary>
            <value>Total of Invoice tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.TotalDiscount">
            <summary>
            Total of discounts applied on the invoice line items
            </summary>
            <value>Total of discounts applied on the invoice line items</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.InvoiceID">
            <summary>
            Xero generated unique identifier for invoice
            </summary>
            <value>Xero generated unique identifier for invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.RepeatingInvoiceID">
            <summary>
            Xero generated unique identifier for repeating invoices
            </summary>
            <value>Xero generated unique identifier for repeating invoices</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.HasAttachments">
            <summary>
            boolean to indicate if an invoice has an attachment
            </summary>
            <value>boolean to indicate if an invoice has an attachment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.IsDiscounted">
            <summary>
            boolean to indicate if an invoice has a discount
            </summary>
            <value>boolean to indicate if an invoice has a discount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Payments">
            <summary>
            See Payments
            </summary>
            <value>See Payments</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Prepayments">
            <summary>
            See Prepayments
            </summary>
            <value>See Prepayments</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Overpayments">
            <summary>
            See Overpayments
            </summary>
            <value>See Overpayments</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.AmountDue">
            <summary>
            Amount remaining to be paid on invoice
            </summary>
            <value>Amount remaining to be paid on invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.AmountPaid">
            <summary>
            Sum of payments received for invoice
            </summary>
            <value>Sum of payments received for invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.FullyPaidOnDate">
            <summary>
            The date the invoice was fully paid. Only returned on fully paid invoices
            </summary>
            <value>The date the invoice was fully paid. Only returned on fully paid invoices</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.AmountCredited">
            <summary>
            Sum of all credit notes, over-payments and pre-payments applied to invoice
            </summary>
            <value>Sum of all credit notes, over-payments and pre-payments applied to invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.UpdatedDateUTC">
            <summary>
            Last modified date UTC format
            </summary>
            <value>Last modified date UTC format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.CreditNotes">
            <summary>
            Details of credit notes that have been applied to an invoice
            </summary>
            <value>Details of credit notes that have been applied to an invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Attachments">
            <summary>
            Displays array of attachments from the API
            </summary>
            <value>Displays array of attachments from the API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.HasErrors">
            <summary>
            A boolean to indicate if a invoice has an validation errors
            </summary>
            <value>A boolean to indicate if a invoice has an validation errors</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.StatusAttributeString">
            <summary>
            A string to indicate if a invoice status
            </summary>
            <value>A string to indicate if a invoice status</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Warnings">
            <summary>
            Displays array of warning messages from the API
            </summary>
            <value>Displays array of warning messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Invoice)">
            <summary>
            Returns true if Invoice instances are equal
            </summary>
            <param name="input">Instance of Invoice to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Invoice.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminder">
            <summary>
            InvoiceReminder
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminder.Enabled">
            <summary>
            setting for on or off
            </summary>
            <value>setting for on or off</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminder.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminder.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminder.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminder.Equals(Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminder)">
            <summary>
            Returns true if InvoiceReminder instances are equal
            </summary>
            <param name="input">Instance of InvoiceReminder to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminder.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminder.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminders">
            <summary>
            InvoiceReminders
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminders._InvoiceReminders">
            <summary>
            Gets or Sets _InvoiceReminders
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminders.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminders.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminders.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminders.Equals(Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminders)">
            <summary>
            Returns true if InvoiceReminders instances are equal
            </summary>
            <param name="input">Instance of InvoiceReminders to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminders.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.InvoiceReminders.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Invoices">
            <summary>
            Invoices
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Invoices._Invoices">
            <summary>
            Gets or Sets _Invoices
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Invoices.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Invoices.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Invoices.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Invoices.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Invoices)">
            <summary>
            Returns true if Invoices instances are equal
            </summary>
            <param name="input">Instance of Invoices to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Invoices.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Invoices.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Item">
            <summary>
            Item
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Item.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Accounting.Item" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.Code">
            <summary>
            User defined item code (max length &#x3D; 30)
            </summary>
            <value>User defined item code (max length &#x3D; 30)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.InventoryAssetAccountCode">
            <summary>
            The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item
            </summary>
            <value>The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.Name">
            <summary>
            The name of the item (max length &#x3D; 50)
            </summary>
            <value>The name of the item (max length &#x3D; 50)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.IsSold">
            <summary>
            Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled.
            </summary>
            <value>Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.IsPurchased">
            <summary>
            Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled.
            </summary>
            <value>Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.Description">
            <summary>
            The sales description of the item (max length &#x3D; 4000)
            </summary>
            <value>The sales description of the item (max length &#x3D; 4000)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.PurchaseDescription">
            <summary>
            The purchase description of the item (max length &#x3D; 4000)
            </summary>
            <value>The purchase description of the item (max length &#x3D; 4000)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.PurchaseDetails">
            <summary>
            Gets or Sets PurchaseDetails
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.SalesDetails">
            <summary>
            Gets or Sets SalesDetails
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.IsTrackedAsInventory">
            <summary>
            True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set.
            </summary>
            <value>True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.TotalCostPool">
            <summary>
            The value of the item on hand. Calculated using average cost accounting.
            </summary>
            <value>The value of the item on hand. Calculated using average cost accounting.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.QuantityOnHand">
            <summary>
            The quantity of the item on hand
            </summary>
            <value>The quantity of the item on hand</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.UpdatedDateUTC">
            <summary>
            Last modified date in UTC format
            </summary>
            <value>Last modified date in UTC format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.ItemID">
            <summary>
            The Xero identifier for an Item
            </summary>
            <value>The Xero identifier for an Item</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.StatusAttributeString">
            <summary>
            Status of object
            </summary>
            <value>Status of object</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Item.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Item.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Item.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Item.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Item.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Item)">
            <summary>
            Returns true if Item instances are equal
            </summary>
            <param name="input">Instance of Item to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Item.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Item.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Items">
            <summary>
            Items
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Items._Items">
            <summary>
            Gets or Sets _Items
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Items.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Items.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Items.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Items.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Items)">
            <summary>
            Returns true if Items instances are equal
            </summary>
            <param name="input">Instance of Items to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Items.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Items.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Journal">
            <summary>
            Journal
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum">
            <summary>
            The journal source type. The type of transaction that created the journal
            </summary>
            <value>The journal source type. The type of transaction that created the journal</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.ACCREC">
            <summary>
            Enum ACCREC for value: ACCREC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.ACCPAY">
            <summary>
            Enum ACCPAY for value: ACCPAY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.ACCRECCREDIT">
            <summary>
            Enum ACCRECCREDIT for value: ACCRECCREDIT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.ACCPAYCREDIT">
            <summary>
            Enum ACCPAYCREDIT for value: ACCPAYCREDIT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.ACCRECPAYMENT">
            <summary>
            Enum ACCRECPAYMENT for value: ACCRECPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.ACCPAYPAYMENT">
            <summary>
            Enum ACCPAYPAYMENT for value: ACCPAYPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.ARCREDITPAYMENT">
            <summary>
            Enum ARCREDITPAYMENT for value: ARCREDITPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.APCREDITPAYMENT">
            <summary>
            Enum APCREDITPAYMENT for value: APCREDITPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.CASHREC">
            <summary>
            Enum CASHREC for value: CASHREC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.CASHPAID">
            <summary>
            Enum CASHPAID for value: CASHPAID
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.TRANSFER">
            <summary>
            Enum TRANSFER for value: TRANSFER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.ARPREPAYMENT">
            <summary>
            Enum ARPREPAYMENT for value: ARPREPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.APPREPAYMENT">
            <summary>
            Enum APPREPAYMENT for value: APPREPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.AROVERPAYMENT">
            <summary>
            Enum AROVERPAYMENT for value: AROVERPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.APOVERPAYMENT">
            <summary>
            Enum APOVERPAYMENT for value: APOVERPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.EXPCLAIM">
            <summary>
            Enum EXPCLAIM for value: EXPCLAIM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.EXPPAYMENT">
            <summary>
            Enum EXPPAYMENT for value: EXPPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.MANJOURNAL">
            <summary>
            Enum MANJOURNAL for value: MANJOURNAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.PAYSLIP">
            <summary>
            Enum PAYSLIP for value: PAYSLIP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.WAGEPAYABLE">
            <summary>
            Enum WAGEPAYABLE for value: WAGEPAYABLE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.INTEGRATEDPAYROLLPE">
            <summary>
            Enum INTEGRATEDPAYROLLPE for value: INTEGRATEDPAYROLLPE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.INTEGRATEDPAYROLLPT">
            <summary>
            Enum INTEGRATEDPAYROLLPT for value: INTEGRATEDPAYROLLPT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.EXTERNALSPENDMONEY">
            <summary>
            Enum EXTERNALSPENDMONEY for value: EXTERNALSPENDMONEY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.INTEGRATEDPAYROLLPTPAYMENT">
            <summary>
            Enum INTEGRATEDPAYROLLPTPAYMENT for value: INTEGRATEDPAYROLLPTPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceTypeEnum.INTEGRATEDPAYROLLCN">
            <summary>
            Enum INTEGRATEDPAYROLLCN for value: INTEGRATEDPAYROLLCN
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceType">
            <summary>
            The journal source type. The type of transaction that created the journal
            </summary>
            <value>The journal source type. The type of transaction that created the journal</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Journal.JournalID">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Journal.JournalDate">
            <summary>
            Date the journal was posted
            </summary>
            <value>Date the journal was posted</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Journal.JournalNumber">
            <summary>
            Xero generated journal number
            </summary>
            <value>Xero generated journal number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Journal.CreatedDateUTC">
            <summary>
            Created date UTC format
            </summary>
            <value>Created date UTC format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Journal.Reference">
            <summary>
            reference field for additional indetifying information
            </summary>
            <value>reference field for additional indetifying information</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Journal.SourceID">
            <summary>
            The identifier for the source transaction (e.g. InvoiceID)
            </summary>
            <value>The identifier for the source transaction (e.g. InvoiceID)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Journal.JournalLines">
            <summary>
            See JournalLines
            </summary>
            <value>See JournalLines</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Journal.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Journal.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Journal.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Journal.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Journal)">
            <summary>
            Returns true if Journal instances are equal
            </summary>
            <param name="input">Instance of Journal to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Journal.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Journal.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine">
            <summary>
            JournalLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.AccountType">
            <summary>
            Gets or Sets AccountType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.JournalLineID">
            <summary>
            Xero identifier for Journal
            </summary>
            <value>Xero identifier for Journal</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.AccountID">
            <summary>
            See Accounts
            </summary>
            <value>See Accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.AccountCode">
            <summary>
            See Accounts
            </summary>
            <value>See Accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.AccountName">
            <summary>
            See AccountCodes
            </summary>
            <value>See AccountCodes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.Description">
            <summary>
            The description from the source transaction line item. Only returned if populated.
            </summary>
            <value>The description from the source transaction line item. Only returned if populated.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.NetAmount">
            <summary>
            Net amount of journal line. This will be a positive value for a debit and negative for a credit
            </summary>
            <value>Net amount of journal line. This will be a positive value for a debit and negative for a credit</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.GrossAmount">
            <summary>
            Gross amount of journal line (NetAmount + TaxAmount).
            </summary>
            <value>Gross amount of journal line (NetAmount + TaxAmount).</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.TaxAmount">
            <summary>
            Total tax on a journal line
            </summary>
            <value>Total tax on a journal line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.TaxType">
            <summary>
            The tax type from TaxRates
            </summary>
            <value>The tax type from TaxRates</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.TaxName">
            <summary>
            see TaxRates
            </summary>
            <value>see TaxRates</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.TrackingCategories">
            <summary>
            Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 &lt;TrackingCategory&gt; elements.
            </summary>
            <value>Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 &lt;TrackingCategory&gt; elements.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.Equals(Xero.NetStandard.OAuth2.Model.Accounting.JournalLine)">
            <summary>
            Returns true if JournalLine instances are equal
            </summary>
            <param name="input">Instance of JournalLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.JournalLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Journals">
            <summary>
            Journals
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Journals._Journals">
            <summary>
            Gets or Sets _Journals
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Journals.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Journals.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Journals.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Journals.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Journals)">
            <summary>
            Returns true if Journals instances are equal
            </summary>
            <param name="input">Instance of Journals to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Journals.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Journals.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.LineAmountTypes">
            <summary>
            Line amounts are exclusive of tax by default if you don’t specify this element. See Line Amount Types
            </summary>
            <value>Line amounts are exclusive of tax by default if you don’t specify this element. See Line Amount Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.LineAmountTypes.Exclusive">
            <summary>
            Enum Exclusive for value: Exclusive
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.LineAmountTypes.Inclusive">
            <summary>
            Enum Inclusive for value: Inclusive
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.LineAmountTypes.NoTax">
            <summary>
            Enum NoTax for value: NoTax
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.LineItem">
            <summary>
            LineItem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.LineItemID">
            <summary>
            LineItem unique ID
            </summary>
            <value>LineItem unique ID</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.Description">
            <summary>
            Description needs to be at least 1 char long. A line item with just a description (i.e no unit amount or quantity) can be created by specifying just a &lt;Description&gt; element that contains at least 1 character
            </summary>
            <value>Description needs to be at least 1 char long. A line item with just a description (i.e no unit amount or quantity) can be created by specifying just a &lt;Description&gt; element that contains at least 1 character</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.Quantity">
            <summary>
            LineItem Quantity
            </summary>
            <value>LineItem Quantity</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.UnitAmount">
            <summary>
            LineItem Unit Amount
            </summary>
            <value>LineItem Unit Amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.ItemCode">
            <summary>
            See Items
            </summary>
            <value>See Items</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.AccountCode">
            <summary>
            See Accounts
            </summary>
            <value>See Accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.AccountID">
            <summary>
            The associated account ID related to this line item
            </summary>
            <value>The associated account ID related to this line item</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.TaxType">
            <summary>
            The tax type from TaxRates
            </summary>
            <value>The tax type from TaxRates</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.TaxAmount">
            <summary>
            The tax amount is auto calculated as a percentage of the line amount (see below) based on the tax rate. This value can be overriden if the calculated &lt;TaxAmount&gt; is not correct.
            </summary>
            <value>The tax amount is auto calculated as a percentage of the line amount (see below) based on the tax rate. This value can be overriden if the calculated &lt;TaxAmount&gt; is not correct.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.Item">
            <summary>
            Gets or Sets Item
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.LineAmount">
            <summary>
            If you wish to omit either of the &lt;Quantity&gt; or &lt;UnitAmount&gt; you can provide a LineAmount and Xero will calculate the missing amount for you. The line amount reflects the discounted price if a DiscountRate has been used . i.e LineAmount &#x3D; Quantity * Unit Amount * ((100 – DiscountRate)/100)
            </summary>
            <value>If you wish to omit either of the &lt;Quantity&gt; or &lt;UnitAmount&gt; you can provide a LineAmount and Xero will calculate the missing amount for you. The line amount reflects the discounted price if a DiscountRate has been used . i.e LineAmount &#x3D; Quantity * Unit Amount * ((100 – DiscountRate)/100)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.Tracking">
            <summary>
            Optional Tracking Category – see Tracking.  Any LineItem can have a  maximum of 2 &lt;TrackingCategory&gt; elements.
            </summary>
            <value>Optional Tracking Category – see Tracking.  Any LineItem can have a  maximum of 2 &lt;TrackingCategory&gt; elements.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.DiscountRate">
            <summary>
            Percentage discount being applied to a line item (only supported on  ACCREC invoices – ACC PAY invoices and credit notes in Xero do not support discounts
            </summary>
            <value>Percentage discount being applied to a line item (only supported on  ACCREC invoices – ACC PAY invoices and credit notes in Xero do not support discounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.DiscountAmount">
            <summary>
            Discount amount being applied to a line item. Only supported on ACCREC invoices - ACCPAY invoices and credit notes in Xero do not support discounts.
            </summary>
            <value>Discount amount being applied to a line item. Only supported on ACCREC invoices - ACCPAY invoices and credit notes in Xero do not support discounts.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.RepeatingInvoiceID">
            <summary>
            The Xero identifier for a Repeating Invoice
            </summary>
            <value>The Xero identifier for a Repeating Invoice</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.Equals(Xero.NetStandard.OAuth2.Model.Accounting.LineItem)">
            <summary>
            Returns true if LineItem instances are equal
            </summary>
            <param name="input">Instance of LineItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItem.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.LineItemItem">
            <summary>
            LineItemItem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItemItem.Code">
            <summary>
            User defined item code (max length &#x3D; 30)
            </summary>
            <value>User defined item code (max length &#x3D; 30)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItemItem.Name">
            <summary>
            The name of the item (max length &#x3D; 50)
            </summary>
            <value>The name of the item (max length &#x3D; 50)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItemItem.ItemID">
            <summary>
            The Xero identifier for an Item
            </summary>
            <value>The Xero identifier for an Item</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItemItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItemItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItemItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItemItem.Equals(Xero.NetStandard.OAuth2.Model.Accounting.LineItemItem)">
            <summary>
            Returns true if LineItemItem instances are equal
            </summary>
            <param name="input">Instance of LineItemItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItemItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItemItem.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.LineItemTracking">
            <summary>
            LineItemTracking
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItemTracking.TrackingCategoryID">
            <summary>
            The Xero identifier for a tracking category
            </summary>
            <value>The Xero identifier for a tracking category</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItemTracking.TrackingOptionID">
            <summary>
            The Xero identifier for a tracking category option
            </summary>
            <value>The Xero identifier for a tracking category option</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItemTracking.Name">
            <summary>
            The name of the tracking category
            </summary>
            <value>The name of the tracking category</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LineItemTracking.Option">
            <summary>
            See Tracking Options
            </summary>
            <value>See Tracking Options</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItemTracking.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItemTracking.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItemTracking.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItemTracking.Equals(Xero.NetStandard.OAuth2.Model.Accounting.LineItemTracking)">
            <summary>
            Returns true if LineItemTracking instances are equal
            </summary>
            <param name="input">Instance of LineItemTracking to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItemTracking.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LineItemTracking.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction">
            <summary>
            LinkedTransaction
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.StatusEnum">
            <summary>
            Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.
            </summary>
            <value>Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.StatusEnum.APPROVED">
            <summary>
            Enum APPROVED for value: APPROVED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.StatusEnum.DRAFT">
            <summary>
            Enum DRAFT for value: DRAFT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.StatusEnum.ONDRAFT">
            <summary>
            Enum ONDRAFT for value: ONDRAFT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.StatusEnum.BILLED">
            <summary>
            Enum BILLED for value: BILLED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.StatusEnum.VOIDED">
            <summary>
            Enum VOIDED for value: VOIDED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.Status">
            <summary>
            Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.
            </summary>
            <value>Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.TypeEnum">
            <summary>
            This will always be BILLABLEEXPENSE. More types may be added in future.
            </summary>
            <value>This will always be BILLABLEEXPENSE. More types may be added in future.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.TypeEnum.BILLABLEEXPENSE">
            <summary>
            Enum BILLABLEEXPENSE for value: BILLABLEEXPENSE
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.Type">
            <summary>
            This will always be BILLABLEEXPENSE. More types may be added in future.
            </summary>
            <value>This will always be BILLABLEEXPENSE. More types may be added in future.</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.SourceTransactionTypeCodeEnum">
            <summary>
            The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.
            </summary>
            <value>The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.SourceTransactionTypeCodeEnum.ACCPAY">
            <summary>
            Enum ACCPAY for value: ACCPAY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.SourceTransactionTypeCodeEnum.SPEND">
            <summary>
            Enum SPEND for value: SPEND
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.SourceTransactionTypeCode">
            <summary>
            The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.
            </summary>
            <value>The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.SourceTransactionID">
            <summary>
            Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice
            </summary>
            <value>Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.SourceLineItemID">
            <summary>
            The line item identifier from the source transaction.
            </summary>
            <value>The line item identifier from the source transaction.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.ContactID">
            <summary>
            Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.
            </summary>
            <value>Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.TargetTransactionID">
            <summary>
            Filter by the TargetTransactionID. Get all the linked transactions  allocated to a particular ACCREC invoice
            </summary>
            <value>Filter by the TargetTransactionID. Get all the linked transactions  allocated to a particular ACCREC invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.TargetLineItemID">
            <summary>
            The line item identifier from the target transaction. It is possible  to link multiple billable expenses to the same TargetLineItemID.
            </summary>
            <value>The line item identifier from the target transaction. It is possible  to link multiple billable expenses to the same TargetLineItemID.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.LinkedTransactionID">
            <summary>
            The Xero identifier for an Linked Transaction e.g./LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9
            </summary>
            <value>The Xero identifier for an Linked Transaction e.g./LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.UpdatedDateUTC">
            <summary>
            The last modified date in UTC format
            </summary>
            <value>The last modified date in UTC format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.Equals(Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction)">
            <summary>
            Returns true if LinkedTransaction instances are equal
            </summary>
            <param name="input">Instance of LinkedTransaction to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransaction.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransactions">
            <summary>
            LinkedTransactions
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransactions._LinkedTransactions">
            <summary>
            Gets or Sets _LinkedTransactions
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransactions.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransactions.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransactions.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransactions.Equals(Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransactions)">
            <summary>
            Returns true if LinkedTransactions instances are equal
            </summary>
            <param name="input">Instance of LinkedTransactions to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransactions.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.LinkedTransactions.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal">
            <summary>
            ManualJournal
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.LineAmountTypes">
            <summary>
            Gets or Sets LineAmountTypes
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.StatusEnum">
            <summary>
            See Manual Journal Status Codes
            </summary>
            <value>See Manual Journal Status Codes</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.StatusEnum.DRAFT">
            <summary>
            Enum DRAFT for value: DRAFT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.StatusEnum.POSTED">
            <summary>
            Enum POSTED for value: POSTED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.StatusEnum.VOIDED">
            <summary>
            Enum VOIDED for value: VOIDED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.StatusEnum.ARCHIVED">
            <summary>
            Enum ARCHIVED for value: ARCHIVED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.Status">
            <summary>
            See Manual Journal Status Codes
            </summary>
            <value>See Manual Journal Status Codes</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.Narration">
            <summary>
            Description of journal being posted
            </summary>
            <value>Description of journal being posted</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.JournalLines">
            <summary>
            See JournalLines
            </summary>
            <value>See JournalLines</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.Date">
            <summary>
            Date journal was posted – YYYY-MM-DD
            </summary>
            <value>Date journal was posted – YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.Url">
            <summary>
            Url link to a source document – shown as “Go to [appName]” in the Xero app
            </summary>
            <value>Url link to a source document – shown as “Go to [appName]” in the Xero app</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.ShowOnCashBasisReports">
            <summary>
            Boolean – default is true if not specified
            </summary>
            <value>Boolean – default is true if not specified</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.HasAttachments">
            <summary>
            Boolean to indicate if a manual journal has an attachment
            </summary>
            <value>Boolean to indicate if a manual journal has an attachment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.UpdatedDateUTC">
            <summary>
            Last modified date UTC format
            </summary>
            <value>Last modified date UTC format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.ManualJournalID">
            <summary>
            The Xero identifier for a Manual Journal
            </summary>
            <value>The Xero identifier for a Manual Journal</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.StatusAttributeString">
            <summary>
            A string to indicate if a invoice status
            </summary>
            <value>A string to indicate if a invoice status</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.Warnings">
            <summary>
            Displays array of warning messages from the API
            </summary>
            <value>Displays array of warning messages from the API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.Attachments">
            <summary>
            Displays array of attachments from the API
            </summary>
            <value>Displays array of attachments from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal)">
            <summary>
            Returns true if ManualJournal instances are equal
            </summary>
            <param name="input">Instance of ManualJournal to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournal.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine">
            <summary>
            ManualJournalLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.LineAmount">
            <summary>
            total for line. Debits are positive, credits are negative value
            </summary>
            <value>total for line. Debits are positive, credits are negative value</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.AccountCode">
            <summary>
            See Accounts
            </summary>
            <value>See Accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.AccountID">
            <summary>
            See Accounts
            </summary>
            <value>See Accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.Description">
            <summary>
            Description for journal line
            </summary>
            <value>Description for journal line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.TaxType">
            <summary>
            The tax type from TaxRates
            </summary>
            <value>The tax type from TaxRates</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.Tracking">
            <summary>
            Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 &lt;TrackingCategory&gt; elements.
            </summary>
            <value>Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 &lt;TrackingCategory&gt; elements.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.TaxAmount">
            <summary>
            The calculated tax amount based on the TaxType and LineAmount
            </summary>
            <value>The calculated tax amount based on the TaxType and LineAmount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.IsBlank">
            <summary>
            is the line blank
            </summary>
            <value>is the line blank</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine)">
            <summary>
            Returns true if ManualJournalLine instances are equal
            </summary>
            <param name="input">Instance of ManualJournalLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournalLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournals">
            <summary>
            ManualJournals
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournals._ManualJournals">
            <summary>
            Gets or Sets _ManualJournals
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournals.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournals.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournals.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournals.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ManualJournals)">
            <summary>
            Returns true if ManualJournals instances are equal
            </summary>
            <param name="input">Instance of ManualJournals to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournals.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ManualJournals.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoice">
            <summary>
            OnlineInvoice
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoice.OnlineInvoiceUrl">
            <summary>
            the URL to an online invoice
            </summary>
            <value>the URL to an online invoice</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoice.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoice.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoice.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoice.Equals(Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoice)">
            <summary>
            Returns true if OnlineInvoice instances are equal
            </summary>
            <param name="input">Instance of OnlineInvoice to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoice.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoice.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoices">
            <summary>
            OnlineInvoices
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoices._OnlineInvoices">
            <summary>
            Gets or Sets _OnlineInvoices
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoices.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoices.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoices.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoices.Equals(Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoices)">
            <summary>
            Returns true if OnlineInvoices instances are equal
            </summary>
            <param name="input">Instance of OnlineInvoices to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoices.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.OnlineInvoices.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Organisation">
            <summary>
            Organisation
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.VersionEnum">
            <summary>
            See Version Types
            </summary>
            <value>See Version Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.VersionEnum.AU">
            <summary>
            Enum AU for value: AU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.VersionEnum.NZ">
            <summary>
            Enum NZ for value: NZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.VersionEnum.GLOBAL">
            <summary>
            Enum GLOBAL for value: GLOBAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.VersionEnum.UK">
            <summary>
            Enum UK for value: UK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.VersionEnum.US">
            <summary>
            Enum US for value: US
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.VersionEnum.AUONRAMP">
            <summary>
            Enum AUONRAMP for value: AUONRAMP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.VersionEnum.NZONRAMP">
            <summary>
            Enum NZONRAMP for value: NZONRAMP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.VersionEnum.GLOBALONRAMP">
            <summary>
            Enum GLOBALONRAMP for value: GLOBALONRAMP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.VersionEnum.UKONRAMP">
            <summary>
            Enum UKONRAMP for value: UKONRAMP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.VersionEnum.USONRAMP">
            <summary>
            Enum USONRAMP for value: USONRAMP
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.Version">
            <summary>
            See Version Types
            </summary>
            <value>See Version Types</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum">
            <summary>
            Organisation Type
            </summary>
            <value>Organisation Type</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.ACCOUNTINGPRACTICE">
            <summary>
            Enum ACCOUNTINGPRACTICE for value: ACCOUNTING_PRACTICE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.COMPANY">
            <summary>
            Enum COMPANY for value: COMPANY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.CHARITY">
            <summary>
            Enum CHARITY for value: CHARITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.CLUBORSOCIETY">
            <summary>
            Enum CLUBORSOCIETY for value: CLUB_OR_SOCIETY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.INDIVIDUAL">
            <summary>
            Enum INDIVIDUAL for value: INDIVIDUAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.LOOKTHROUGHCOMPANY">
            <summary>
            Enum LOOKTHROUGHCOMPANY for value: LOOK_THROUGH_COMPANY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.NOTFORPROFIT">
            <summary>
            Enum NOTFORPROFIT for value: NOT_FOR_PROFIT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.PARTNERSHIP">
            <summary>
            Enum PARTNERSHIP for value: PARTNERSHIP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.SCORPORATION">
            <summary>
            Enum SCORPORATION for value: S_CORPORATION
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.SELFMANAGEDSUPERANNUATIONFUND">
            <summary>
            Enum SELFMANAGEDSUPERANNUATIONFUND for value: SELF_MANAGED_SUPERANNUATION_FUND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.SOLETRADER">
            <summary>
            Enum SOLETRADER for value: SOLE_TRADER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.SUPERANNUATIONFUND">
            <summary>
            Enum SUPERANNUATIONFUND for value: SUPERANNUATION_FUND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationTypeEnum.TRUST">
            <summary>
            Enum TRUST for value: TRUST
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationType">
            <summary>
            Organisation Type
            </summary>
            <value>Organisation Type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.BaseCurrency">
            <summary>
            Gets or Sets BaseCurrency
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.CountryCode">
            <summary>
            Gets or Sets CountryCode
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxBasisEnum">
            <summary>
            The accounting basis used for tax returns. See Sales Tax Basis
            </summary>
            <value>The accounting basis used for tax returns. See Sales Tax Basis</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxBasisEnum.PAYMENTS">
            <summary>
            Enum PAYMENTS for value: PAYMENTS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxBasisEnum.INVOICE">
            <summary>
            Enum INVOICE for value: INVOICE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxBasisEnum.NONE">
            <summary>
            Enum NONE for value: NONE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxBasisEnum.CASH">
            <summary>
            Enum CASH for value: CASH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxBasisEnum.ACCRUAL">
            <summary>
            Enum ACCRUAL for value: ACCRUAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxBasisEnum.FLATRATECASH">
            <summary>
            Enum FLATRATECASH for value: FLATRATECASH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxBasisEnum.FLATRATEACCRUAL">
            <summary>
            Enum FLATRATEACCRUAL for value: FLATRATEACCRUAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxBasisEnum.ACCRUALS">
            <summary>
            Enum ACCRUALS for value: ACCRUALS
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxBasis">
            <summary>
            The accounting basis used for tax returns. See Sales Tax Basis
            </summary>
            <value>The accounting basis used for tax returns. See Sales Tax Basis</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum">
            <summary>
            The frequency with which tax returns are processed. See Sales Tax Period
            </summary>
            <value>The frequency with which tax returns are processed. See Sales Tax Period</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum.MONTHLY">
            <summary>
            Enum MONTHLY for value: MONTHLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum.QUARTERLY1">
            <summary>
            Enum QUARTERLY1 for value: QUARTERLY1
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum.QUARTERLY2">
            <summary>
            Enum QUARTERLY2 for value: QUARTERLY2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum.QUARTERLY3">
            <summary>
            Enum QUARTERLY3 for value: QUARTERLY3
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum.ANNUALLY">
            <summary>
            Enum ANNUALLY for value: ANNUALLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum.ONEMONTHS">
            <summary>
            Enum ONEMONTHS for value: ONEMONTHS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum.TWOMONTHS">
            <summary>
            Enum TWOMONTHS for value: TWOMONTHS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum.SIXMONTHS">
            <summary>
            Enum SIXMONTHS for value: SIXMONTHS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum._1MONTHLY">
            <summary>
            Enum _1MONTHLY for value: 1MONTHLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum._2MONTHLY">
            <summary>
            Enum _2MONTHLY for value: 2MONTHLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum._3MONTHLY">
            <summary>
            Enum _3MONTHLY for value: 3MONTHLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum._6MONTHLY">
            <summary>
            Enum _6MONTHLY for value: 6MONTHLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum.QUARTERLY">
            <summary>
            Enum QUARTERLY for value: QUARTERLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum.YEARLY">
            <summary>
            Enum YEARLY for value: YEARLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriodEnum.NONE">
            <summary>
            Enum NONE for value: NONE
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.SalesTaxPeriod">
            <summary>
            The frequency with which tax returns are processed. See Sales Tax Period
            </summary>
            <value>The frequency with which tax returns are processed. See Sales Tax Period</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.Timezone">
            <summary>
            Gets or Sets Timezone
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum">
            <summary>
            Organisation Entity Type
            </summary>
            <value>Organisation Entity Type</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.ACCOUNTINGPRACTICE">
            <summary>
            Enum ACCOUNTINGPRACTICE for value: ACCOUNTING_PRACTICE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.COMPANY">
            <summary>
            Enum COMPANY for value: COMPANY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.CHARITY">
            <summary>
            Enum CHARITY for value: CHARITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.CLUBORSOCIETY">
            <summary>
            Enum CLUBORSOCIETY for value: CLUB_OR_SOCIETY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.INDIVIDUAL">
            <summary>
            Enum INDIVIDUAL for value: INDIVIDUAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.LOOKTHROUGHCOMPANY">
            <summary>
            Enum LOOKTHROUGHCOMPANY for value: LOOK_THROUGH_COMPANY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.NOTFORPROFIT">
            <summary>
            Enum NOTFORPROFIT for value: NOT_FOR_PROFIT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.PARTNERSHIP">
            <summary>
            Enum PARTNERSHIP for value: PARTNERSHIP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.SCORPORATION">
            <summary>
            Enum SCORPORATION for value: S_CORPORATION
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.SELFMANAGEDSUPERANNUATIONFUND">
            <summary>
            Enum SELFMANAGEDSUPERANNUATIONFUND for value: SELF_MANAGED_SUPERANNUATION_FUND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.SOLETRADER">
            <summary>
            Enum SOLETRADER for value: SOLE_TRADER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.SUPERANNUATIONFUND">
            <summary>
            Enum SUPERANNUATIONFUND for value: SUPERANNUATION_FUND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityTypeEnum.TRUST">
            <summary>
            Enum TRUST for value: TRUST
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationEntityType">
            <summary>
            Organisation Entity Type
            </summary>
            <value>Organisation Entity Type</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum">
            <summary>
            Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)
            </summary>
            <value>Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.DEMO">
            <summary>
            Enum DEMO for value: DEMO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.TRIAL">
            <summary>
            Enum TRIAL for value: TRIAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.STARTER">
            <summary>
            Enum STARTER for value: STARTER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.STANDARD">
            <summary>
            Enum STANDARD for value: STANDARD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.PREMIUM">
            <summary>
            Enum PREMIUM for value: PREMIUM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.PREMIUM20">
            <summary>
            Enum PREMIUM20 for value: PREMIUM_20
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.PREMIUM50">
            <summary>
            Enum PREMIUM50 for value: PREMIUM_50
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.PREMIUM100">
            <summary>
            Enum PREMIUM100 for value: PREMIUM_100
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.LEDGER">
            <summary>
            Enum LEDGER for value: LEDGER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.GSTCASHBOOK">
            <summary>
            Enum GSTCASHBOOK for value: GST_CASHBOOK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.NONGSTCASHBOOK">
            <summary>
            Enum NONGSTCASHBOOK for value: NON_GST_CASHBOOK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.ULTIMATE">
            <summary>
            Enum ULTIMATE for value: ULTIMATE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ClassEnum.LITE">
            <summary>
            Enum LITE for value: LITE
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.Class">
            <summary>
            Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)
            </summary>
            <value>Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.EditionEnum">
            <summary>
            BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)
            </summary>
            <value>BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.EditionEnum.BUSINESS">
            <summary>
            Enum BUSINESS for value: BUSINESS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.EditionEnum.PARTNER">
            <summary>
            Enum PARTNER for value: PARTNER
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.Edition">
            <summary>
            BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)
            </summary>
            <value>BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationID">
            <summary>
            Unique Xero identifier
            </summary>
            <value>Unique Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.APIKey">
            <summary>
            Display a unique key used for Xero-to-Xero transactions
            </summary>
            <value>Display a unique key used for Xero-to-Xero transactions</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.Name">
            <summary>
            Display name of organisation shown in Xero
            </summary>
            <value>Display name of organisation shown in Xero</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.LegalName">
            <summary>
            Organisation name shown on Reports
            </summary>
            <value>Organisation name shown on Reports</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.PaysTax">
            <summary>
            Boolean to describe if organisation is registered with a local tax authority i.e. true, false
            </summary>
            <value>Boolean to describe if organisation is registered with a local tax authority i.e. true, false</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.IsDemoCompany">
            <summary>
            Boolean to describe if organisation is a demo company.
            </summary>
            <value>Boolean to describe if organisation is a demo company.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.OrganisationStatus">
            <summary>
            Will be set to ACTIVE if you can connect to organisation via the Xero API
            </summary>
            <value>Will be set to ACTIVE if you can connect to organisation via the Xero API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.RegistrationNumber">
            <summary>
            Shows for New Zealand, Australian and UK organisations
            </summary>
            <value>Shows for New Zealand, Australian and UK organisations</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.EmployerIdentificationNumber">
            <summary>
            Shown if set. US Only.
            </summary>
            <value>Shown if set. US Only.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.TaxNumber">
            <summary>
            Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US &amp; Global).
            </summary>
            <value>Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US &amp; Global).</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.FinancialYearEndDay">
            <summary>
            Calendar day e.g. 0-31
            </summary>
            <value>Calendar day e.g. 0-31</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.FinancialYearEndMonth">
            <summary>
            Calendar Month e.g. 1-12
            </summary>
            <value>Calendar Month e.g. 1-12</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.DefaultSalesTax">
            <summary>
            The default for LineAmountTypes on sales transactions
            </summary>
            <value>The default for LineAmountTypes on sales transactions</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.DefaultPurchasesTax">
            <summary>
            The default for LineAmountTypes on purchase transactions
            </summary>
            <value>The default for LineAmountTypes on purchase transactions</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.PeriodLockDate">
            <summary>
            Shown if set. See lock dates
            </summary>
            <value>Shown if set. See lock dates</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.EndOfYearLockDate">
            <summary>
            Shown if set. See lock dates
            </summary>
            <value>Shown if set. See lock dates</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.CreatedDateUTC">
            <summary>
            Timestamp when the organisation was created in Xero
            </summary>
            <value>Timestamp when the organisation was created in Xero</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ShortCode">
            <summary>
            A unique identifier for the organisation. Potential uses.
            </summary>
            <value>A unique identifier for the organisation. Potential uses.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.LineOfBusiness">
            <summary>
            Description of business type as defined in Organisation settings
            </summary>
            <value>Description of business type as defined in Organisation settings</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.Addresses">
            <summary>
            Address details for organisation – see Addresses
            </summary>
            <value>Address details for organisation – see Addresses</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.Phones">
            <summary>
            Phones details for organisation – see Phones
            </summary>
            <value>Phones details for organisation – see Phones</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ExternalLinks">
            <summary>
            Organisation profile links for popular services such as Facebook,Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below
            </summary>
            <value>Organisation profile links for popular services such as Facebook,Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.PaymentTerms">
            <summary>
            Gets or Sets PaymentTerms
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Organisation)">
            <summary>
            Returns true if Organisation instances are equal
            </summary>
            <param name="input">Instance of Organisation to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Organisation.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Organisations">
            <summary>
            Organisations
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Organisations._Organisations">
            <summary>
            Gets or Sets _Organisations
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Organisations.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Organisations.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Organisations.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Organisations.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Organisations)">
            <summary>
            Returns true if Organisations instances are equal
            </summary>
            <param name="input">Instance of Organisations to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Organisations.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Organisations.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment">
            <summary>
            Overpayment
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.TypeEnum">
            <summary>
            See Overpayment Types
            </summary>
            <value>See Overpayment Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.TypeEnum.RECEIVEOVERPAYMENT">
            <summary>
            Enum RECEIVEOVERPAYMENT for value: RECEIVE-OVERPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.TypeEnum.SPENDOVERPAYMENT">
            <summary>
            Enum SPENDOVERPAYMENT for value: SPEND-OVERPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.TypeEnum.AROVERPAYMENT">
            <summary>
            Enum AROVERPAYMENT for value: AROVERPAYMENT
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.Type">
            <summary>
            See Overpayment Types
            </summary>
            <value>See Overpayment Types</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.StatusEnum">
            <summary>
            See Overpayment Status Codes
            </summary>
            <value>See Overpayment Status Codes</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.StatusEnum.AUTHORISED">
            <summary>
            Enum AUTHORISED for value: AUTHORISED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.StatusEnum.PAID">
            <summary>
            Enum PAID for value: PAID
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.StatusEnum.VOIDED">
            <summary>
            Enum VOIDED for value: VOIDED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.Status">
            <summary>
            See Overpayment Status Codes
            </summary>
            <value>See Overpayment Status Codes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.LineAmountTypes">
            <summary>
            Gets or Sets LineAmountTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.CurrencyCode">
            <summary>
            Gets or Sets CurrencyCode
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.Date">
            <summary>
            The date the overpayment is created YYYY-MM-DD
            </summary>
            <value>The date the overpayment is created YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.LineItems">
            <summary>
            See Overpayment Line Items
            </summary>
            <value>See Overpayment Line Items</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.SubTotal">
            <summary>
            The subtotal of the overpayment excluding taxes
            </summary>
            <value>The subtotal of the overpayment excluding taxes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.TotalTax">
            <summary>
            The total tax on the overpayment
            </summary>
            <value>The total tax on the overpayment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.Total">
            <summary>
            The total of the overpayment (subtotal + total tax)
            </summary>
            <value>The total of the overpayment (subtotal + total tax)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to the overpayment
            </summary>
            <value>UTC timestamp of last update to the overpayment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.OverpaymentID">
            <summary>
            Xero generated unique identifier
            </summary>
            <value>Xero generated unique identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.CurrencyRate">
            <summary>
            The currency rate for a multicurrency overpayment. If no rate is specified, the XE.com day rate is used
            </summary>
            <value>The currency rate for a multicurrency overpayment. If no rate is specified, the XE.com day rate is used</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.RemainingCredit">
            <summary>
            The remaining credit balance on the overpayment
            </summary>
            <value>The remaining credit balance on the overpayment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.Allocations">
            <summary>
            See Allocations
            </summary>
            <value>See Allocations</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.AppliedAmount">
            <summary>
            The amount of applied to an invoice
            </summary>
            <value>The amount of applied to an invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.Payments">
            <summary>
            See Payments
            </summary>
            <value>See Payments</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.HasAttachments">
            <summary>
            boolean to indicate if a overpayment has an attachment
            </summary>
            <value>boolean to indicate if a overpayment has an attachment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.Attachments">
            <summary>
            See Attachments
            </summary>
            <value>See Attachments</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Overpayment)">
            <summary>
            Returns true if Overpayment instances are equal
            </summary>
            <param name="input">Instance of Overpayment to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Overpayment.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Overpayments">
            <summary>
            Overpayments
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Overpayments._Overpayments">
            <summary>
            Gets or Sets _Overpayments
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Overpayments.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Overpayments.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Overpayments.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Overpayments.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Overpayments)">
            <summary>
            Returns true if Overpayments instances are equal
            </summary>
            <param name="input">Instance of Overpayments to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Overpayments.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Overpayments.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Payment">
            <summary>
            Payment
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Payment.StatusEnum">
            <summary>
            The status of the payment.
            </summary>
            <value>The status of the payment.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Payment.StatusEnum.AUTHORISED">
            <summary>
            Enum AUTHORISED for value: AUTHORISED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Payment.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Status">
            <summary>
            The status of the payment.
            </summary>
            <value>The status of the payment.</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Payment.PaymentTypeEnum">
            <summary>
            See Payment Types.
            </summary>
            <value>See Payment Types.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Payment.PaymentTypeEnum.ACCRECPAYMENT">
            <summary>
            Enum ACCRECPAYMENT for value: ACCRECPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Payment.PaymentTypeEnum.ACCPAYPAYMENT">
            <summary>
            Enum ACCPAYPAYMENT for value: ACCPAYPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Payment.PaymentTypeEnum.ARCREDITPAYMENT">
            <summary>
            Enum ARCREDITPAYMENT for value: ARCREDITPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Payment.PaymentTypeEnum.APCREDITPAYMENT">
            <summary>
            Enum APCREDITPAYMENT for value: APCREDITPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Payment.PaymentTypeEnum.AROVERPAYMENTPAYMENT">
            <summary>
            Enum AROVERPAYMENTPAYMENT for value: AROVERPAYMENTPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Payment.PaymentTypeEnum.ARPREPAYMENTPAYMENT">
            <summary>
            Enum ARPREPAYMENTPAYMENT for value: ARPREPAYMENTPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Payment.PaymentTypeEnum.APPREPAYMENTPAYMENT">
            <summary>
            Enum APPREPAYMENTPAYMENT for value: APPREPAYMENTPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Payment.PaymentTypeEnum.APOVERPAYMENTPAYMENT">
            <summary>
            Enum APOVERPAYMENTPAYMENT for value: APOVERPAYMENTPAYMENT
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.PaymentType">
            <summary>
            See Payment Types.
            </summary>
            <value>See Payment Types.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Invoice">
            <summary>
            Gets or Sets Invoice
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.CreditNote">
            <summary>
            Gets or Sets CreditNote
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Prepayment">
            <summary>
            Gets or Sets Prepayment
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Overpayment">
            <summary>
            Gets or Sets Overpayment
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.InvoiceNumber">
            <summary>
            Number of invoice or credit note you are applying payment to e.g.INV-4003
            </summary>
            <value>Number of invoice or credit note you are applying payment to e.g.INV-4003</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.CreditNoteNumber">
            <summary>
            Number of invoice or credit note you are applying payment to e.g. INV-4003
            </summary>
            <value>Number of invoice or credit note you are applying payment to e.g. INV-4003</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Account">
            <summary>
            Gets or Sets Account
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Code">
            <summary>
            Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value)
            </summary>
            <value>Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Date">
            <summary>
            Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
            </summary>
            <value>Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.CurrencyRate">
            <summary>
            Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500
            </summary>
            <value>Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Amount">
            <summary>
            The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
            </summary>
            <value>The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.BankAmount">
            <summary>
            The amount of the payment in the currency of the bank account.
            </summary>
            <value>The amount of the payment in the currency of the bank account.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Reference">
            <summary>
            An optional description for the payment e.g. Direct Debit
            </summary>
            <value>An optional description for the payment e.g. Direct Debit</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.IsReconciled">
            <summary>
            An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET
            </summary>
            <value>An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to the payment
            </summary>
            <value>UTC timestamp of last update to the payment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.PaymentID">
            <summary>
            The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
            </summary>
            <value>The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.BatchPaymentID">
            <summary>
            Present if the payment was created as part of a batch.
            </summary>
            <value>Present if the payment was created as part of a batch.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.BankAccountNumber">
            <summary>
            The suppliers bank account number the payment is being made to
            </summary>
            <value>The suppliers bank account number the payment is being made to</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Particulars">
            <summary>
            The suppliers bank account number the payment is being made to
            </summary>
            <value>The suppliers bank account number the payment is being made to</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Details">
            <summary>
            The information to appear on the supplier&#39;s bank account
            </summary>
            <value>The information to appear on the supplier&#39;s bank account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.HasAccount">
            <summary>
            A boolean to indicate if a contact has an validation errors
            </summary>
            <value>A boolean to indicate if a contact has an validation errors</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.HasValidationErrors">
            <summary>
            A boolean to indicate if a contact has an validation errors
            </summary>
            <value>A boolean to indicate if a contact has an validation errors</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.StatusAttributeString">
            <summary>
            A string to indicate if a invoice status
            </summary>
            <value>A string to indicate if a invoice status</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payment.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Payment.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Payment.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Payment.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Payment)">
            <summary>
            Returns true if Payment instances are equal
            </summary>
            <param name="input">Instance of Payment to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Payment.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Payment.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.PaymentDelete">
            <summary>
            PaymentDelete
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentDelete.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Accounting.PaymentDelete" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PaymentDelete.Status">
            <summary>
            The status of the payment.
            </summary>
            <value>The status of the payment.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentDelete.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentDelete.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentDelete.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentDelete.Equals(Xero.NetStandard.OAuth2.Model.Accounting.PaymentDelete)">
            <summary>
            Returns true if PaymentDelete instances are equal
            </summary>
            <param name="input">Instance of PaymentDelete to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentDelete.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentDelete.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Payments">
            <summary>
            Payments
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Payments._Payments">
            <summary>
            Gets or Sets _Payments
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Payments.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Payments.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Payments.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Payments.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Payments)">
            <summary>
            Returns true if Payments instances are equal
            </summary>
            <param name="input">Instance of Payments to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Payments.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Payments.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService">
            <summary>
            PaymentService
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService.PaymentServiceID">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService.PaymentServiceName">
            <summary>
            Name of payment service
            </summary>
            <value>Name of payment service</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService.PaymentServiceUrl">
            <summary>
            The custom payment URL
            </summary>
            <value>The custom payment URL</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService.PayNowText">
            <summary>
            The text displayed on the Pay Now button in Xero Online Invoicing. If this is not set it will default to Pay by credit card
            </summary>
            <value>The text displayed on the Pay Now button in Xero Online Invoicing. If this is not set it will default to Pay by credit card</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService.PaymentServiceType">
            <summary>
            This will always be CUSTOM for payment services created via the API.
            </summary>
            <value>This will always be CUSTOM for payment services created via the API.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService.Equals(Xero.NetStandard.OAuth2.Model.Accounting.PaymentService)">
            <summary>
            Returns true if PaymentService instances are equal
            </summary>
            <param name="input">Instance of PaymentService to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentService.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.PaymentServices">
            <summary>
            PaymentServices
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PaymentServices._PaymentServices">
            <summary>
            Gets or Sets _PaymentServices
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentServices.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentServices.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentServices.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentServices.Equals(Xero.NetStandard.OAuth2.Model.Accounting.PaymentServices)">
            <summary>
            Returns true if PaymentServices instances are equal
            </summary>
            <param name="input">Instance of PaymentServices to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentServices.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentServices.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTerm">
            <summary>
            PaymentTerm
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTerm.Bills">
            <summary>
            Gets or Sets Bills
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTerm.Sales">
            <summary>
            Gets or Sets Sales
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTerm.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTerm.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTerm.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTerm.Equals(Xero.NetStandard.OAuth2.Model.Accounting.PaymentTerm)">
            <summary>
            Returns true if PaymentTerm instances are equal
            </summary>
            <param name="input">Instance of PaymentTerm to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTerm.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTerm.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTermType">
            <summary>
            Defines PaymentTermType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTermType.DAYSAFTERBILLDATE">
            <summary>
            Enum DAYSAFTERBILLDATE for value: DAYSAFTERBILLDATE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTermType.DAYSAFTERBILLMONTH">
            <summary>
            Enum DAYSAFTERBILLMONTH for value: DAYSAFTERBILLMONTH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTermType.OFCURRENTMONTH">
            <summary>
            Enum OFCURRENTMONTH for value: OFCURRENTMONTH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.PaymentTermType.OFFOLLOWINGMONTH">
            <summary>
            Enum OFFOLLOWINGMONTH for value: OFFOLLOWINGMONTH
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Phone">
            <summary>
            Phone
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Phone.PhoneTypeEnum">
            <summary>
            Defines PhoneType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Phone.PhoneTypeEnum.DEFAULT">
            <summary>
            Enum DEFAULT for value: DEFAULT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Phone.PhoneTypeEnum.DDI">
            <summary>
            Enum DDI for value: DDI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Phone.PhoneTypeEnum.MOBILE">
            <summary>
            Enum MOBILE for value: MOBILE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Phone.PhoneTypeEnum.FAX">
            <summary>
            Enum FAX for value: FAX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Phone.PhoneTypeEnum.OFFICE">
            <summary>
            Enum OFFICE for value: OFFICE
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Phone.PhoneType">
            <summary>
            Gets or Sets PhoneType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Phone.PhoneNumber">
            <summary>
            max length &#x3D; 50
            </summary>
            <value>max length &#x3D; 50</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Phone.PhoneAreaCode">
            <summary>
            max length &#x3D; 10
            </summary>
            <value>max length &#x3D; 10</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Phone.PhoneCountryCode">
            <summary>
            max length &#x3D; 20
            </summary>
            <value>max length &#x3D; 20</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Phone.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Phone.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Phone.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Phone.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Phone)">
            <summary>
            Returns true if Phone instances are equal
            </summary>
            <param name="input">Instance of Phone to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Phone.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Phone.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment">
            <summary>
            Prepayment
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.TypeEnum">
            <summary>
            See Prepayment Types
            </summary>
            <value>See Prepayment Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.TypeEnum.RECEIVEPREPAYMENT">
            <summary>
            Enum RECEIVEPREPAYMENT for value: RECEIVE-PREPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.TypeEnum.SPENDPREPAYMENT">
            <summary>
            Enum SPENDPREPAYMENT for value: SPEND-PREPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.TypeEnum.ARPREPAYMENT">
            <summary>
            Enum ARPREPAYMENT for value: ARPREPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.TypeEnum.APPREPAYMENT">
            <summary>
            Enum APPREPAYMENT for value: APPREPAYMENT
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.Type">
            <summary>
            See Prepayment Types
            </summary>
            <value>See Prepayment Types</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.StatusEnum">
            <summary>
            See Prepayment Status Codes
            </summary>
            <value>See Prepayment Status Codes</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.StatusEnum.AUTHORISED">
            <summary>
            Enum AUTHORISED for value: AUTHORISED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.StatusEnum.PAID">
            <summary>
            Enum PAID for value: PAID
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.StatusEnum.VOIDED">
            <summary>
            Enum VOIDED for value: VOIDED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.Status">
            <summary>
            See Prepayment Status Codes
            </summary>
            <value>See Prepayment Status Codes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.LineAmountTypes">
            <summary>
            Gets or Sets LineAmountTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.CurrencyCode">
            <summary>
            Gets or Sets CurrencyCode
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.Date">
            <summary>
            The date the prepayment is created YYYY-MM-DD
            </summary>
            <value>The date the prepayment is created YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.LineItems">
            <summary>
            See Prepayment Line Items
            </summary>
            <value>See Prepayment Line Items</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.SubTotal">
            <summary>
            The subtotal of the prepayment excluding taxes
            </summary>
            <value>The subtotal of the prepayment excluding taxes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.TotalTax">
            <summary>
            The total tax on the prepayment
            </summary>
            <value>The total tax on the prepayment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.Total">
            <summary>
            The total of the prepayment(subtotal + total tax)
            </summary>
            <value>The total of the prepayment(subtotal + total tax)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.Reference">
            <summary>
            Returns Invoice number field. Reference field isn&#39;t available.
            </summary>
            <value>Returns Invoice number field. Reference field isn&#39;t available.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to the prepayment
            </summary>
            <value>UTC timestamp of last update to the prepayment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.PrepaymentID">
            <summary>
            Xero generated unique identifier
            </summary>
            <value>Xero generated unique identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.CurrencyRate">
            <summary>
            The currency rate for a multicurrency prepayment. If no rate is specified, the XE.com day rate is used
            </summary>
            <value>The currency rate for a multicurrency prepayment. If no rate is specified, the XE.com day rate is used</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.RemainingCredit">
            <summary>
            The remaining credit balance on the prepayment
            </summary>
            <value>The remaining credit balance on the prepayment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.Allocations">
            <summary>
            See Allocations
            </summary>
            <value>See Allocations</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.Payments">
            <summary>
            See Payments
            </summary>
            <value>See Payments</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.AppliedAmount">
            <summary>
            The amount of applied to an invoice
            </summary>
            <value>The amount of applied to an invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.HasAttachments">
            <summary>
            boolean to indicate if a prepayment has an attachment
            </summary>
            <value>boolean to indicate if a prepayment has an attachment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.Attachments">
            <summary>
            See Attachments
            </summary>
            <value>See Attachments</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Prepayment)">
            <summary>
            Returns true if Prepayment instances are equal
            </summary>
            <param name="input">Instance of Prepayment to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Prepayment.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Prepayments">
            <summary>
            Prepayments
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Prepayments._Prepayments">
            <summary>
            Gets or Sets _Prepayments
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Prepayments.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Prepayments.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Prepayments.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Prepayments.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Prepayments)">
            <summary>
            Returns true if Prepayments instances are equal
            </summary>
            <param name="input">Instance of Prepayments to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Prepayments.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Prepayments.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Purchase">
            <summary>
            Purchase
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Purchase.UnitPrice">
            <summary>
            Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp&#x3D;4 querystring parameter to your request.
            </summary>
            <value>Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp&#x3D;4 querystring parameter to your request.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Purchase.AccountCode">
            <summary>
            Default account code to be used for purchased/sale. Not applicable to the purchase details of tracked items
            </summary>
            <value>Default account code to be used for purchased/sale. Not applicable to the purchase details of tracked items</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Purchase.COGSAccountCode">
            <summary>
            Cost of goods sold account. Only applicable to the purchase details of tracked items.
            </summary>
            <value>Cost of goods sold account. Only applicable to the purchase details of tracked items.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Purchase.TaxType">
            <summary>
            The tax type from TaxRates
            </summary>
            <value>The tax type from TaxRates</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Purchase.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Purchase.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Purchase.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Purchase.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Purchase)">
            <summary>
            Returns true if Purchase instances are equal
            </summary>
            <param name="input">Instance of Purchase to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Purchase.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Purchase.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder">
            <summary>
            PurchaseOrder
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.LineAmountTypes">
            <summary>
            Gets or Sets LineAmountTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.CurrencyCode">
            <summary>
            Gets or Sets CurrencyCode
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.StatusEnum">
            <summary>
            See Purchase Order Status Codes
            </summary>
            <value>See Purchase Order Status Codes</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.StatusEnum.DRAFT">
            <summary>
            Enum DRAFT for value: DRAFT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.StatusEnum.SUBMITTED">
            <summary>
            Enum SUBMITTED for value: SUBMITTED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.StatusEnum.AUTHORISED">
            <summary>
            Enum AUTHORISED for value: AUTHORISED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.StatusEnum.BILLED">
            <summary>
            Enum BILLED for value: BILLED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.Status">
            <summary>
            See Purchase Order Status Codes
            </summary>
            <value>See Purchase Order Status Codes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.LineItems">
            <summary>
            See LineItems
            </summary>
            <value>See LineItems</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.Date">
            <summary>
            Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
            </summary>
            <value>Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.DeliveryDate">
            <summary>
            Date the goods are to be delivered – YYYY-MM-DD
            </summary>
            <value>Date the goods are to be delivered – YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.PurchaseOrderNumber">
            <summary>
            Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings)
            </summary>
            <value>Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.Reference">
            <summary>
            Additional reference number
            </summary>
            <value>Additional reference number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.BrandingThemeID">
            <summary>
            See BrandingThemes
            </summary>
            <value>See BrandingThemes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.SentToContact">
            <summary>
            Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed
            </summary>
            <value>Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.DeliveryAddress">
            <summary>
            The address the goods are to be delivered to
            </summary>
            <value>The address the goods are to be delivered to</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.AttentionTo">
            <summary>
            The person that the delivery is going to
            </summary>
            <value>The person that the delivery is going to</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.Telephone">
            <summary>
            The phone number for the person accepting the delivery
            </summary>
            <value>The phone number for the person accepting the delivery</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.DeliveryInstructions">
            <summary>
            A free text feild for instructions (500 characters max)
            </summary>
            <value>A free text feild for instructions (500 characters max)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.ExpectedArrivalDate">
            <summary>
            The date the goods are expected to arrive.
            </summary>
            <value>The date the goods are expected to arrive.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.PurchaseOrderID">
            <summary>
            Xero generated unique identifier for purchase order
            </summary>
            <value>Xero generated unique identifier for purchase order</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.CurrencyRate">
            <summary>
            The currency rate for a multicurrency purchase order. If no rate is specified, the XE.com day rate is used.
            </summary>
            <value>The currency rate for a multicurrency purchase order. If no rate is specified, the XE.com day rate is used.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.SubTotal">
            <summary>
            Total of purchase order excluding taxes
            </summary>
            <value>Total of purchase order excluding taxes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.TotalTax">
            <summary>
            Total tax on purchase order
            </summary>
            <value>Total tax on purchase order</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.Total">
            <summary>
            Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)
            </summary>
            <value>Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.TotalDiscount">
            <summary>
            Total of discounts applied on the purchase order line items
            </summary>
            <value>Total of discounts applied on the purchase order line items</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.HasAttachments">
            <summary>
            boolean to indicate if a purchase order has an attachment
            </summary>
            <value>boolean to indicate if a purchase order has an attachment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.UpdatedDateUTC">
            <summary>
            Last modified date UTC format
            </summary>
            <value>Last modified date UTC format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.StatusAttributeString">
            <summary>
            A string to indicate if a invoice status
            </summary>
            <value>A string to indicate if a invoice status</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.Warnings">
            <summary>
            Displays array of warning messages from the API
            </summary>
            <value>Displays array of warning messages from the API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.Attachments">
            <summary>
            Displays array of attachments from the API
            </summary>
            <value>Displays array of attachments from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.Equals(Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder)">
            <summary>
            Returns true if PurchaseOrder instances are equal
            </summary>
            <param name="input">Instance of PurchaseOrder to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrder.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrders">
            <summary>
            PurchaseOrders
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrders._PurchaseOrders">
            <summary>
            Gets or Sets _PurchaseOrders
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrders.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrders.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrders.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrders.Equals(Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrders)">
            <summary>
            Returns true if PurchaseOrders instances are equal
            </summary>
            <param name="input">Instance of PurchaseOrders to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrders.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.PurchaseOrders.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Quote">
            <summary>
            Quote
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.CurrencyCode">
            <summary>
            Gets or Sets CurrencyCode
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.LineAmountTypes">
            <summary>
            Gets or Sets LineAmountTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.QuoteID">
            <summary>
            QuoteID GUID is automatically generated and is returned after create or GET.
            </summary>
            <value>QuoteID GUID is automatically generated and is returned after create or GET.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.QuoteNumber">
            <summary>
            Unique alpha numeric code identifying a quote (Max Length &#x3D; 255)
            </summary>
            <value>Unique alpha numeric code identifying a quote (Max Length &#x3D; 255)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.Reference">
            <summary>
            Additional reference number
            </summary>
            <value>Additional reference number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.Terms">
            <summary>
            Terms of the quote
            </summary>
            <value>Terms of the quote</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.LineItems">
            <summary>
            See LineItems
            </summary>
            <value>See LineItems</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.Date">
            <summary>
            Date quote was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
            </summary>
            <value>Date quote was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.DateString">
            <summary>
            Date the quote was issued (YYYY-MM-DD)
            </summary>
            <value>Date the quote was issued (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.ExpiryDate">
            <summary>
            Date the quote expires – YYYY-MM-DD.
            </summary>
            <value>Date the quote expires – YYYY-MM-DD.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.ExpiryDateString">
            <summary>
            Date the quote expires – YYYY-MM-DD.
            </summary>
            <value>Date the quote expires – YYYY-MM-DD.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.CurrencyRate">
            <summary>
            The currency rate for a multicurrency quote
            </summary>
            <value>The currency rate for a multicurrency quote</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.SubTotal">
            <summary>
            Total of quote excluding taxes.
            </summary>
            <value>Total of quote excluding taxes.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.TotalTax">
            <summary>
            Total tax on quote
            </summary>
            <value>Total tax on quote</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.Total">
            <summary>
            Total of Quote tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
            </summary>
            <value>Total of Quote tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.TotalDiscount">
            <summary>
            Total of discounts applied on the quote line items
            </summary>
            <value>Total of discounts applied on the quote line items</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.Title">
            <summary>
            Title text for the quote
            </summary>
            <value>Title text for the quote</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.Summary">
            <summary>
            Summary text for the quote
            </summary>
            <value>Summary text for the quote</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.BrandingThemeID">
            <summary>
            See BrandingThemes
            </summary>
            <value>See BrandingThemes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.UpdatedDateUTC">
            <summary>
            Last modified date UTC format
            </summary>
            <value>Last modified date UTC format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.StatusAttributeString">
            <summary>
            A string to indicate if a invoice status
            </summary>
            <value>A string to indicate if a invoice status</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quote.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Quote.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Quote.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Quote.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Quote.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Quote)">
            <summary>
            Returns true if Quote instances are equal
            </summary>
            <param name="input">Instance of Quote to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Quote.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Quote.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.QuoteLineAmountTypes">
            <summary>
            Line amounts are exclusive of tax by default if you don’t specify this element. See Line Amount Types
            </summary>
            <value>Line amounts are exclusive of tax by default if you don’t specify this element. See Line Amount Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.QuoteLineAmountTypes.EXCLUSIVE">
            <summary>
            Enum EXCLUSIVE for value: EXCLUSIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.QuoteLineAmountTypes.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for value: INCLUSIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.QuoteLineAmountTypes.NOTAX">
            <summary>
            Enum NOTAX for value: NOTAX
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Quotes">
            <summary>
            Quotes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Quotes._Quotes">
            <summary>
            Gets or Sets _Quotes
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Quotes.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Quotes.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Quotes.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Quotes.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Quotes)">
            <summary>
            Returns true if Quotes instances are equal
            </summary>
            <param name="input">Instance of Quotes to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Quotes.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Quotes.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.QuoteStatusCodes">
            <summary>
            The status of the quote.
            </summary>
            <value>The status of the quote.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.QuoteStatusCodes.DRAFT">
            <summary>
            Enum DRAFT for value: DRAFT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.QuoteStatusCodes.SENT">
            <summary>
            Enum SENT for value: SENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.QuoteStatusCodes.DECLINED">
            <summary>
            Enum DECLINED for value: DECLINED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.QuoteStatusCodes.ACCEPTED">
            <summary>
            Enum ACCEPTED for value: ACCEPTED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.QuoteStatusCodes.INVOICED">
            <summary>
            Enum INVOICED for value: INVOICED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.QuoteStatusCodes.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Receipt">
            <summary>
            Receipt
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.LineAmountTypes">
            <summary>
            Gets or Sets LineAmountTypes
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.StatusEnum">
            <summary>
            Current status of receipt – see status types
            </summary>
            <value>Current status of receipt – see status types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.StatusEnum.DRAFT">
            <summary>
            Enum DRAFT for value: DRAFT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.StatusEnum.SUBMITTED">
            <summary>
            Enum SUBMITTED for value: SUBMITTED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.StatusEnum.AUTHORISED">
            <summary>
            Enum AUTHORISED for value: AUTHORISED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.StatusEnum.DECLINED">
            <summary>
            Enum DECLINED for value: DECLINED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.StatusEnum.VOIDED">
            <summary>
            Enum VOIDED for value: VOIDED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.Status">
            <summary>
            Current status of receipt – see status types
            </summary>
            <value>Current status of receipt – see status types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.Date">
            <summary>
            Date of receipt – YYYY-MM-DD
            </summary>
            <value>Date of receipt – YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.LineItems">
            <summary>
            Gets or Sets LineItems
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.User">
            <summary>
            Gets or Sets User
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.Reference">
            <summary>
            Additional reference number
            </summary>
            <value>Additional reference number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.SubTotal">
            <summary>
            Total of receipt excluding taxes
            </summary>
            <value>Total of receipt excluding taxes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.TotalTax">
            <summary>
            Total tax on receipt
            </summary>
            <value>Total tax on receipt</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.Total">
            <summary>
            Total of receipt tax inclusive (i.e. SubTotal + TotalTax)
            </summary>
            <value>Total of receipt tax inclusive (i.e. SubTotal + TotalTax)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.ReceiptID">
            <summary>
            Xero generated unique identifier for receipt
            </summary>
            <value>Xero generated unique identifier for receipt</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.ReceiptNumber">
            <summary>
            Xero generated sequence number for receipt in current claim for a given user
            </summary>
            <value>Xero generated sequence number for receipt in current claim for a given user</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.UpdatedDateUTC">
            <summary>
            Last modified date UTC format
            </summary>
            <value>Last modified date UTC format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.HasAttachments">
            <summary>
            boolean to indicate if a receipt has an attachment
            </summary>
            <value>boolean to indicate if a receipt has an attachment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.Url">
            <summary>
            URL link to a source document – shown as “Go to [appName]” in the Xero app
            </summary>
            <value>URL link to a source document – shown as “Go to [appName]” in the Xero app</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.Warnings">
            <summary>
            Displays array of warning messages from the API
            </summary>
            <value>Displays array of warning messages from the API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.Attachments">
            <summary>
            Displays array of attachments from the API
            </summary>
            <value>Displays array of attachments from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Receipt)">
            <summary>
            Returns true if Receipt instances are equal
            </summary>
            <param name="input">Instance of Receipt to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Receipt.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Receipts">
            <summary>
            Receipts
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Receipts._Receipts">
            <summary>
            Gets or Sets _Receipts
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Receipts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Receipts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Receipts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Receipts.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Receipts)">
            <summary>
            Returns true if Receipts instances are equal
            </summary>
            <param name="input">Instance of Receipts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Receipts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Receipts.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice">
            <summary>
            RepeatingInvoice
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.TypeEnum">
            <summary>
            See Invoice Types
            </summary>
            <value>See Invoice Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.TypeEnum.ACCPAY">
            <summary>
            Enum ACCPAY for value: ACCPAY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.TypeEnum.ACCREC">
            <summary>
            Enum ACCREC for value: ACCREC
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.Type">
            <summary>
            See Invoice Types
            </summary>
            <value>See Invoice Types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.LineAmountTypes">
            <summary>
            Gets or Sets LineAmountTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.CurrencyCode">
            <summary>
            Gets or Sets CurrencyCode
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.StatusEnum">
            <summary>
            One of the following - DRAFT or AUTHORISED – See Invoice Status Codes
            </summary>
            <value>One of the following - DRAFT or AUTHORISED – See Invoice Status Codes</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.StatusEnum.DRAFT">
            <summary>
            Enum DRAFT for value: DRAFT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.StatusEnum.AUTHORISED">
            <summary>
            Enum AUTHORISED for value: AUTHORISED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.Status">
            <summary>
            One of the following - DRAFT or AUTHORISED – See Invoice Status Codes
            </summary>
            <value>One of the following - DRAFT or AUTHORISED – See Invoice Status Codes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.Schedule">
            <summary>
            Gets or Sets Schedule
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.LineItems">
            <summary>
            See LineItems
            </summary>
            <value>See LineItems</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.Reference">
            <summary>
            ACCREC only – additional reference number
            </summary>
            <value>ACCREC only – additional reference number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.BrandingThemeID">
            <summary>
            See BrandingThemes
            </summary>
            <value>See BrandingThemes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.SubTotal">
            <summary>
            Total of invoice excluding taxes
            </summary>
            <value>Total of invoice excluding taxes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.TotalTax">
            <summary>
            Total tax on invoice
            </summary>
            <value>Total tax on invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.Total">
            <summary>
            Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)
            </summary>
            <value>Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.RepeatingInvoiceID">
            <summary>
            Xero generated unique identifier for repeating invoice template
            </summary>
            <value>Xero generated unique identifier for repeating invoice template</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.ID">
            <summary>
            Xero generated unique identifier for repeating invoice template
            </summary>
            <value>Xero generated unique identifier for repeating invoice template</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.HasAttachments">
            <summary>
            Boolean to indicate if an invoice has an attachment
            </summary>
            <value>Boolean to indicate if an invoice has an attachment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.Attachments">
            <summary>
            Displays array of attachments from the API
            </summary>
            <value>Displays array of attachments from the API</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.ApprovedForSending">
            <summary>
            Boolean to indicate whether the invoice has been approved for sending
            </summary>
            <value>Boolean to indicate whether the invoice has been approved for sending</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.SendCopy">
            <summary>
            Boolean to indicate whether a copy is sent to sender&#39;s email
            </summary>
            <value>Boolean to indicate whether a copy is sent to sender&#39;s email</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.MarkAsSent">
            <summary>
            Boolean to indicate whether the invoice in the Xero app displays as \&quot;sent\&quot;
            </summary>
            <value>Boolean to indicate whether the invoice in the Xero app displays as \&quot;sent\&quot;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.IncludePDF">
            <summary>
            Boolean to indicate whether to include PDF attachment
            </summary>
            <value>Boolean to indicate whether to include PDF attachment</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.Equals(Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice)">
            <summary>
            Returns true if RepeatingInvoice instances are equal
            </summary>
            <param name="input">Instance of RepeatingInvoice to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoice.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoices">
            <summary>
            RepeatingInvoices
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoices._RepeatingInvoices">
            <summary>
            Gets or Sets _RepeatingInvoices
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoices.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoices.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoices.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoices.Equals(Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoices)">
            <summary>
            Returns true if RepeatingInvoices instances are equal
            </summary>
            <param name="input">Instance of RepeatingInvoices to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoices.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RepeatingInvoices.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Report">
            <summary>
            Report
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Report.ReportTypeEnum">
            <summary>
            See Prepayment Types
            </summary>
            <value>See Prepayment Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Report.ReportTypeEnum.AgedPayablesByContact">
            <summary>
            Enum AgedPayablesByContact for value: AgedPayablesByContact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Report.ReportType">
            <summary>
            See Prepayment Types
            </summary>
            <value>See Prepayment Types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Report.ReportName">
            <summary>
            See Prepayment Types
            </summary>
            <value>See Prepayment Types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Report.ReportTitle">
            <summary>
            See Prepayment Types
            </summary>
            <value>See Prepayment Types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Report.ReportDate">
            <summary>
            Date of report
            </summary>
            <value>Date of report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Report.UpdatedDateUTC">
            <summary>
            Updated Date
            </summary>
            <value>Updated Date</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Report.Contacts">
            <summary>
            Gets or Sets Contacts
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Report.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Report.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Report.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Report.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Report)">
            <summary>
            Returns true if Report instances are equal
            </summary>
            <param name="input">Instance of Report to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Report.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Report.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ReportAttribute">
            <summary>
            ReportAttribute
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportAttribute.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportAttribute.Value">
            <summary>
            Gets or Sets Value
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportAttribute.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportAttribute.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportAttribute.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportAttribute.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ReportAttribute)">
            <summary>
            Returns true if ReportAttribute instances are equal
            </summary>
            <param name="input">Instance of ReportAttribute to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportAttribute.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportAttribute.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ReportCell">
            <summary>
            ReportCell
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportCell.Value">
            <summary>
            Gets or Sets Value
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportCell.Attributes">
            <summary>
            Gets or Sets Attributes
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportCell.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportCell.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportCell.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportCell.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ReportCell)">
            <summary>
            Returns true if ReportCell instances are equal
            </summary>
            <param name="input">Instance of ReportCell to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportCell.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportCell.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ReportFields">
            <summary>
            ReportFields
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportFields.FieldID">
            <summary>
            Gets or Sets FieldID
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportFields.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportFields.Value">
            <summary>
            Gets or Sets Value
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportFields.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportFields.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportFields.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportFields.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ReportFields)">
            <summary>
            Returns true if ReportFields instances are equal
            </summary>
            <param name="input">Instance of ReportFields to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportFields.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportFields.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ReportRow">
            <summary>
            ReportRow
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportRow.RowType">
            <summary>
            Gets or Sets RowType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportRow.Title">
            <summary>
            Gets or Sets Title
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportRow.Cells">
            <summary>
            Gets or Sets Cells
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportRow.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportRow.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportRow.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportRow.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ReportRow)">
            <summary>
            Returns true if ReportRow instances are equal
            </summary>
            <param name="input">Instance of ReportRow to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportRow.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportRow.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ReportRows">
            <summary>
            ReportRows
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportRows.RowType">
            <summary>
            Gets or Sets RowType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportRows.Title">
            <summary>
            Gets or Sets Title
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportRows.Cells">
            <summary>
            Gets or Sets Cells
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportRows.Rows">
            <summary>
            Gets or Sets Rows
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportRows.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportRows.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportRows.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportRows.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ReportRows)">
            <summary>
            Returns true if ReportRows instances are equal
            </summary>
            <param name="input">Instance of ReportRows to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportRows.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportRows.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Reports">
            <summary>
            Reports
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Reports._Reports">
            <summary>
            Gets or Sets _Reports
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Reports.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Reports.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Reports.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Reports.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Reports)">
            <summary>
            Returns true if Reports instances are equal
            </summary>
            <param name="input">Instance of Reports to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Reports.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Reports.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow">
            <summary>
            ReportWithRow
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.ReportID">
            <summary>
            ID of the Report
            </summary>
            <value>ID of the Report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.ReportName">
            <summary>
            Name of the report
            </summary>
            <value>Name of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.ReportTitle">
            <summary>
            Title of the report
            </summary>
            <value>Title of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.ReportType">
            <summary>
            The type of report (BalanceSheet,ProfitLoss, etc)
            </summary>
            <value>The type of report (BalanceSheet,ProfitLoss, etc)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.ReportTitles">
            <summary>
            Report titles array (3 to 4 strings with the report name, orgnisation name and time frame of report)
            </summary>
            <value>Report titles array (3 to 4 strings with the report name, orgnisation name and time frame of report)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.ReportDate">
            <summary>
            Date of report
            </summary>
            <value>Date of report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.Rows">
            <summary>
            Gets or Sets Rows
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.UpdatedDateUTC">
            <summary>
            Updated Date
            </summary>
            <value>Updated Date</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.Fields">
            <summary>
            Gets or Sets Fields
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow)">
            <summary>
            Returns true if ReportWithRow instances are equal
            </summary>
            <param name="input">Instance of ReportWithRow to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRow.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRows">
            <summary>
            ReportWithRows
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRows.Reports">
            <summary>
            Gets or Sets Reports
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRows.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRows.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRows.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRows.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRows)">
            <summary>
            Returns true if ReportWithRows instances are equal
            </summary>
            <param name="input">Instance of ReportWithRows to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRows.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ReportWithRows.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.RequestEmpty">
            <summary>
            RequestEmpty
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.RequestEmpty.Status">
            <summary>
            Need at least one field to create an empty JSON payload
            </summary>
            <value>Need at least one field to create an empty JSON payload</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RequestEmpty.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RequestEmpty.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RequestEmpty.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RequestEmpty.Equals(Xero.NetStandard.OAuth2.Model.Accounting.RequestEmpty)">
            <summary>
            Returns true if RequestEmpty instances are equal
            </summary>
            <param name="input">Instance of RequestEmpty to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RequestEmpty.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.RequestEmpty.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.RowType">
            <summary>
            Defines RowType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.RowType.Header">
            <summary>
            Enum Header for value: Header
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.RowType.Section">
            <summary>
            Enum Section for value: Section
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.RowType.Row">
            <summary>
            Enum Row for value: Row
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.RowType.SummaryRow">
            <summary>
            Enum SummaryRow for value: SummaryRow
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.SalesTrackingCategory">
            <summary>
            SalesTrackingCategory
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.SalesTrackingCategory.TrackingCategoryName">
            <summary>
            The default sales tracking category name for contacts
            </summary>
            <value>The default sales tracking category name for contacts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.SalesTrackingCategory.TrackingOptionName">
            <summary>
            The default purchase tracking category name for contacts
            </summary>
            <value>The default purchase tracking category name for contacts</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.SalesTrackingCategory.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.SalesTrackingCategory.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.SalesTrackingCategory.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.SalesTrackingCategory.Equals(Xero.NetStandard.OAuth2.Model.Accounting.SalesTrackingCategory)">
            <summary>
            Returns true if SalesTrackingCategory instances are equal
            </summary>
            <param name="input">Instance of SalesTrackingCategory to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.SalesTrackingCategory.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.SalesTrackingCategory.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Schedule">
            <summary>
            Schedule
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.UnitEnum">
            <summary>
            One of the following - WEEKLY or MONTHLY
            </summary>
            <value>One of the following - WEEKLY or MONTHLY</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.UnitEnum.WEEKLY">
            <summary>
            Enum WEEKLY for value: WEEKLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.UnitEnum.MONTHLY">
            <summary>
            Enum MONTHLY for value: MONTHLY
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.Unit">
            <summary>
            One of the following - WEEKLY or MONTHLY
            </summary>
            <value>One of the following - WEEKLY or MONTHLY</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.DueDateTypeEnum">
            <summary>
            the payment terms
            </summary>
            <value>the payment terms</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.DueDateTypeEnum.DAYSAFTERBILLDATE">
            <summary>
            Enum DAYSAFTERBILLDATE for value: DAYSAFTERBILLDATE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.DueDateTypeEnum.DAYSAFTERBILLMONTH">
            <summary>
            Enum DAYSAFTERBILLMONTH for value: DAYSAFTERBILLMONTH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.DueDateTypeEnum.DAYSAFTERINVOICEDATE">
            <summary>
            Enum DAYSAFTERINVOICEDATE for value: DAYSAFTERINVOICEDATE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.DueDateTypeEnum.DAYSAFTERINVOICEMONTH">
            <summary>
            Enum DAYSAFTERINVOICEMONTH for value: DAYSAFTERINVOICEMONTH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.DueDateTypeEnum.OFCURRENTMONTH">
            <summary>
            Enum OFCURRENTMONTH for value: OFCURRENTMONTH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.DueDateTypeEnum.OFFOLLOWINGMONTH">
            <summary>
            Enum OFFOLLOWINGMONTH for value: OFFOLLOWINGMONTH
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.DueDateType">
            <summary>
            the payment terms
            </summary>
            <value>the payment terms</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.Period">
            <summary>
            Integer used with the unit e.g. 1 (every 1 week), 2 (every 2 months)
            </summary>
            <value>Integer used with the unit e.g. 1 (every 1 week), 2 (every 2 months)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.DueDate">
            <summary>
            Integer used with due date type e.g 20 (of following month), 31 (of current month)
            </summary>
            <value>Integer used with due date type e.g 20 (of following month), 31 (of current month)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.StartDate">
            <summary>
            Date the first invoice of the current version of the repeating schedule was generated (changes when repeating invoice is edited)
            </summary>
            <value>Date the first invoice of the current version of the repeating schedule was generated (changes when repeating invoice is edited)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.NextScheduledDate">
            <summary>
            The calendar date of the next invoice in the schedule to be generated
            </summary>
            <value>The calendar date of the next invoice in the schedule to be generated</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.EndDate">
            <summary>
            Invoice end date – only returned if the template has an end date set
            </summary>
            <value>Invoice end date – only returned if the template has an end date set</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Schedule)">
            <summary>
            Returns true if Schedule instances are equal
            </summary>
            <param name="input">Instance of Schedule to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Schedule.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Setup">
            <summary>
            Setup
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Setup.ConversionDate">
            <summary>
            Gets or Sets ConversionDate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Setup.ConversionBalances">
            <summary>
            Balance supplied for each account that has a value as at the conversion date.
            </summary>
            <value>Balance supplied for each account that has a value as at the conversion date.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Setup.Accounts">
            <summary>
            Gets or Sets Accounts
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Setup.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Setup.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Setup.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Setup.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Setup)">
            <summary>
            Returns true if Setup instances are equal
            </summary>
            <param name="input">Instance of Setup to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Setup.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Setup.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TaxComponent">
            <summary>
            TaxComponent
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxComponent.Name">
            <summary>
            Name of Tax Component
            </summary>
            <value>Name of Tax Component</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxComponent.Rate">
            <summary>
            Tax Rate (up to 4dp)
            </summary>
            <value>Tax Rate (up to 4dp)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxComponent.IsCompound">
            <summary>
            Boolean to describe if Tax rate is compounded.
            </summary>
            <value>Boolean to describe if Tax rate is compounded.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxComponent.IsNonRecoverable">
            <summary>
            Boolean to describe if tax rate is non-recoverable. Non-recoverable rates are only applicable to Canadian organisations
            </summary>
            <value>Boolean to describe if tax rate is non-recoverable. Non-recoverable rates are only applicable to Canadian organisations</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxComponent.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxComponent.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxComponent.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxComponent.Equals(Xero.NetStandard.OAuth2.Model.Accounting.TaxComponent)">
            <summary>
            Returns true if TaxComponent instances are equal
            </summary>
            <param name="input">Instance of TaxComponent to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxComponent.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxComponent.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate">
            <summary>
            TaxRate
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.StatusEnum">
            <summary>
            See Status Codes
            </summary>
            <value>See Status Codes</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.StatusEnum.ARCHIVED">
            <summary>
            Enum ARCHIVED for value: ARCHIVED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.StatusEnum.PENDING">
            <summary>
            Enum PENDING for value: PENDING
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.Status">
            <summary>
            See Status Codes
            </summary>
            <value>See Status Codes</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum">
            <summary>
            See ReportTaxTypes
            </summary>
            <value>See ReportTaxTypes</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.AVALARA">
            <summary>
            Enum AVALARA for value: AVALARA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.BASEXCLUDED">
            <summary>
            Enum BASEXCLUDED for value: BASEXCLUDED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.CAPITALSALESOUTPUT">
            <summary>
            Enum CAPITALSALESOUTPUT for value: CAPITALSALESOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.CAPITALEXPENSESINPUT">
            <summary>
            Enum CAPITALEXPENSESINPUT for value: CAPITALEXPENSESINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ECOUTPUT">
            <summary>
            Enum ECOUTPUT for value: ECOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ECOUTPUTSERVICES">
            <summary>
            Enum ECOUTPUTSERVICES for value: ECOUTPUTSERVICES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ECINPUT">
            <summary>
            Enum ECINPUT for value: ECINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ECACQUISITIONS">
            <summary>
            Enum ECACQUISITIONS for value: ECACQUISITIONS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.EXEMPTEXPENSES">
            <summary>
            Enum EXEMPTEXPENSES for value: EXEMPTEXPENSES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.EXEMPTINPUT">
            <summary>
            Enum EXEMPTINPUT for value: EXEMPTINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.EXEMPTOUTPUT">
            <summary>
            Enum EXEMPTOUTPUT for value: EXEMPTOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.GSTONIMPORTS">
            <summary>
            Enum GSTONIMPORTS for value: GSTONIMPORTS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.INPUT">
            <summary>
            Enum INPUT for value: INPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.INPUTTAXED">
            <summary>
            Enum INPUTTAXED for value: INPUTTAXED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.MOSSSALES">
            <summary>
            Enum MOSSSALES for value: MOSSSALES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.NONE">
            <summary>
            Enum NONE for value: NONE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.NONEOUTPUT">
            <summary>
            Enum NONEOUTPUT for value: NONEOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.OUTPUT">
            <summary>
            Enum OUTPUT for value: OUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.PURCHASESINPUT">
            <summary>
            Enum PURCHASESINPUT for value: PURCHASESINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.SALESOUTPUT">
            <summary>
            Enum SALESOUTPUT for value: SALESOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.EXEMPTCAPITAL">
            <summary>
            Enum EXEMPTCAPITAL for value: EXEMPTCAPITAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.EXEMPTEXPORT">
            <summary>
            Enum EXEMPTEXPORT for value: EXEMPTEXPORT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.CAPITALEXINPUT">
            <summary>
            Enum CAPITALEXINPUT for value: CAPITALEXINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.GSTONCAPIMPORTS">
            <summary>
            Enum GSTONCAPIMPORTS for value: GSTONCAPIMPORTS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.GSTONCAPITALIMPORTS">
            <summary>
            Enum GSTONCAPITALIMPORTS for value: GSTONCAPITALIMPORTS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.REVERSECHARGES">
            <summary>
            Enum REVERSECHARGES for value: REVERSECHARGES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.PAYMENTS">
            <summary>
            Enum PAYMENTS for value: PAYMENTS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.INVOICE">
            <summary>
            Enum INVOICE for value: INVOICE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.CASH">
            <summary>
            Enum CASH for value: CASH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ACCRUAL">
            <summary>
            Enum ACCRUAL for value: ACCRUAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.FLATRATECASH">
            <summary>
            Enum FLATRATECASH for value: FLATRATECASH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.FLATRATEACCRUAL">
            <summary>
            Enum FLATRATEACCRUAL for value: FLATRATEACCRUAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ACCRUALS">
            <summary>
            Enum ACCRUALS for value: ACCRUALS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.TXCA">
            <summary>
            Enum TXCA for value: TXCA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.SRCAS">
            <summary>
            Enum SRCAS for value: SRCAS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.DSOUTPUT">
            <summary>
            Enum DSOUTPUT for value: DSOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.BLINPUT2">
            <summary>
            Enum BLINPUT2 for value: BLINPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.EPINPUT">
            <summary>
            Enum EPINPUT for value: EPINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.IMINPUT2">
            <summary>
            Enum IMINPUT2 for value: IMINPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.MEINPUT">
            <summary>
            Enum MEINPUT for value: MEINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.IGDSINPUT2">
            <summary>
            Enum IGDSINPUT2 for value: IGDSINPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ESN33OUTPUT">
            <summary>
            Enum ESN33OUTPUT for value: ESN33OUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.OPINPUT">
            <summary>
            Enum OPINPUT for value: OPINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.OSOUTPUT">
            <summary>
            Enum OSOUTPUT for value: OSOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.TXN33INPUT">
            <summary>
            Enum TXN33INPUT for value: TXN33INPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.TXESSINPUT">
            <summary>
            Enum TXESSINPUT for value: TXESSINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.TXREINPUT">
            <summary>
            Enum TXREINPUT for value: TXREINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.TXPETINPUT">
            <summary>
            Enum TXPETINPUT for value: TXPETINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.NRINPUT">
            <summary>
            Enum NRINPUT for value: NRINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ES33OUTPUT">
            <summary>
            Enum ES33OUTPUT for value: ES33OUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ZERORATEDINPUT">
            <summary>
            Enum ZERORATEDINPUT for value: ZERORATEDINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ZERORATEDOUTPUT">
            <summary>
            Enum ZERORATEDOUTPUT for value: ZERORATEDOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.DRCHARGESUPPLY">
            <summary>
            Enum DRCHARGESUPPLY for value: DRCHARGESUPPLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.DRCHARGE">
            <summary>
            Enum DRCHARGE for value: DRCHARGE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.CAPINPUT">
            <summary>
            Enum CAPINPUT for value: CAPINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.CAPIMPORTS">
            <summary>
            Enum CAPIMPORTS for value: CAPIMPORTS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.IMINPUT">
            <summary>
            Enum IMINPUT for value: IMINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.INPUT2">
            <summary>
            Enum INPUT2 for value: INPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.CIUINPUT">
            <summary>
            Enum CIUINPUT for value: CIUINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.SRINPUT">
            <summary>
            Enum SRINPUT for value: SRINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.OUTPUT2">
            <summary>
            Enum OUTPUT2 for value: OUTPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.SROUTPUT">
            <summary>
            Enum SROUTPUT for value: SROUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.CAPOUTPUT">
            <summary>
            Enum CAPOUTPUT for value: CAPOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.SROUTPUT2">
            <summary>
            Enum SROUTPUT2 for value: SROUTPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.CIUOUTPUT">
            <summary>
            Enum CIUOUTPUT for value: CIUOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ZROUTPUT">
            <summary>
            Enum ZROUTPUT for value: ZROUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ZREXPORT">
            <summary>
            Enum ZREXPORT for value: ZREXPORT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ACC28PLUS">
            <summary>
            Enum ACC28PLUS for value: ACC28PLUS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ACCUPTO28">
            <summary>
            Enum ACCUPTO28 for value: ACCUPTO28
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.OTHEROUTPUT">
            <summary>
            Enum OTHEROUTPUT for value: OTHEROUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.SHOUTPUT">
            <summary>
            Enum SHOUTPUT for value: SHOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.ZRINPUT">
            <summary>
            Enum ZRINPUT for value: ZRINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.BADDEBT">
            <summary>
            Enum BADDEBT for value: BADDEBT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.OTHERINPUT">
            <summary>
            Enum OTHERINPUT for value: OTHERINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.BADDEBTRELIEF">
            <summary>
            Enum BADDEBTRELIEF for value: BADDEBTRELIEF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.IGDSINPUT3">
            <summary>
            Enum IGDSINPUT3 for value: IGDSINPUT3
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.SROVR">
            <summary>
            Enum SROVR for value: SROVR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.TOURISTREFUND">
            <summary>
            Enum TOURISTREFUND for value: TOURISTREFUND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.TXRCN33INPUT">
            <summary>
            Enum TXRCN33INPUT for value: TXRCN33INPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.TXRCREINPUT">
            <summary>
            Enum TXRCREINPUT for value: TXRCREINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.TXRCESSINPUT">
            <summary>
            Enum TXRCESSINPUT for value: TXRCESSINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxTypeEnum.TXRCTSINPUT">
            <summary>
            Enum TXRCTSINPUT for value: TXRCTSINPUT
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ReportTaxType">
            <summary>
            See ReportTaxTypes
            </summary>
            <value>See ReportTaxTypes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.Name">
            <summary>
            Name of tax rate
            </summary>
            <value>Name of tax rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.TaxType">
            <summary>
            The tax type
            </summary>
            <value>The tax type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.TaxComponents">
            <summary>
            See TaxComponents
            </summary>
            <value>See TaxComponents</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.CanApplyToAssets">
            <summary>
            Boolean to describe if tax rate can be used for asset accounts i.e.  true,false
            </summary>
            <value>Boolean to describe if tax rate can be used for asset accounts i.e.  true,false</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.CanApplyToEquity">
            <summary>
            Boolean to describe if tax rate can be used for equity accounts i.e true,false
            </summary>
            <value>Boolean to describe if tax rate can be used for equity accounts i.e true,false</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.CanApplyToExpenses">
            <summary>
            Boolean to describe if tax rate can be used for expense accounts  i.e. true,false
            </summary>
            <value>Boolean to describe if tax rate can be used for expense accounts  i.e. true,false</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.CanApplyToLiabilities">
            <summary>
            Boolean to describe if tax rate can be used for liability accounts  i.e. true,false
            </summary>
            <value>Boolean to describe if tax rate can be used for liability accounts  i.e. true,false</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.CanApplyToRevenue">
            <summary>
            Boolean to describe if tax rate can be used for revenue accounts i.e. true,false
            </summary>
            <value>Boolean to describe if tax rate can be used for revenue accounts i.e. true,false</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.DisplayTaxRate">
            <summary>
            Tax Rate (decimal to 4dp) e.g 12.5000
            </summary>
            <value>Tax Rate (decimal to 4dp) e.g 12.5000</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.EffectiveRate">
            <summary>
            Effective Tax Rate (decimal to 4dp) e.g 12.5000
            </summary>
            <value>Effective Tax Rate (decimal to 4dp) e.g 12.5000</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.Equals(Xero.NetStandard.OAuth2.Model.Accounting.TaxRate)">
            <summary>
            Returns true if TaxRate instances are equal
            </summary>
            <param name="input">Instance of TaxRate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxRate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TaxRates">
            <summary>
            TaxRates
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TaxRates._TaxRates">
            <summary>
            Gets or Sets _TaxRates
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxRates.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxRates.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxRates.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxRates.Equals(Xero.NetStandard.OAuth2.Model.Accounting.TaxRates)">
            <summary>
            Returns true if TaxRates instances are equal
            </summary>
            <param name="input">Instance of TaxRates to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxRates.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TaxRates.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TaxType">
            <summary>
            See Tax Types – can only be used on update calls
            </summary>
            <value>See Tax Types – can only be used on update calls</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.OUTPUT">
            <summary>
            Enum OUTPUT for value: OUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.INPUT">
            <summary>
            Enum INPUT for value: INPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.CAPEXINPUT">
            <summary>
            Enum CAPEXINPUT for value: CAPEXINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.EXEMPTEXPORT">
            <summary>
            Enum EXEMPTEXPORT for value: EXEMPTEXPORT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.EXEMPTEXPENSES">
            <summary>
            Enum EXEMPTEXPENSES for value: EXEMPTEXPENSES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.EXEMPTCAPITAL">
            <summary>
            Enum EXEMPTCAPITAL for value: EXEMPTCAPITAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.EXEMPTOUTPUT">
            <summary>
            Enum EXEMPTOUTPUT for value: EXEMPTOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.INPUTTAXED">
            <summary>
            Enum INPUTTAXED for value: INPUTTAXED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.BASEXCLUDED">
            <summary>
            Enum BASEXCLUDED for value: BASEXCLUDED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.GSTONCAPIMPORTS">
            <summary>
            Enum GSTONCAPIMPORTS for value: GSTONCAPIMPORTS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.GSTONIMPORTS">
            <summary>
            Enum GSTONIMPORTS for value: GSTONIMPORTS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.NONE">
            <summary>
            Enum NONE for value: NONE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.INPUT2">
            <summary>
            Enum INPUT2 for value: INPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.ZERORATED">
            <summary>
            Enum ZERORATED for value: ZERORATED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.OUTPUT2">
            <summary>
            Enum OUTPUT2 for value: OUTPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.CAPEXINPUT2">
            <summary>
            Enum CAPEXINPUT2 for value: CAPEXINPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.CAPEXOUTPUT">
            <summary>
            Enum CAPEXOUTPUT for value: CAPEXOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.CAPEXOUTPUT2">
            <summary>
            Enum CAPEXOUTPUT2 for value: CAPEXOUTPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.CAPEXSRINPUT">
            <summary>
            Enum CAPEXSRINPUT for value: CAPEXSRINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.CAPEXSROUTPUT">
            <summary>
            Enum CAPEXSROUTPUT for value: CAPEXSROUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.ECACQUISITIONS">
            <summary>
            Enum ECACQUISITIONS for value: ECACQUISITIONS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.ECZRINPUT">
            <summary>
            Enum ECZRINPUT for value: ECZRINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.ECZROUTPUT">
            <summary>
            Enum ECZROUTPUT for value: ECZROUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.ECZROUTPUTSERVICES">
            <summary>
            Enum ECZROUTPUTSERVICES for value: ECZROUTPUTSERVICES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.EXEMPTINPUT">
            <summary>
            Enum EXEMPTINPUT for value: EXEMPTINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.REVERSECHARGES">
            <summary>
            Enum REVERSECHARGES for value: REVERSECHARGES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.RRINPUT">
            <summary>
            Enum RRINPUT for value: RRINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.RROUTPUT">
            <summary>
            Enum RROUTPUT for value: RROUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.SRINPUT">
            <summary>
            Enum SRINPUT for value: SRINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.SROUTPUT">
            <summary>
            Enum SROUTPUT for value: SROUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.ZERORATEDINPUT">
            <summary>
            Enum ZERORATEDINPUT for value: ZERORATEDINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.ZERORATEDOUTPUT">
            <summary>
            Enum ZERORATEDOUTPUT for value: ZERORATEDOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.BLINPUT">
            <summary>
            Enum BLINPUT for value: BLINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.DSOUTPUT">
            <summary>
            Enum DSOUTPUT for value: DSOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.EPINPUT">
            <summary>
            Enum EPINPUT for value: EPINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.ES33OUTPUT">
            <summary>
            Enum ES33OUTPUT for value: ES33OUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.ESN33OUTPUT">
            <summary>
            Enum ESN33OUTPUT for value: ESN33OUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.IGDSINPUT2">
            <summary>
            Enum IGDSINPUT2 for value: IGDSINPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.IMINPUT2">
            <summary>
            Enum IMINPUT2 for value: IMINPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.MEINPUT">
            <summary>
            Enum MEINPUT for value: MEINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.NRINPUT">
            <summary>
            Enum NRINPUT for value: NRINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.OPINPUT">
            <summary>
            Enum OPINPUT for value: OPINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.OSOUTPUT">
            <summary>
            Enum OSOUTPUT for value: OSOUTPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.TXESSINPUT">
            <summary>
            Enum TXESSINPUT for value: TXESSINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.TXN33INPUT">
            <summary>
            Enum TXN33INPUT for value: TXN33INPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.TXPETINPUT">
            <summary>
            Enum TXPETINPUT for value: TXPETINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.TXREINPUT">
            <summary>
            Enum TXREINPUT for value: TXREINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.INPUT3">
            <summary>
            Enum INPUT3 for value: INPUT3
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.INPUT4">
            <summary>
            Enum INPUT4 for value: INPUT4
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.OUTPUT3">
            <summary>
            Enum OUTPUT3 for value: OUTPUT3
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.OUTPUT4">
            <summary>
            Enum OUTPUT4 for value: OUTPUT4
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.SROUTPUT2">
            <summary>
            Enum SROUTPUT2 for value: SROUTPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.TXCA">
            <summary>
            Enum TXCA for value: TXCA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.SRCAS">
            <summary>
            Enum SRCAS for value: SRCAS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.BLINPUT2">
            <summary>
            Enum BLINPUT2 for value: BLINPUT2
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.DRCHARGESUPPLY20">
            <summary>
            Enum DRCHARGESUPPLY20 for value: DRCHARGESUPPLY20
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.DRCHARGE20">
            <summary>
            Enum DRCHARGE20 for value: DRCHARGE20
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.DRCHARGESUPPLY5">
            <summary>
            Enum DRCHARGESUPPLY5 for value: DRCHARGESUPPLY5
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.DRCHARGE5">
            <summary>
            Enum DRCHARGE5 for value: DRCHARGE5
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.BADDEBTRELIEF">
            <summary>
            Enum BADDEBTRELIEF for value: BADDEBTRELIEF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.IGDSINPUT3">
            <summary>
            Enum IGDSINPUT3 for value: IGDSINPUT3
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.SROVR">
            <summary>
            Enum SROVR for value: SROVR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.TOURISTREFUND">
            <summary>
            Enum TOURISTREFUND for value: TOURISTREFUND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.TXRCN33INPUT">
            <summary>
            Enum TXRCN33INPUT for value: TXRCN33INPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.TXRCREINPUT">
            <summary>
            Enum TXRCREINPUT for value: TXRCREINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.TXRCESSINPUT">
            <summary>
            Enum TXRCESSINPUT for value: TXRCESSINPUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TaxType.TXRCTSINPUT">
            <summary>
            Enum TXRCTSINPUT for value: TXRCTSINPUT
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact">
            <summary>
            TenNinetyNineContact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box1">
            <summary>
            Box 1 on 1099 Form
            </summary>
            <value>Box 1 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box2">
            <summary>
            Box 2 on 1099 Form
            </summary>
            <value>Box 2 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box3">
            <summary>
            Box 3 on 1099 Form
            </summary>
            <value>Box 3 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box4">
            <summary>
            Box 4 on 1099 Form
            </summary>
            <value>Box 4 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box5">
            <summary>
            Box 5 on 1099 Form
            </summary>
            <value>Box 5 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box6">
            <summary>
            Box 6 on 1099 Form
            </summary>
            <value>Box 6 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box7">
            <summary>
            Box 7 on 1099 Form
            </summary>
            <value>Box 7 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box8">
            <summary>
            Box 8 on 1099 Form
            </summary>
            <value>Box 8 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box9">
            <summary>
            Box 9 on 1099 Form
            </summary>
            <value>Box 9 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box10">
            <summary>
            Box 10 on 1099 Form
            </summary>
            <value>Box 10 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box11">
            <summary>
            Box 11 on 1099 Form
            </summary>
            <value>Box 11 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box13">
            <summary>
            Box 13 on 1099 Form
            </summary>
            <value>Box 13 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Box14">
            <summary>
            Box 14 on 1099 Form
            </summary>
            <value>Box 14 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Name">
            <summary>
            Contact name on 1099 Form
            </summary>
            <value>Contact name on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.FederalTaxIDType">
            <summary>
            Contact Fed Tax ID type
            </summary>
            <value>Contact Fed Tax ID type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.City">
            <summary>
            Contact city on 1099 Form
            </summary>
            <value>Contact city on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Zip">
            <summary>
            Contact zip on 1099 Form
            </summary>
            <value>Contact zip on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.State">
            <summary>
            Contact State on 1099 Form
            </summary>
            <value>Contact State on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Email">
            <summary>
            Contact email on 1099 Form
            </summary>
            <value>Contact email on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.StreetAddress">
            <summary>
            Contact address on 1099 Form
            </summary>
            <value>Contact address on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.TaxID">
            <summary>
            Contact tax id on 1099 Form
            </summary>
            <value>Contact tax id on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.ContactId">
            <summary>
            Contact contact id
            </summary>
            <value>Contact contact id</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.Equals(Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact)">
            <summary>
            Returns true if TenNinetyNineContact instances are equal
            </summary>
            <param name="input">Instance of TenNinetyNineContact to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TenNinetyNineContact.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact">
            <summary>
            TenNinteyNineContact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box1">
            <summary>
            Box 1 on 1099 Form
            </summary>
            <value>Box 1 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box2">
            <summary>
            Box 2 on 1099 Form
            </summary>
            <value>Box 2 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box3">
            <summary>
            Box 3 on 1099 Form
            </summary>
            <value>Box 3 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box4">
            <summary>
            Box 4 on 1099 Form
            </summary>
            <value>Box 4 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box5">
            <summary>
            Box 5 on 1099 Form
            </summary>
            <value>Box 5 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box6">
            <summary>
            Box 6 on 1099 Form
            </summary>
            <value>Box 6 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box7">
            <summary>
            Box 7 on 1099 Form
            </summary>
            <value>Box 7 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box8">
            <summary>
            Box 8 on 1099 Form
            </summary>
            <value>Box 8 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box9">
            <summary>
            Box 9 on 1099 Form
            </summary>
            <value>Box 9 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box10">
            <summary>
            Box 10 on 1099 Form
            </summary>
            <value>Box 10 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box11">
            <summary>
            Box 11 on 1099 Form
            </summary>
            <value>Box 11 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box13">
            <summary>
            Box 13 on 1099 Form
            </summary>
            <value>Box 13 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Box14">
            <summary>
            Box 14 on 1099 Form
            </summary>
            <value>Box 14 on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Name">
            <summary>
            Contact name on 1099 Form
            </summary>
            <value>Contact name on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.FederalTaxIDType">
            <summary>
            Contact Fed Tax ID type
            </summary>
            <value>Contact Fed Tax ID type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.City">
            <summary>
            Contact city on 1099 Form
            </summary>
            <value>Contact city on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Zip">
            <summary>
            Contact zip on 1099 Form
            </summary>
            <value>Contact zip on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.State">
            <summary>
            Contact State on 1099 Form
            </summary>
            <value>Contact State on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Email">
            <summary>
            Contact email on 1099 Form
            </summary>
            <value>Contact email on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.StreetAddress">
            <summary>
            Contact address on 1099 Form
            </summary>
            <value>Contact address on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.TaxID">
            <summary>
            Contact tax id on 1099 Form
            </summary>
            <value>Contact tax id on 1099 Form</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.ContactId">
            <summary>
            Contact contact id
            </summary>
            <value>Contact contact id</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.Equals(Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact)">
            <summary>
            Returns true if TenNinteyNineContact instances are equal
            </summary>
            <param name="input">Instance of TenNinteyNineContact to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TenNinteyNineContact.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone">
            <summary>
            Timezone specifications
            </summary>
            <value>Timezone specifications</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.MOROCCOSTANDARDTIME">
            <summary>
            Enum MOROCCOSTANDARDTIME for value: MOROCCOSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.UTC">
            <summary>
            Enum UTC for value: UTC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.GMTSTANDARDTIME">
            <summary>
            Enum GMTSTANDARDTIME for value: GMTSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.GREENWICHSTANDARDTIME">
            <summary>
            Enum GREENWICHSTANDARDTIME for value: GREENWICHSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.WEUROPESTANDARDTIME">
            <summary>
            Enum WEUROPESTANDARDTIME for value: WEUROPESTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CENTRALEUROPESTANDARDTIME">
            <summary>
            Enum CENTRALEUROPESTANDARDTIME for value: CENTRALEUROPESTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.ROMANCESTANDARDTIME">
            <summary>
            Enum ROMANCESTANDARDTIME for value: ROMANCESTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CENTRALEUROPEANSTANDARDTIME">
            <summary>
            Enum CENTRALEUROPEANSTANDARDTIME for value: CENTRALEUROPEANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.WCENTRALAFRICASTANDARDTIME">
            <summary>
            Enum WCENTRALAFRICASTANDARDTIME for value: WCENTRALAFRICASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.NAMIBIASTANDARDTIME">
            <summary>
            Enum NAMIBIASTANDARDTIME for value: NAMIBIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.JORDANSTANDARDTIME">
            <summary>
            Enum JORDANSTANDARDTIME for value: JORDANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.GTBSTANDARDTIME">
            <summary>
            Enum GTBSTANDARDTIME for value: GTBSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.MIDDLEEASTSTANDARDTIME">
            <summary>
            Enum MIDDLEEASTSTANDARDTIME for value: MIDDLEEASTSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.EGYPTSTANDARDTIME">
            <summary>
            Enum EGYPTSTANDARDTIME for value: EGYPTSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.SYRIASTANDARDTIME">
            <summary>
            Enum SYRIASTANDARDTIME for value: SYRIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.EEUROPESTANDARDTIME">
            <summary>
            Enum EEUROPESTANDARDTIME for value: EEUROPESTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.SOUTHAFRICASTANDARDTIME">
            <summary>
            Enum SOUTHAFRICASTANDARDTIME for value: SOUTHAFRICASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.FLESTANDARDTIME">
            <summary>
            Enum FLESTANDARDTIME for value: FLESTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.TURKEYSTANDARDTIME">
            <summary>
            Enum TURKEYSTANDARDTIME for value: TURKEYSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.ISRAELSTANDARDTIME">
            <summary>
            Enum ISRAELSTANDARDTIME for value: ISRAELSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.KALININGRADSTANDARDTIME">
            <summary>
            Enum KALININGRADSTANDARDTIME for value: KALININGRADSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.LIBYASTANDARDTIME">
            <summary>
            Enum LIBYASTANDARDTIME for value: LIBYASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.ARABICSTANDARDTIME">
            <summary>
            Enum ARABICSTANDARDTIME for value: ARABICSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.ARABSTANDARDTIME">
            <summary>
            Enum ARABSTANDARDTIME for value: ARABSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.BELARUSSTANDARDTIME">
            <summary>
            Enum BELARUSSTANDARDTIME for value: BELARUSSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.RUSSIANSTANDARDTIME">
            <summary>
            Enum RUSSIANSTANDARDTIME for value: RUSSIANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.EAFRICASTANDARDTIME">
            <summary>
            Enum EAFRICASTANDARDTIME for value: EAFRICASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.IRANSTANDARDTIME">
            <summary>
            Enum IRANSTANDARDTIME for value: IRANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.ARABIANSTANDARDTIME">
            <summary>
            Enum ARABIANSTANDARDTIME for value: ARABIANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.AZERBAIJANSTANDARDTIME">
            <summary>
            Enum AZERBAIJANSTANDARDTIME for value: AZERBAIJANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.RUSSIATIMEZONE3">
            <summary>
            Enum RUSSIATIMEZONE3 for value: RUSSIATIMEZONE3
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.MAURITIUSSTANDARDTIME">
            <summary>
            Enum MAURITIUSSTANDARDTIME for value: MAURITIUSSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.GEORGIANSTANDARDTIME">
            <summary>
            Enum GEORGIANSTANDARDTIME for value: GEORGIANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CAUCASUSSTANDARDTIME">
            <summary>
            Enum CAUCASUSSTANDARDTIME for value: CAUCASUSSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.AFGHANISTANSTANDARDTIME">
            <summary>
            Enum AFGHANISTANSTANDARDTIME for value: AFGHANISTANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.WESTASIASTANDARDTIME">
            <summary>
            Enum WESTASIASTANDARDTIME for value: WESTASIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.EKATERINBURGSTANDARDTIME">
            <summary>
            Enum EKATERINBURGSTANDARDTIME for value: EKATERINBURGSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.PAKISTANSTANDARDTIME">
            <summary>
            Enum PAKISTANSTANDARDTIME for value: PAKISTANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.INDIASTANDARDTIME">
            <summary>
            Enum INDIASTANDARDTIME for value: INDIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.SRILANKASTANDARDTIME">
            <summary>
            Enum SRILANKASTANDARDTIME for value: SRILANKASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.NEPALSTANDARDTIME">
            <summary>
            Enum NEPALSTANDARDTIME for value: NEPALSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CENTRALASIASTANDARDTIME">
            <summary>
            Enum CENTRALASIASTANDARDTIME for value: CENTRALASIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.BANGLADESHSTANDARDTIME">
            <summary>
            Enum BANGLADESHSTANDARDTIME for value: BANGLADESHSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.NCENTRALASIASTANDARDTIME">
            <summary>
            Enum NCENTRALASIASTANDARDTIME for value: NCENTRALASIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.MYANMARSTANDARDTIME">
            <summary>
            Enum MYANMARSTANDARDTIME for value: MYANMARSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.SEASIASTANDARDTIME">
            <summary>
            Enum SEASIASTANDARDTIME for value: SEASIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.NORTHASIASTANDARDTIME">
            <summary>
            Enum NORTHASIASTANDARDTIME for value: NORTHASIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CHINASTANDARDTIME">
            <summary>
            Enum CHINASTANDARDTIME for value: CHINASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.NORTHASIAEASTSTANDARDTIME">
            <summary>
            Enum NORTHASIAEASTSTANDARDTIME for value: NORTHASIAEASTSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.SINGAPORESTANDARDTIME">
            <summary>
            Enum SINGAPORESTANDARDTIME for value: SINGAPORESTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.WAUSTRALIASTANDARDTIME">
            <summary>
            Enum WAUSTRALIASTANDARDTIME for value: WAUSTRALIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.TAIPEISTANDARDTIME">
            <summary>
            Enum TAIPEISTANDARDTIME for value: TAIPEISTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.ULAANBAATARSTANDARDTIME">
            <summary>
            Enum ULAANBAATARSTANDARDTIME for value: ULAANBAATARSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.TOKYOSTANDARDTIME">
            <summary>
            Enum TOKYOSTANDARDTIME for value: TOKYOSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.KOREASTANDARDTIME">
            <summary>
            Enum KOREASTANDARDTIME for value: KOREASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.YAKUTSKSTANDARDTIME">
            <summary>
            Enum YAKUTSKSTANDARDTIME for value: YAKUTSKSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CENAUSTRALIASTANDARDTIME">
            <summary>
            Enum CENAUSTRALIASTANDARDTIME for value: CENAUSTRALIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.AUSCENTRALSTANDARDTIME">
            <summary>
            Enum AUSCENTRALSTANDARDTIME for value: AUSCENTRALSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.EAUSTRALIASTANDARDTIME">
            <summary>
            Enum EAUSTRALIASTANDARDTIME for value: EAUSTRALIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.AUSEASTERNSTANDARDTIME">
            <summary>
            Enum AUSEASTERNSTANDARDTIME for value: AUSEASTERNSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.WESTPACIFICSTANDARDTIME">
            <summary>
            Enum WESTPACIFICSTANDARDTIME for value: WESTPACIFICSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.TASMANIASTANDARDTIME">
            <summary>
            Enum TASMANIASTANDARDTIME for value: TASMANIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.MAGADANSTANDARDTIME">
            <summary>
            Enum MAGADANSTANDARDTIME for value: MAGADANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.VLADIVOSTOKSTANDARDTIME">
            <summary>
            Enum VLADIVOSTOKSTANDARDTIME for value: VLADIVOSTOKSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.RUSSIATIMEZONE10">
            <summary>
            Enum RUSSIATIMEZONE10 for value: RUSSIATIMEZONE10
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CENTRALPACIFICSTANDARDTIME">
            <summary>
            Enum CENTRALPACIFICSTANDARDTIME for value: CENTRALPACIFICSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.RUSSIATIMEZONE11">
            <summary>
            Enum RUSSIATIMEZONE11 for value: RUSSIATIMEZONE11
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.NEWZEALANDSTANDARDTIME">
            <summary>
            Enum NEWZEALANDSTANDARDTIME for value: NEWZEALANDSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.UTC12">
            <summary>
            Enum UTC12 for value: UTC+12
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.UTC13">
            <summary>
            Enum UTC13 for value: UTC+13
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.FIJISTANDARDTIME">
            <summary>
            Enum FIJISTANDARDTIME for value: FIJISTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.KAMCHATKASTANDARDTIME">
            <summary>
            Enum KAMCHATKASTANDARDTIME for value: KAMCHATKASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.TONGASTANDARDTIME">
            <summary>
            Enum TONGASTANDARDTIME for value: TONGASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.SAMOASTANDARDTIME">
            <summary>
            Enum SAMOASTANDARDTIME for value: SAMOASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.LINEISLANDSSTANDARDTIME">
            <summary>
            Enum LINEISLANDSSTANDARDTIME for value: LINEISLANDSSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.AZORESSTANDARDTIME">
            <summary>
            Enum AZORESSTANDARDTIME for value: AZORESSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CAPEVERDESTANDARDTIME">
            <summary>
            Enum CAPEVERDESTANDARDTIME for value: CAPEVERDESTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.UTC02">
            <summary>
            Enum UTC02 for value: UTC02
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.MIDATLANTICSTANDARDTIME">
            <summary>
            Enum MIDATLANTICSTANDARDTIME for value: MIDATLANTICSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.ESOUTHAMERICASTANDARDTIME">
            <summary>
            Enum ESOUTHAMERICASTANDARDTIME for value: ESOUTHAMERICASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.ARGENTINASTANDARDTIME">
            <summary>
            Enum ARGENTINASTANDARDTIME for value: ARGENTINASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.SAEASTERNSTANDARDTIME">
            <summary>
            Enum SAEASTERNSTANDARDTIME for value: SAEASTERNSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.GREENLANDSTANDARDTIME">
            <summary>
            Enum GREENLANDSTANDARDTIME for value: GREENLANDSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.MONTEVIDEOSTANDARDTIME">
            <summary>
            Enum MONTEVIDEOSTANDARDTIME for value: MONTEVIDEOSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.BAHIASTANDARDTIME">
            <summary>
            Enum BAHIASTANDARDTIME for value: BAHIASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.NEWFOUNDLANDSTANDARDTIME">
            <summary>
            Enum NEWFOUNDLANDSTANDARDTIME for value: NEWFOUNDLANDSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.PARAGUAYSTANDARDTIME">
            <summary>
            Enum PARAGUAYSTANDARDTIME for value: PARAGUAYSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.ATLANTICSTANDARDTIME">
            <summary>
            Enum ATLANTICSTANDARDTIME for value: ATLANTICSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CENTRALBRAZILIANSTANDARDTIME">
            <summary>
            Enum CENTRALBRAZILIANSTANDARDTIME for value: CENTRALBRAZILIANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.SAWESTERNSTANDARDTIME">
            <summary>
            Enum SAWESTERNSTANDARDTIME for value: SAWESTERNSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.PACIFICSASTANDARDTIME">
            <summary>
            Enum PACIFICSASTANDARDTIME for value: PACIFICSASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.VENEZUELASTANDARDTIME">
            <summary>
            Enum VENEZUELASTANDARDTIME for value: VENEZUELASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.SAPACIFICSTANDARDTIME">
            <summary>
            Enum SAPACIFICSTANDARDTIME for value: SAPACIFICSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.EASTERNSTANDARDTIME">
            <summary>
            Enum EASTERNSTANDARDTIME for value: EASTERNSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.USEASTERNSTANDARDTIME">
            <summary>
            Enum USEASTERNSTANDARDTIME for value: USEASTERNSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CENTRALAMERICASTANDARDTIME">
            <summary>
            Enum CENTRALAMERICASTANDARDTIME for value: CENTRALAMERICASTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CENTRALSTANDARDTIME">
            <summary>
            Enum CENTRALSTANDARDTIME for value: CENTRALSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CENTRALSTANDARDTIMEMEXICO">
            <summary>
            Enum CENTRALSTANDARDTIMEMEXICO for value: CENTRALSTANDARDTIME(MEXICO)
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.CANADACENTRALSTANDARDTIME">
            <summary>
            Enum CANADACENTRALSTANDARDTIME for value: CANADACENTRALSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.USMOUNTAINSTANDARDTIME">
            <summary>
            Enum USMOUNTAINSTANDARDTIME for value: USMOUNTAINSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.MOUNTAINSTANDARDTIMEMEXICO">
            <summary>
            Enum MOUNTAINSTANDARDTIMEMEXICO for value: MOUNTAINSTANDARDTIME(MEXICO)
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.MOUNTAINSTANDARDTIME">
            <summary>
            Enum MOUNTAINSTANDARDTIME for value: MOUNTAINSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.PACIFICSTANDARDTIMEMEXICO">
            <summary>
            Enum PACIFICSTANDARDTIMEMEXICO for value: PACIFICSTANDARDTIME(MEXICO)
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.PACIFICSTANDARDTIME">
            <summary>
            Enum PACIFICSTANDARDTIME for value: PACIFICSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.ALASKANSTANDARDTIME">
            <summary>
            Enum ALASKANSTANDARDTIME for value: ALASKANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.HAWAIIANSTANDARDTIME">
            <summary>
            Enum HAWAIIANSTANDARDTIME for value: HAWAIIANSTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.UTC11">
            <summary>
            Enum UTC11 for value: UTC11
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.DATELINESTANDARDTIME">
            <summary>
            Enum DATELINESTANDARDTIME for value: DATELINESTANDARDTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TimeZone.EASTERISLANDSTANDARDTIME">
            <summary>
            Enum EASTERISLANDSTANDARDTIME for value: EASTERISLANDSTANDARDTIME
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategories">
            <summary>
            TrackingCategories
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategories._TrackingCategories">
            <summary>
            Gets or Sets _TrackingCategories
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategories.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategories.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategories.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategories.Equals(Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategories)">
            <summary>
            Returns true if TrackingCategories instances are equal
            </summary>
            <param name="input">Instance of TrackingCategories to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategories.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategories.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory">
            <summary>
            TrackingCategory
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.StatusEnum">
            <summary>
            The status of a tracking category
            </summary>
            <value>The status of a tracking category</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.StatusEnum.ARCHIVED">
            <summary>
            Enum ARCHIVED for value: ARCHIVED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.Status">
            <summary>
            The status of a tracking category
            </summary>
            <value>The status of a tracking category</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.TrackingCategoryID">
            <summary>
            The Xero identifier for a tracking category e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
            </summary>
            <value>The Xero identifier for a tracking category e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.TrackingOptionID">
            <summary>
            The Xero identifier for a tracking option e.g. dc54c220-0140-495a-b925-3246adc0075f
            </summary>
            <value>The Xero identifier for a tracking option e.g. dc54c220-0140-495a-b925-3246adc0075f</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.Name">
            <summary>
            The name of the tracking category e.g. Department, Region (max length &#x3D; 100)
            </summary>
            <value>The name of the tracking category e.g. Department, Region (max length &#x3D; 100)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.Option">
            <summary>
            The option name of the tracking option e.g. East, West (max length &#x3D; 100)
            </summary>
            <value>The option name of the tracking option e.g. East, West (max length &#x3D; 100)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.Options">
            <summary>
            See Tracking Options
            </summary>
            <value>See Tracking Options</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.Equals(Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory)">
            <summary>
            Returns true if TrackingCategory instances are equal
            </summary>
            <param name="input">Instance of TrackingCategory to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingCategory.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption">
            <summary>
            TrackingOption
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.StatusEnum">
            <summary>
            The status of a tracking option
            </summary>
            <value>The status of a tracking option</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.StatusEnum.ARCHIVED">
            <summary>
            Enum ARCHIVED for value: ARCHIVED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.StatusEnum.DELETED">
            <summary>
            Enum DELETED for value: DELETED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.Status">
            <summary>
            The status of a tracking option
            </summary>
            <value>The status of a tracking option</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.TrackingOptionID">
            <summary>
            The Xero identifier for a tracking option e.g. ae777a87-5ef3-4fa0-a4f0-d10e1f13073a
            </summary>
            <value>The Xero identifier for a tracking option e.g. ae777a87-5ef3-4fa0-a4f0-d10e1f13073a</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.Name">
            <summary>
            The name of the tracking option e.g. Marketing, East (max length &#x3D; 100)
            </summary>
            <value>The name of the tracking option e.g. Marketing, East (max length &#x3D; 100)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.TrackingCategoryID">
            <summary>
            Filter by a tracking category e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
            </summary>
            <value>Filter by a tracking category e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.Equals(Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption)">
            <summary>
            Returns true if TrackingOption instances are equal
            </summary>
            <param name="input">Instance of TrackingOption to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOption.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOptions">
            <summary>
            TrackingOptions
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOptions.Options">
            <summary>
            Gets or Sets Options
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOptions.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOptions.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOptions.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOptions.Equals(Xero.NetStandard.OAuth2.Model.Accounting.TrackingOptions)">
            <summary>
            Returns true if TrackingOptions instances are equal
            </summary>
            <param name="input">Instance of TrackingOptions to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOptions.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.TrackingOptions.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.User">
            <summary>
            User
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.User.OrganisationRoleEnum">
            <summary>
            User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)
            </summary>
            <value>User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.User.OrganisationRoleEnum.READONLY">
            <summary>
            Enum READONLY for value: READONLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.User.OrganisationRoleEnum.INVOICEONLY">
            <summary>
            Enum INVOICEONLY for value: INVOICEONLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.User.OrganisationRoleEnum.STANDARD">
            <summary>
            Enum STANDARD for value: STANDARD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.User.OrganisationRoleEnum.FINANCIALADVISER">
            <summary>
            Enum FINANCIALADVISER for value: FINANCIALADVISER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.User.OrganisationRoleEnum.MANAGEDCLIENT">
            <summary>
            Enum MANAGEDCLIENT for value: MANAGEDCLIENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.User.OrganisationRoleEnum.CASHBOOKCLIENT">
            <summary>
            Enum CASHBOOKCLIENT for value: CASHBOOKCLIENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Accounting.User.OrganisationRoleEnum.UNKNOWN">
            <summary>
            Enum UNKNOWN for value: UNKNOWN
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.User.OrganisationRole">
            <summary>
            User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)
            </summary>
            <value>User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.User.UserID">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.User.EmailAddress">
            <summary>
            Email address of user
            </summary>
            <value>Email address of user</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.User.FirstName">
            <summary>
            First name of user
            </summary>
            <value>First name of user</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.User.LastName">
            <summary>
            Last name of user
            </summary>
            <value>Last name of user</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.User.UpdatedDateUTC">
            <summary>
            Timestamp of last change to user
            </summary>
            <value>Timestamp of last change to user</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.User.IsSubscriber">
            <summary>
            Boolean to indicate if user is the subscriber
            </summary>
            <value>Boolean to indicate if user is the subscriber</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.User.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.User.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.User.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.User.Equals(Xero.NetStandard.OAuth2.Model.Accounting.User)">
            <summary>
            Returns true if User instances are equal
            </summary>
            <param name="input">Instance of User to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.User.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.User.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.Users">
            <summary>
            Users
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.Users._Users">
            <summary>
            Gets or Sets _Users
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Users.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Users.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Users.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Users.Equals(Xero.NetStandard.OAuth2.Model.Accounting.Users)">
            <summary>
            Returns true if Users instances are equal
            </summary>
            <param name="input">Instance of Users to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Users.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.Users.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Accounting.ValidationError">
            <summary>
            ValidationError
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Accounting.ValidationError.Message">
            <summary>
            Validation error message
            </summary>
            <value>Validation error message</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ValidationError.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ValidationError.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ValidationError.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ValidationError.Equals(Xero.NetStandard.OAuth2.Model.Accounting.ValidationError)">
            <summary>
            Returns true if ValidationError instances are equal
            </summary>
            <param name="input">Instance of ValidationError to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ValidationError.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Accounting.ValidationError.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Appstore.Plan">
            <summary>
            Plan
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Appstore.Plan.StatusEnum">
            <summary>
            Status of the plan. Available statuses are ACTIVE, CANCELED, and PENDING_ACTIVATION. 
            </summary>
            <value>Status of the plan. Available statuses are ACTIVE, CANCELED, and PENDING_ACTIVATION. </value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Appstore.Plan.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Appstore.Plan.StatusEnum.CANCELED">
            <summary>
            Enum CANCELED for value: CANCELED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Appstore.Plan.StatusEnum.PENDINGACTIVATION">
            <summary>
            Enum PENDINGACTIVATION for value: PENDING_ACTIVATION
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Plan.Status">
            <summary>
            Status of the plan. Available statuses are ACTIVE, CANCELED, and PENDING_ACTIVATION. 
            </summary>
            <value>Status of the plan. Available statuses are ACTIVE, CANCELED, and PENDING_ACTIVATION. </value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Plan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Appstore.Plan" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Plan.Id">
            <summary>
            The unique identifier of the plan
            </summary>
            <value>The unique identifier of the plan</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Plan.Name">
            <summary>
            The name of the plan. It is used in the invoice line item description. 
            </summary>
            <value>The name of the plan. It is used in the invoice line item description. </value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Plan.SubscriptionItems">
            <summary>
            List of the subscription items belonging to the plan. It does not include cancelled subscription items. 
            </summary>
            <value>List of the subscription items belonging to the plan. It does not include cancelled subscription items. </value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Plan.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Plan.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Plan.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Plan.Equals(Xero.NetStandard.OAuth2.Model.Appstore.Plan)">
            <summary>
            Returns true if Plan instances are equal
            </summary>
            <param name="input">Instance of Plan to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Plan.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Plan.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Appstore.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Price.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Appstore.Price" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Price.Amount">
            <summary>
            The net (before tax) amount.
            </summary>
            <value>The net (before tax) amount.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Price.Currency">
            <summary>
            The currency of the price.
            </summary>
            <value>The currency of the price.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Price.Id">
            <summary>
            The unique identifier of the price.
            </summary>
            <value>The unique identifier of the price.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Price.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Price.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Price.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Price.Equals(Xero.NetStandard.OAuth2.Model.Appstore.Price)">
            <summary>
            Returns true if Price instances are equal
            </summary>
            <param name="input">Instance of Price to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Price.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Price.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails">
            <summary>
            ProblemDetails
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails.Detail">
            <summary>
            Gets or Sets Detail
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails.Extensions">
            <summary>
            Gets or Sets Extensions
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails.Instance">
            <summary>
            Gets or Sets Instance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails.Title">
            <summary>
            Gets or Sets Title
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails.Equals(Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails)">
            <summary>
            Returns true if ProblemDetails instances are equal
            </summary>
            <param name="input">Instance of ProblemDetails to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.ProblemDetails.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Appstore.Product">
            <summary>
            Product
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Appstore.Product.TypeEnum">
            <summary>
            The pricing model of the product: * FIXED: Customers are charged a fixed amount for each billing period * PER_SEAT: Customers are charged based on the number of units they purchase * METERED: Customers are charged per use of this product 
            </summary>
            <value>The pricing model of the product: * FIXED: Customers are charged a fixed amount for each billing period * PER_SEAT: Customers are charged based on the number of units they purchase * METERED: Customers are charged per use of this product </value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Appstore.Product.TypeEnum.FIXED">
            <summary>
            Enum FIXED for value: FIXED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Appstore.Product.TypeEnum.PERSEAT">
            <summary>
            Enum PERSEAT for value: PER_SEAT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Appstore.Product.TypeEnum.METERED">
            <summary>
            Enum METERED for value: METERED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Product.Type">
            <summary>
            The pricing model of the product: * FIXED: Customers are charged a fixed amount for each billing period * PER_SEAT: Customers are charged based on the number of units they purchase * METERED: Customers are charged per use of this product 
            </summary>
            <value>The pricing model of the product: * FIXED: Customers are charged a fixed amount for each billing period * PER_SEAT: Customers are charged based on the number of units they purchase * METERED: Customers are charged per use of this product </value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Product.Id">
            <summary>
            The unique identifier for the product
            </summary>
            <value>The unique identifier for the product</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Product.Name">
            <summary>
            The name of the product
            </summary>
            <value>The name of the product</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Product.SeatUnit">
            <summary>
            The unit of the per seat product. e.g. \&quot;user\&quot;, \&quot;organisation\&quot;, \&quot;SMS\&quot;, etc
            </summary>
            <value>The unit of the per seat product. e.g. \&quot;user\&quot;, \&quot;organisation\&quot;, \&quot;SMS\&quot;, etc</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Product.UsageUnit">
            <summary>
            The unit of the usage product. e.g. \&quot;user\&quot;, \&quot;minutes\&quot;, \&quot;SMS\&quot;, etc
            </summary>
            <value>The unit of the usage product. e.g. \&quot;user\&quot;, \&quot;minutes\&quot;, \&quot;SMS\&quot;, etc</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Product.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Product.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Product.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Product.Equals(Xero.NetStandard.OAuth2.Model.Appstore.Product)">
            <summary>
            Returns true if Product instances are equal
            </summary>
            <param name="input">Instance of Product to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Product.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Product.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Appstore.Subscription">
            <summary>
            Subscription
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.StatusEnum">
            <summary>
            Status of the subscription. Available statuses are ACTIVE, CANCELED, and PAST_DUE.
            </summary>
            <value>Status of the subscription. Available statuses are ACTIVE, CANCELED, and PAST_DUE.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.StatusEnum.CANCELED">
            <summary>
            Enum CANCELED for value: CANCELED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.StatusEnum.PASTDUE">
            <summary>
            Enum PASTDUE for value: PAST_DUE
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.Status">
            <summary>
            Status of the subscription. Available statuses are ACTIVE, CANCELED, and PAST_DUE.
            </summary>
            <value>Status of the subscription. Available statuses are ACTIVE, CANCELED, and PAST_DUE.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Appstore.Subscription" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.CurrentPeriodEnd">
            <summary>
            End of the current period that the subscription has been invoiced for. 
            </summary>
            <value>End of the current period that the subscription has been invoiced for. </value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.EndDate">
            <summary>
            If the subscription has been canceled, this is the date when the subscription ends. If null, the subscription is active and has not been cancelled
            </summary>
            <value>If the subscription has been canceled, this is the date when the subscription ends. If null, the subscription is active and has not been cancelled</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.Id">
            <summary>
            The unique identifier of the subscription
            </summary>
            <value>The unique identifier of the subscription</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.OrganisationId">
            <summary>
            The Xero generated unique identifier for the organisation
            </summary>
            <value>The Xero generated unique identifier for the organisation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.Plans">
            <summary>
            List of plans for the subscription.
            </summary>
            <value>List of plans for the subscription.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.StartDate">
            <summary>
            Date when the subscription was first created.
            </summary>
            <value>Date when the subscription was first created.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.TestMode">
            <summary>
            Boolean used to indicate if the subscription is in test mode
            </summary>
            <value>Boolean used to indicate if the subscription is in test mode</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.Equals(Xero.NetStandard.OAuth2.Model.Appstore.Subscription)">
            <summary>
            Returns true if Subscription instances are equal
            </summary>
            <param name="input">Instance of Subscription to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.Subscription.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem">
            <summary>
            SubscriptionItem
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.StatusEnum">
            <summary>
            Status of the subscription item. Available statuses are ACTIVE, CANCELED, and PENDING_ACTIVATION. 
            </summary>
            <value>Status of the subscription item. Available statuses are ACTIVE, CANCELED, and PENDING_ACTIVATION. </value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.StatusEnum.CANCELED">
            <summary>
            Enum CANCELED for value: CANCELED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.StatusEnum.PENDINGACTIVATION">
            <summary>
            Enum PENDINGACTIVATION for value: PENDING_ACTIVATION
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.Status">
            <summary>
            Status of the subscription item. Available statuses are ACTIVE, CANCELED, and PENDING_ACTIVATION. 
            </summary>
            <value>Status of the subscription item. Available statuses are ACTIVE, CANCELED, and PENDING_ACTIVATION. </value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.EndDate">
            <summary>
            Date when the subscription to this product will end
            </summary>
            <value>Date when the subscription to this product will end</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.Id">
            <summary>
            The unique identifier of the subscription item.
            </summary>
            <value>The unique identifier of the subscription item.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.Price">
            <summary>
            Gets or Sets Price
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.Product">
            <summary>
            Gets or Sets Product
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.Quantity">
            <summary>
            The quantity of the item. For a fixed product, it is 1. For a per-seat product, it is a positive integer. For metered products, it is always null.
            </summary>
            <value>The quantity of the item. For a fixed product, it is 1. For a per-seat product, it is a positive integer. For metered products, it is always null.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.StartDate">
            <summary>
            Date the subscription started, or will start. Note: this could be in the future for downgrades or reduced number of seats that haven&#39;t taken effect yet. 
            </summary>
            <value>Date the subscription started, or will start. Note: this could be in the future for downgrades or reduced number of seats that haven&#39;t taken effect yet. </value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.TestMode">
            <summary>
            If the subscription is a test subscription
            </summary>
            <value>If the subscription is a test subscription</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.Equals(Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem)">
            <summary>
            Returns true if SubscriptionItem instances are equal
            </summary>
            <param name="input">Instance of SubscriptionItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Appstore.SubscriptionItem.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.AssetStatus">
            <summary>
            Gets or Sets AssetStatus
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Asset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Asset.Asset" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.AssetId">
            <summary>
            The Xero-generated Id for the asset
            </summary>
            <value>The Xero-generated Id for the asset</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.AssetName">
            <summary>
            The name of the asset
            </summary>
            <value>The name of the asset</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.AssetTypeId">
            <summary>
            The Xero-generated Id for the asset type
            </summary>
            <value>The Xero-generated Id for the asset type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.AssetNumber">
            <summary>
            Must be unique.
            </summary>
            <value>Must be unique.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.PurchaseDate">
            <summary>
            The date the asset was purchased YYYY-MM-DD
            </summary>
            <value>The date the asset was purchased YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.PurchasePrice">
            <summary>
            The purchase price of the asset
            </summary>
            <value>The purchase price of the asset</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.DisposalDate">
            <summary>
            The date the asset was disposed
            </summary>
            <value>The date the asset was disposed</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.DisposalPrice">
            <summary>
            The price the asset was disposed at
            </summary>
            <value>The price the asset was disposed at</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.WarrantyExpiryDate">
            <summary>
            The date the asset’s warranty expires (if needed) YYYY-MM-DD
            </summary>
            <value>The date the asset’s warranty expires (if needed) YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.SerialNumber">
            <summary>
            The asset&#39;s serial number
            </summary>
            <value>The asset&#39;s serial number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.BookDepreciationSetting">
            <summary>
            Gets or Sets BookDepreciationSetting
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.BookDepreciationDetail">
            <summary>
            Gets or Sets BookDepreciationDetail
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.CanRollback">
            <summary>
            Boolean to indicate whether depreciation can be rolled back for this asset individually. This is true if it doesn&#39;t have &#39;legacy&#39; journal entries and if there is no lock period that would prevent this asset from rolling back.
            </summary>
            <value>Boolean to indicate whether depreciation can be rolled back for this asset individually. This is true if it doesn&#39;t have &#39;legacy&#39; journal entries and if there is no lock period that would prevent this asset from rolling back.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.AccountingBookValue">
            <summary>
            The accounting value of the asset
            </summary>
            <value>The accounting value of the asset</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Asset.IsDeleteEnabledForDate">
            <summary>
            Boolean to indicate whether delete is enabled
            </summary>
            <value>Boolean to indicate whether delete is enabled</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Asset.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Asset.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Asset.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Asset.Equals(Xero.NetStandard.OAuth2.Model.Asset.Asset)">
            <summary>
            Returns true if Asset instances are equal
            </summary>
            <param name="input">Instance of Asset to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Asset.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Asset.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.Assets">
            <summary>
            Assets
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Assets.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Assets.Items">
            <summary>
            Gets or Sets Items
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Assets.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Assets.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Assets.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Assets.Equals(Xero.NetStandard.OAuth2.Model.Asset.Assets)">
            <summary>
            Returns true if Assets instances are equal
            </summary>
            <param name="input">Instance of Assets to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Assets.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Assets.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.AssetStatus">
            <summary>
            See Asset Status Codes.
            </summary>
            <value>See Asset Status Codes.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.AssetStatus.Draft">
            <summary>
            Enum Draft for value: Draft
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.AssetStatus.Registered">
            <summary>
            Enum Registered for value: Registered
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.AssetStatus.Disposed">
            <summary>
            Enum Disposed for value: Disposed
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.AssetStatusQueryParam">
            <summary>
            See Asset Status Codes.
            </summary>
            <value>See Asset Status Codes.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.AssetStatusQueryParam.DRAFT">
            <summary>
            Enum DRAFT for value: DRAFT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.AssetStatusQueryParam.REGISTERED">
            <summary>
            Enum REGISTERED for value: REGISTERED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.AssetStatusQueryParam.DISPOSED">
            <summary>
            Enum DISPOSED for value: DISPOSED
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.AssetType">
            <summary>
            AssetType
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.AssetType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Asset.AssetType" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.AssetType.AssetTypeId">
            <summary>
            Xero generated unique identifier for asset types
            </summary>
            <value>Xero generated unique identifier for asset types</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.AssetType.AssetTypeName">
            <summary>
            The name of the asset type
            </summary>
            <value>The name of the asset type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.AssetType.FixedAssetAccountId">
            <summary>
            The asset account for fixed assets of this type
            </summary>
            <value>The asset account for fixed assets of this type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.AssetType.DepreciationExpenseAccountId">
            <summary>
            The expense account for the depreciation of fixed assets of this type
            </summary>
            <value>The expense account for the depreciation of fixed assets of this type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.AssetType.AccumulatedDepreciationAccountId">
            <summary>
            The account for accumulated depreciation of fixed assets of this type
            </summary>
            <value>The account for accumulated depreciation of fixed assets of this type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.AssetType.BookDepreciationSetting">
            <summary>
            Gets or Sets BookDepreciationSetting
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.AssetType.Locks">
            <summary>
            All asset types that have accumulated depreciation for any assets that use them are deemed ‘locked’ and cannot be removed.
            </summary>
            <value>All asset types that have accumulated depreciation for any assets that use them are deemed ‘locked’ and cannot be removed.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.AssetType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.AssetType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.AssetType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.AssetType.Equals(Xero.NetStandard.OAuth2.Model.Asset.AssetType)">
            <summary>
            Returns true if AssetType instances are equal
            </summary>
            <param name="input">Instance of AssetType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.AssetType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.AssetType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail">
            <summary>
            BookDepreciationDetail
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.CurrentCapitalGain">
            <summary>
            When an asset is disposed, this will be the sell price minus the purchase price if a profit was made.
            </summary>
            <value>When an asset is disposed, this will be the sell price minus the purchase price if a profit was made.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.CurrentGainLoss">
            <summary>
            When an asset is disposed, this will be the lowest one of sell price or purchase price, minus the current book value.
            </summary>
            <value>When an asset is disposed, this will be the lowest one of sell price or purchase price, minus the current book value.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.DepreciationStartDate">
            <summary>
            YYYY-MM-DD
            </summary>
            <value>YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.CostLimit">
            <summary>
            The value of the asset you want to depreciate, if this is less than the cost of the asset.
            </summary>
            <value>The value of the asset you want to depreciate, if this is less than the cost of the asset.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.ResidualValue">
            <summary>
            The value of the asset remaining when you&#39;ve fully depreciated it.
            </summary>
            <value>The value of the asset remaining when you&#39;ve fully depreciated it.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.PriorAccumDepreciationAmount">
            <summary>
            All depreciation prior to the current financial year.
            </summary>
            <value>All depreciation prior to the current financial year.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.CurrentAccumDepreciationAmount">
            <summary>
            All depreciation occurring in the current financial year.
            </summary>
            <value>All depreciation occurring in the current financial year.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.Equals(Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail)">
            <summary>
            Returns true if BookDepreciationDetail instances are equal
            </summary>
            <param name="input">Instance of BookDepreciationDetail to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationDetail.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting">
            <summary>
            BookDepreciationSetting
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationMethodEnum">
            <summary>
            The method of depreciation applied to this asset. See Depreciation Methods
            </summary>
            <value>The method of depreciation applied to this asset. See Depreciation Methods</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationMethodEnum.NoDepreciation">
            <summary>
            Enum NoDepreciation for value: NoDepreciation
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationMethodEnum.StraightLine">
            <summary>
            Enum StraightLine for value: StraightLine
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationMethodEnum.DiminishingValue100">
            <summary>
            Enum DiminishingValue100 for value: DiminishingValue100
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationMethodEnum.DiminishingValue150">
            <summary>
            Enum DiminishingValue150 for value: DiminishingValue150
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationMethodEnum.DiminishingValue200">
            <summary>
            Enum DiminishingValue200 for value: DiminishingValue200
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationMethodEnum.FullDepreciation">
            <summary>
            Enum FullDepreciation for value: FullDepreciation
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationMethod">
            <summary>
            The method of depreciation applied to this asset. See Depreciation Methods
            </summary>
            <value>The method of depreciation applied to this asset. See Depreciation Methods</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.AveragingMethodEnum">
            <summary>
            The method of averaging applied to this asset. See Averaging Methods
            </summary>
            <value>The method of averaging applied to this asset. See Averaging Methods</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.AveragingMethodEnum.FullMonth">
            <summary>
            Enum FullMonth for value: FullMonth
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.AveragingMethodEnum.ActualDays">
            <summary>
            Enum ActualDays for value: ActualDays
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.AveragingMethod">
            <summary>
            The method of averaging applied to this asset. See Averaging Methods
            </summary>
            <value>The method of averaging applied to this asset. See Averaging Methods</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationCalculationMethodEnum">
            <summary>
            See Depreciation Calculation Methods
            </summary>
            <value>See Depreciation Calculation Methods</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationCalculationMethodEnum.Rate">
            <summary>
            Enum Rate for value: Rate
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationCalculationMethodEnum.Life">
            <summary>
            Enum Life for value: Life
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationCalculationMethodEnum.None">
            <summary>
            Enum None for value: None
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationCalculationMethod">
            <summary>
            See Depreciation Calculation Methods
            </summary>
            <value>See Depreciation Calculation Methods</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciationRate">
            <summary>
            The rate of depreciation (e.g. 0.05)
            </summary>
            <value>The rate of depreciation (e.g. 0.05)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.EffectiveLifeYears">
            <summary>
            Effective life of the asset in years (e.g. 5)
            </summary>
            <value>Effective life of the asset in years (e.g. 5)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciableObjectId">
            <summary>
            Unique Xero identifier for the depreciable object
            </summary>
            <value>Unique Xero identifier for the depreciable object</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.DepreciableObjectType">
            <summary>
            The type of asset object
            </summary>
            <value>The type of asset object</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.BookEffectiveDateOfChangeId">
            <summary>
            Unique Xero identifier for the effective date change
            </summary>
            <value>Unique Xero identifier for the effective date change</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.Equals(Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting)">
            <summary>
            Returns true if BookDepreciationSetting instances are equal
            </summary>
            <param name="input">Instance of BookDepreciationSetting to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.BookDepreciationSetting.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Error.ResourceValidationErrors">
            <summary>
            Array of elements of resource validation errors
            </summary>
            <value>Array of elements of resource validation errors</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Error.FieldValidationErrors">
            <summary>
            Array of elements of field validation errors
            </summary>
            <value>Array of elements of field validation errors</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Error.Type">
            <summary>
            The internal type of error, not accessible externally
            </summary>
            <value>The internal type of error, not accessible externally</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Error.Title">
            <summary>
            Title of the error
            </summary>
            <value>Title of the error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Error.Detail">
            <summary>
            Detail of the error
            </summary>
            <value>Detail of the error</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Error.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Error.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Error.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Error.Equals(Xero.NetStandard.OAuth2.Model.Asset.Error)">
            <summary>
            Returns true if Error instances are equal
            </summary>
            <param name="input">Instance of Error to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Error.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Error.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement">
            <summary>
            FieldValidationErrorsElement
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement.FieldName">
            <summary>
            The field name of the erroneous field
            </summary>
            <value>The field name of the erroneous field</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement.ValueProvided">
            <summary>
            The provided value
            </summary>
            <value>The provided value</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement.LocalisedMessage">
            <summary>
            Explanation of the field validation error
            </summary>
            <value>Explanation of the field validation error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement.Type">
            <summary>
            Internal type of the field validation error message
            </summary>
            <value>Internal type of the field validation error message</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement.Title">
            <summary>
            Title of the field validation error
            </summary>
            <value>Title of the field validation error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement.Detail">
            <summary>
            Detail of the field validation error
            </summary>
            <value>Detail of the field validation error</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement.Equals(Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement)">
            <summary>
            Returns true if FieldValidationErrorsElement instances are equal
            </summary>
            <param name="input">Instance of FieldValidationErrorsElement to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.FieldValidationErrorsElement.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.Pagination">
            <summary>
            Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Pagination.Page">
            <summary>
            Gets or Sets Page
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Pagination.PageSize">
            <summary>
            Gets or Sets PageSize
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Pagination.PageCount">
            <summary>
            Gets or Sets PageCount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Pagination.ItemCount">
            <summary>
            Gets or Sets ItemCount
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Pagination.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Pagination.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Pagination.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Pagination.Equals(Xero.NetStandard.OAuth2.Model.Asset.Pagination)">
            <summary>
            Returns true if Pagination instances are equal
            </summary>
            <param name="input">Instance of Pagination to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Pagination.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Pagination.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement">
            <summary>
            ResourceValidationErrorsElement
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement.ResourceName">
            <summary>
            The field name of the erroneous field
            </summary>
            <value>The field name of the erroneous field</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement.LocalisedMessage">
            <summary>
            Explanation of the resource validation error
            </summary>
            <value>Explanation of the resource validation error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement.Type">
            <summary>
            Internal type of the resource error message
            </summary>
            <value>Internal type of the resource error message</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement.Title">
            <summary>
            Title of the resource validation error
            </summary>
            <value>Title of the resource validation error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement.Detail">
            <summary>
            Detail of the resource validation error
            </summary>
            <value>Detail of the resource validation error</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement.Equals(Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement)">
            <summary>
            Returns true if ResourceValidationErrorsElement instances are equal
            </summary>
            <param name="input">Instance of ResourceValidationErrorsElement to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.ResourceValidationErrorsElement.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Asset.Setting">
            <summary>
            Setting
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Setting.AssetNumberPrefix">
            <summary>
            The prefix used for fixed asset numbers (“FA-” by default)
            </summary>
            <value>The prefix used for fixed asset numbers (“FA-” by default)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Setting.AssetNumberSequence">
            <summary>
            The next available sequence number
            </summary>
            <value>The next available sequence number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Setting.AssetStartDate">
            <summary>
            The date depreciation calculations started on registered fixed assets in Xero
            </summary>
            <value>The date depreciation calculations started on registered fixed assets in Xero</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Setting.LastDepreciationDate">
            <summary>
            The last depreciation date
            </summary>
            <value>The last depreciation date</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Setting.DefaultGainOnDisposalAccountId">
            <summary>
            Default account that gains are posted to
            </summary>
            <value>Default account that gains are posted to</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Setting.DefaultLossOnDisposalAccountId">
            <summary>
            Default account that losses are posted to
            </summary>
            <value>Default account that losses are posted to</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Setting.DefaultCapitalGainOnDisposalAccountId">
            <summary>
            Default account that capital gains are posted to
            </summary>
            <value>Default account that capital gains are posted to</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Asset.Setting.OptInForTax">
            <summary>
            opt in for tax calculation
            </summary>
            <value>opt in for tax calculation</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Setting.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Setting.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Setting.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Setting.Equals(Xero.NetStandard.OAuth2.Model.Asset.Setting)">
            <summary>
            Returns true if Setting instances are equal
            </summary>
            <param name="input">Instance of Setting to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Setting.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Asset.Setting.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode">
            <summary>
            ISO-3166 alpha-2 country code, e.g. US, AU This element is required only when the Application supports multi-region. Talk to your Partner Manager to confirm if this is the case.
            </summary>
            <value>ISO-3166 alpha-2 country code, e.g. US, AU This element is required only when the Application supports multi-region. Talk to your Partner Manager to confirm if this is the case.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AD">
            <summary>
            Enum AD for value: AD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AE">
            <summary>
            Enum AE for value: AE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AF">
            <summary>
            Enum AF for value: AF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AG">
            <summary>
            Enum AG for value: AG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AI">
            <summary>
            Enum AI for value: AI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AL">
            <summary>
            Enum AL for value: AL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AM">
            <summary>
            Enum AM for value: AM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AN">
            <summary>
            Enum AN for value: AN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AO">
            <summary>
            Enum AO for value: AO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AQ">
            <summary>
            Enum AQ for value: AQ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AR">
            <summary>
            Enum AR for value: AR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AS">
            <summary>
            Enum AS for value: AS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AT">
            <summary>
            Enum AT for value: AT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AU">
            <summary>
            Enum AU for value: AU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AW">
            <summary>
            Enum AW for value: AW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.AZ">
            <summary>
            Enum AZ for value: AZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BA">
            <summary>
            Enum BA for value: BA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BB">
            <summary>
            Enum BB for value: BB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BD">
            <summary>
            Enum BD for value: BD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BE">
            <summary>
            Enum BE for value: BE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BF">
            <summary>
            Enum BF for value: BF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BG">
            <summary>
            Enum BG for value: BG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BH">
            <summary>
            Enum BH for value: BH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BI">
            <summary>
            Enum BI for value: BI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BJ">
            <summary>
            Enum BJ for value: BJ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BL">
            <summary>
            Enum BL for value: BL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BM">
            <summary>
            Enum BM for value: BM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BN">
            <summary>
            Enum BN for value: BN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BO">
            <summary>
            Enum BO for value: BO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BR">
            <summary>
            Enum BR for value: BR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BS">
            <summary>
            Enum BS for value: BS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BT">
            <summary>
            Enum BT for value: BT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BW">
            <summary>
            Enum BW for value: BW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BY">
            <summary>
            Enum BY for value: BY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.BZ">
            <summary>
            Enum BZ for value: BZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CA">
            <summary>
            Enum CA for value: CA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CC">
            <summary>
            Enum CC for value: CC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CD">
            <summary>
            Enum CD for value: CD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CF">
            <summary>
            Enum CF for value: CF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CG">
            <summary>
            Enum CG for value: CG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CH">
            <summary>
            Enum CH for value: CH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CI">
            <summary>
            Enum CI for value: CI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CK">
            <summary>
            Enum CK for value: CK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CL">
            <summary>
            Enum CL for value: CL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CM">
            <summary>
            Enum CM for value: CM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CN">
            <summary>
            Enum CN for value: CN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CO">
            <summary>
            Enum CO for value: CO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CR">
            <summary>
            Enum CR for value: CR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CU">
            <summary>
            Enum CU for value: CU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CV">
            <summary>
            Enum CV for value: CV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CW">
            <summary>
            Enum CW for value: CW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CX">
            <summary>
            Enum CX for value: CX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CY">
            <summary>
            Enum CY for value: CY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.CZ">
            <summary>
            Enum CZ for value: CZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.DE">
            <summary>
            Enum DE for value: DE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.DJ">
            <summary>
            Enum DJ for value: DJ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.DK">
            <summary>
            Enum DK for value: DK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.DM">
            <summary>
            Enum DM for value: DM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.DO">
            <summary>
            Enum DO for value: DO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.DZ">
            <summary>
            Enum DZ for value: DZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.EC">
            <summary>
            Enum EC for value: EC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.EE">
            <summary>
            Enum EE for value: EE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.EG">
            <summary>
            Enum EG for value: EG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.EH">
            <summary>
            Enum EH for value: EH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.ER">
            <summary>
            Enum ER for value: ER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.ES">
            <summary>
            Enum ES for value: ES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.ET">
            <summary>
            Enum ET for value: ET
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.FI">
            <summary>
            Enum FI for value: FI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.FJ">
            <summary>
            Enum FJ for value: FJ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.FK">
            <summary>
            Enum FK for value: FK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.FM">
            <summary>
            Enum FM for value: FM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.FO">
            <summary>
            Enum FO for value: FO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.FR">
            <summary>
            Enum FR for value: FR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GA">
            <summary>
            Enum GA for value: GA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GB">
            <summary>
            Enum GB for value: GB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GD">
            <summary>
            Enum GD for value: GD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GE">
            <summary>
            Enum GE for value: GE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GG">
            <summary>
            Enum GG for value: GG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GH">
            <summary>
            Enum GH for value: GH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GI">
            <summary>
            Enum GI for value: GI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GL">
            <summary>
            Enum GL for value: GL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GM">
            <summary>
            Enum GM for value: GM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GN">
            <summary>
            Enum GN for value: GN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GQ">
            <summary>
            Enum GQ for value: GQ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GR">
            <summary>
            Enum GR for value: GR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GT">
            <summary>
            Enum GT for value: GT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GU">
            <summary>
            Enum GU for value: GU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GW">
            <summary>
            Enum GW for value: GW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.GY">
            <summary>
            Enum GY for value: GY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.HK">
            <summary>
            Enum HK for value: HK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.HN">
            <summary>
            Enum HN for value: HN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.HR">
            <summary>
            Enum HR for value: HR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.HT">
            <summary>
            Enum HT for value: HT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.HU">
            <summary>
            Enum HU for value: HU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.ID">
            <summary>
            Enum ID for value: ID
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.IE">
            <summary>
            Enum IE for value: IE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.IL">
            <summary>
            Enum IL for value: IL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.IM">
            <summary>
            Enum IM for value: IM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.IN">
            <summary>
            Enum IN for value: IN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.IO">
            <summary>
            Enum IO for value: IO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.IQ">
            <summary>
            Enum IQ for value: IQ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.IR">
            <summary>
            Enum IR for value: IR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.IS">
            <summary>
            Enum IS for value: IS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.IT">
            <summary>
            Enum IT for value: IT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.JE">
            <summary>
            Enum JE for value: JE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.JM">
            <summary>
            Enum JM for value: JM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.JO">
            <summary>
            Enum JO for value: JO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.JP">
            <summary>
            Enum JP for value: JP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.KE">
            <summary>
            Enum KE for value: KE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.KG">
            <summary>
            Enum KG for value: KG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.KH">
            <summary>
            Enum KH for value: KH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.KI">
            <summary>
            Enum KI for value: KI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.KM">
            <summary>
            Enum KM for value: KM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.KN">
            <summary>
            Enum KN for value: KN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.KP">
            <summary>
            Enum KP for value: KP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.KR">
            <summary>
            Enum KR for value: KR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.KW">
            <summary>
            Enum KW for value: KW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.KY">
            <summary>
            Enum KY for value: KY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.KZ">
            <summary>
            Enum KZ for value: KZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.LA">
            <summary>
            Enum LA for value: LA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.LB">
            <summary>
            Enum LB for value: LB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.LC">
            <summary>
            Enum LC for value: LC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.LI">
            <summary>
            Enum LI for value: LI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.LK">
            <summary>
            Enum LK for value: LK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.LR">
            <summary>
            Enum LR for value: LR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.LS">
            <summary>
            Enum LS for value: LS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.LT">
            <summary>
            Enum LT for value: LT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.LU">
            <summary>
            Enum LU for value: LU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.LV">
            <summary>
            Enum LV for value: LV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.LY">
            <summary>
            Enum LY for value: LY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MA">
            <summary>
            Enum MA for value: MA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MC">
            <summary>
            Enum MC for value: MC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MD">
            <summary>
            Enum MD for value: MD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.ME">
            <summary>
            Enum ME for value: ME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MF">
            <summary>
            Enum MF for value: MF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MG">
            <summary>
            Enum MG for value: MG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MH">
            <summary>
            Enum MH for value: MH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MK">
            <summary>
            Enum MK for value: MK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.ML">
            <summary>
            Enum ML for value: ML
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MM">
            <summary>
            Enum MM for value: MM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MN">
            <summary>
            Enum MN for value: MN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MO">
            <summary>
            Enum MO for value: MO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MP">
            <summary>
            Enum MP for value: MP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MR">
            <summary>
            Enum MR for value: MR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MS">
            <summary>
            Enum MS for value: MS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MT">
            <summary>
            Enum MT for value: MT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MU">
            <summary>
            Enum MU for value: MU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MV">
            <summary>
            Enum MV for value: MV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MW">
            <summary>
            Enum MW for value: MW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MX">
            <summary>
            Enum MX for value: MX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MY">
            <summary>
            Enum MY for value: MY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.MZ">
            <summary>
            Enum MZ for value: MZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.NA">
            <summary>
            Enum NA for value: NA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.NC">
            <summary>
            Enum NC for value: NC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.NE">
            <summary>
            Enum NE for value: NE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.NG">
            <summary>
            Enum NG for value: NG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.NI">
            <summary>
            Enum NI for value: NI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.NL">
            <summary>
            Enum NL for value: NL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.False">
            <summary>
            Enum False for value: false
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.NP">
            <summary>
            Enum NP for value: NP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.NR">
            <summary>
            Enum NR for value: NR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.NU">
            <summary>
            Enum NU for value: NU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.NZ">
            <summary>
            Enum NZ for value: NZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.OM">
            <summary>
            Enum OM for value: OM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PA">
            <summary>
            Enum PA for value: PA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PE">
            <summary>
            Enum PE for value: PE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PF">
            <summary>
            Enum PF for value: PF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PG">
            <summary>
            Enum PG for value: PG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PH">
            <summary>
            Enum PH for value: PH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PK">
            <summary>
            Enum PK for value: PK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PL">
            <summary>
            Enum PL for value: PL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PM">
            <summary>
            Enum PM for value: PM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PN">
            <summary>
            Enum PN for value: PN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PR">
            <summary>
            Enum PR for value: PR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PS">
            <summary>
            Enum PS for value: PS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PT">
            <summary>
            Enum PT for value: PT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PW">
            <summary>
            Enum PW for value: PW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.PY">
            <summary>
            Enum PY for value: PY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.QA">
            <summary>
            Enum QA for value: QA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.RE">
            <summary>
            Enum RE for value: RE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.RO">
            <summary>
            Enum RO for value: RO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.RS">
            <summary>
            Enum RS for value: RS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.RU">
            <summary>
            Enum RU for value: RU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.RW">
            <summary>
            Enum RW for value: RW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SA">
            <summary>
            Enum SA for value: SA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SB">
            <summary>
            Enum SB for value: SB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SC">
            <summary>
            Enum SC for value: SC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SD">
            <summary>
            Enum SD for value: SD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SE">
            <summary>
            Enum SE for value: SE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SG">
            <summary>
            Enum SG for value: SG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SH">
            <summary>
            Enum SH for value: SH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SI">
            <summary>
            Enum SI for value: SI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SJ">
            <summary>
            Enum SJ for value: SJ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SK">
            <summary>
            Enum SK for value: SK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SL">
            <summary>
            Enum SL for value: SL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SM">
            <summary>
            Enum SM for value: SM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SN">
            <summary>
            Enum SN for value: SN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SO">
            <summary>
            Enum SO for value: SO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SR">
            <summary>
            Enum SR for value: SR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SS">
            <summary>
            Enum SS for value: SS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.ST">
            <summary>
            Enum ST for value: ST
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SV">
            <summary>
            Enum SV for value: SV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SX">
            <summary>
            Enum SX for value: SX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SY">
            <summary>
            Enum SY for value: SY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.SZ">
            <summary>
            Enum SZ for value: SZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TC">
            <summary>
            Enum TC for value: TC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TD">
            <summary>
            Enum TD for value: TD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TG">
            <summary>
            Enum TG for value: TG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TH">
            <summary>
            Enum TH for value: TH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TJ">
            <summary>
            Enum TJ for value: TJ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TK">
            <summary>
            Enum TK for value: TK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TL">
            <summary>
            Enum TL for value: TL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TM">
            <summary>
            Enum TM for value: TM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TN">
            <summary>
            Enum TN for value: TN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TO">
            <summary>
            Enum TO for value: TO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TR">
            <summary>
            Enum TR for value: TR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TT">
            <summary>
            Enum TT for value: TT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TV">
            <summary>
            Enum TV for value: TV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TW">
            <summary>
            Enum TW for value: TW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.TZ">
            <summary>
            Enum TZ for value: TZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.UA">
            <summary>
            Enum UA for value: UA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.UG">
            <summary>
            Enum UG for value: UG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.US">
            <summary>
            Enum US for value: US
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.UY">
            <summary>
            Enum UY for value: UY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.UZ">
            <summary>
            Enum UZ for value: UZ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.VA">
            <summary>
            Enum VA for value: VA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.VC">
            <summary>
            Enum VC for value: VC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.VE">
            <summary>
            Enum VE for value: VE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.VG">
            <summary>
            Enum VG for value: VG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.VI">
            <summary>
            Enum VI for value: VI
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.VN">
            <summary>
            Enum VN for value: VN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.VU">
            <summary>
            Enum VU for value: VU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.WF">
            <summary>
            Enum WF for value: WF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.WS">
            <summary>
            Enum WS for value: WS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.XK">
            <summary>
            Enum XK for value: XK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.YE">
            <summary>
            Enum YE for value: YE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.YT">
            <summary>
            Enum YT for value: YT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.ZA">
            <summary>
            Enum ZA for value: ZA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.ZM">
            <summary>
            Enum ZM for value: ZM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CountryCode.ZW">
            <summary>
            Enum ZW for value: ZW
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.CreditDebitIndicator">
            <summary>
            If the statement balances are credit or debit, the CreditDebitIndicator should be specified from the perspective of the Customer.
            </summary>
            <value>If the statement balances are credit or debit, the CreditDebitIndicator should be specified from the perspective of the Customer.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CreditDebitIndicator.CREDIT">
            <summary>
            Enum CREDIT for value: CREDIT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CreditDebitIndicator.DEBIT">
            <summary>
            Enum DEBIT for value: DEBIT
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode">
            <summary>
            3 letter alpha code for the ISO-4217 currency code, e.g. USD, AUD.
            </summary>
            <value>3 letter alpha code for the ISO-4217 currency code, e.g. USD, AUD.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.AED">
            <summary>
            Enum AED for value: AED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.AFN">
            <summary>
            Enum AFN for value: AFN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.ALL">
            <summary>
            Enum ALL for value: ALL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.AMD">
            <summary>
            Enum AMD for value: AMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.ANG">
            <summary>
            Enum ANG for value: ANG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.AOA">
            <summary>
            Enum AOA for value: AOA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.ARS">
            <summary>
            Enum ARS for value: ARS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.AUD">
            <summary>
            Enum AUD for value: AUD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.AWG">
            <summary>
            Enum AWG for value: AWG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.AZN">
            <summary>
            Enum AZN for value: AZN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BAM">
            <summary>
            Enum BAM for value: BAM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BBD">
            <summary>
            Enum BBD for value: BBD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BDT">
            <summary>
            Enum BDT for value: BDT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BGN">
            <summary>
            Enum BGN for value: BGN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BHD">
            <summary>
            Enum BHD for value: BHD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BIF">
            <summary>
            Enum BIF for value: BIF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BMD">
            <summary>
            Enum BMD for value: BMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BND">
            <summary>
            Enum BND for value: BND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BOB">
            <summary>
            Enum BOB for value: BOB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BRL">
            <summary>
            Enum BRL for value: BRL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BSD">
            <summary>
            Enum BSD for value: BSD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BTN">
            <summary>
            Enum BTN for value: BTN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BWP">
            <summary>
            Enum BWP for value: BWP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BYN">
            <summary>
            Enum BYN for value: BYN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.BZD">
            <summary>
            Enum BZD for value: BZD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.CAD">
            <summary>
            Enum CAD for value: CAD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.CDF">
            <summary>
            Enum CDF for value: CDF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.CHF">
            <summary>
            Enum CHF for value: CHF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.CLP">
            <summary>
            Enum CLP for value: CLP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.CNY">
            <summary>
            Enum CNY for value: CNY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.COP">
            <summary>
            Enum COP for value: COP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.CRC">
            <summary>
            Enum CRC for value: CRC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.CUC">
            <summary>
            Enum CUC for value: CUC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.CUP">
            <summary>
            Enum CUP for value: CUP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.CVE">
            <summary>
            Enum CVE for value: CVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.CZK">
            <summary>
            Enum CZK for value: CZK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.DJF">
            <summary>
            Enum DJF for value: DJF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.DKK">
            <summary>
            Enum DKK for value: DKK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.DOP">
            <summary>
            Enum DOP for value: DOP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.DZD">
            <summary>
            Enum DZD for value: DZD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.EGP">
            <summary>
            Enum EGP for value: EGP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.ERN">
            <summary>
            Enum ERN for value: ERN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.ETB">
            <summary>
            Enum ETB for value: ETB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.EUR">
            <summary>
            Enum EUR for value: EUR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.FJD">
            <summary>
            Enum FJD for value: FJD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.FKP">
            <summary>
            Enum FKP for value: FKP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.GBP">
            <summary>
            Enum GBP for value: GBP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.GEL">
            <summary>
            Enum GEL for value: GEL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.GGP">
            <summary>
            Enum GGP for value: GGP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.GHS">
            <summary>
            Enum GHS for value: GHS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.GIP">
            <summary>
            Enum GIP for value: GIP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.GMD">
            <summary>
            Enum GMD for value: GMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.GNF">
            <summary>
            Enum GNF for value: GNF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.GTQ">
            <summary>
            Enum GTQ for value: GTQ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.GYD">
            <summary>
            Enum GYD for value: GYD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.HKD">
            <summary>
            Enum HKD for value: HKD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.HNL">
            <summary>
            Enum HNL for value: HNL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.HRK">
            <summary>
            Enum HRK for value: HRK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.HTG">
            <summary>
            Enum HTG for value: HTG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.HUF">
            <summary>
            Enum HUF for value: HUF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.IDR">
            <summary>
            Enum IDR for value: IDR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.ILS">
            <summary>
            Enum ILS for value: ILS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.IMP">
            <summary>
            Enum IMP for value: IMP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.INR">
            <summary>
            Enum INR for value: INR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.IQD">
            <summary>
            Enum IQD for value: IQD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.IRR">
            <summary>
            Enum IRR for value: IRR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.ISK">
            <summary>
            Enum ISK for value: ISK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.JEP">
            <summary>
            Enum JEP for value: JEP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.JMD">
            <summary>
            Enum JMD for value: JMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.JOD">
            <summary>
            Enum JOD for value: JOD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.JPY">
            <summary>
            Enum JPY for value: JPY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.KES">
            <summary>
            Enum KES for value: KES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.KGS">
            <summary>
            Enum KGS for value: KGS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.KHR">
            <summary>
            Enum KHR for value: KHR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.KMF">
            <summary>
            Enum KMF for value: KMF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.KPW">
            <summary>
            Enum KPW for value: KPW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.KRW">
            <summary>
            Enum KRW for value: KRW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.KWD">
            <summary>
            Enum KWD for value: KWD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.KYD">
            <summary>
            Enum KYD for value: KYD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.KZT">
            <summary>
            Enum KZT for value: KZT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.LAK">
            <summary>
            Enum LAK for value: LAK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.LBP">
            <summary>
            Enum LBP for value: LBP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.LKR">
            <summary>
            Enum LKR for value: LKR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.LRD">
            <summary>
            Enum LRD for value: LRD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.LSL">
            <summary>
            Enum LSL for value: LSL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.LYD">
            <summary>
            Enum LYD for value: LYD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MAD">
            <summary>
            Enum MAD for value: MAD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MDL">
            <summary>
            Enum MDL for value: MDL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MGA">
            <summary>
            Enum MGA for value: MGA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MKD">
            <summary>
            Enum MKD for value: MKD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MMK">
            <summary>
            Enum MMK for value: MMK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MNT">
            <summary>
            Enum MNT for value: MNT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MOP">
            <summary>
            Enum MOP for value: MOP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MRU">
            <summary>
            Enum MRU for value: MRU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MUR">
            <summary>
            Enum MUR for value: MUR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MVR">
            <summary>
            Enum MVR for value: MVR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MWK">
            <summary>
            Enum MWK for value: MWK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MXN">
            <summary>
            Enum MXN for value: MXN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MYR">
            <summary>
            Enum MYR for value: MYR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.MZN">
            <summary>
            Enum MZN for value: MZN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.NAD">
            <summary>
            Enum NAD for value: NAD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.NGN">
            <summary>
            Enum NGN for value: NGN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.NIO">
            <summary>
            Enum NIO for value: NIO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.NOK">
            <summary>
            Enum NOK for value: NOK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.NPR">
            <summary>
            Enum NPR for value: NPR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.NZD">
            <summary>
            Enum NZD for value: NZD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.OMR">
            <summary>
            Enum OMR for value: OMR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.PAB">
            <summary>
            Enum PAB for value: PAB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.PEN">
            <summary>
            Enum PEN for value: PEN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.PGK">
            <summary>
            Enum PGK for value: PGK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.PHP">
            <summary>
            Enum PHP for value: PHP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.PKR">
            <summary>
            Enum PKR for value: PKR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.PLN">
            <summary>
            Enum PLN for value: PLN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.PYG">
            <summary>
            Enum PYG for value: PYG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.QAR">
            <summary>
            Enum QAR for value: QAR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.RON">
            <summary>
            Enum RON for value: RON
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.RSD">
            <summary>
            Enum RSD for value: RSD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.RUB">
            <summary>
            Enum RUB for value: RUB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.RWF">
            <summary>
            Enum RWF for value: RWF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SAR">
            <summary>
            Enum SAR for value: SAR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SBD">
            <summary>
            Enum SBD for value: SBD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SCR">
            <summary>
            Enum SCR for value: SCR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SDG">
            <summary>
            Enum SDG for value: SDG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SEK">
            <summary>
            Enum SEK for value: SEK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SGD">
            <summary>
            Enum SGD for value: SGD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SHP">
            <summary>
            Enum SHP for value: SHP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SLL">
            <summary>
            Enum SLL for value: SLL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SOS">
            <summary>
            Enum SOS for value: SOS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SPL">
            <summary>
            Enum SPL for value: SPL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SRD">
            <summary>
            Enum SRD for value: SRD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.STN">
            <summary>
            Enum STN for value: STN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SVC">
            <summary>
            Enum SVC for value: SVC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SYP">
            <summary>
            Enum SYP for value: SYP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.SZL">
            <summary>
            Enum SZL for value: SZL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.THB">
            <summary>
            Enum THB for value: THB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.TJS">
            <summary>
            Enum TJS for value: TJS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.TMT">
            <summary>
            Enum TMT for value: TMT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.TND">
            <summary>
            Enum TND for value: TND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.TOP">
            <summary>
            Enum TOP for value: TOP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.TRY">
            <summary>
            Enum TRY for value: TRY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.TTD">
            <summary>
            Enum TTD for value: TTD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.TVD">
            <summary>
            Enum TVD for value: TVD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.TWD">
            <summary>
            Enum TWD for value: TWD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.TZS">
            <summary>
            Enum TZS for value: TZS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.UAH">
            <summary>
            Enum UAH for value: UAH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.UGX">
            <summary>
            Enum UGX for value: UGX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.USD">
            <summary>
            Enum USD for value: USD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.UYU">
            <summary>
            Enum UYU for value: UYU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.UZS">
            <summary>
            Enum UZS for value: UZS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.VEF">
            <summary>
            Enum VEF for value: VEF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.VND">
            <summary>
            Enum VND for value: VND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.VUV">
            <summary>
            Enum VUV for value: VUV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.WST">
            <summary>
            Enum WST for value: WST
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.XAF">
            <summary>
            Enum XAF for value: XAF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.XCD">
            <summary>
            Enum XCD for value: XCD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.XDR">
            <summary>
            Enum XDR for value: XDR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.XOF">
            <summary>
            Enum XOF for value: XOF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.XPF">
            <summary>
            Enum XPF for value: XPF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.YER">
            <summary>
            Enum YER for value: YER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.ZAR">
            <summary>
            Enum ZAR for value: ZAR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.ZMW">
            <summary>
            Enum ZMW for value: ZMW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.ZMK">
            <summary>
            Enum ZMK for value: ZMK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.ZWD">
            <summary>
            Enum ZWD for value: ZWD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.CurrencyCode.Empty">
            <summary>
            Enum Empty for value: 
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.EndBalance">
            <summary>
            The StartBalance plus all the Statement Line Amounts should be equal to the EndBalance Amount.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.EndBalance.CreditDebitIndicator">
            <summary>
            Gets or Sets CreditDebitIndicator
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.EndBalance.Amount">
            <summary>
            Gets or Sets Amount
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.EndBalance.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.EndBalance.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.EndBalance.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.EndBalance.Equals(Xero.NetStandard.OAuth2.Model.Bankfeeds.EndBalance)">
            <summary>
            Returns true if EndBalance instances are equal
            </summary>
            <param name="input">Instance of EndBalance to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.EndBalance.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.EndBalance.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error">
            <summary>
            On error, the API consumer will receive an HTTP response with a HTTP Status Code of 4xx or 5xx and a Content-Type of application/problem+json.
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum">
            <summary>
            Identifies the type of error.
            </summary>
            <value>Identifies the type of error.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InvalidRequest">
            <summary>
            Enum InvalidRequest for value: invalid-request
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InvalidApplication">
            <summary>
            Enum InvalidApplication for value: invalid-application
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InvalidFeedConnection">
            <summary>
            Enum InvalidFeedConnection for value: invalid-feed-connection
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.DuplicateStatement">
            <summary>
            Enum DuplicateStatement for value: duplicate-statement
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InvalidEndBalance">
            <summary>
            Enum InvalidEndBalance for value: invalid-end-balance
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InvalidStartAndEndDate">
            <summary>
            Enum InvalidStartAndEndDate for value: invalid-start-and-end-date
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InvalidStartDate">
            <summary>
            Enum InvalidStartDate for value: invalid-start-date
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InternalError">
            <summary>
            Enum InternalError for value: internal-error
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.FeedAlreadyConnectedInCurrentOrganisation">
            <summary>
            Enum FeedAlreadyConnectedInCurrentOrganisation for value: feed-already-connected-in-current-organisation
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InvalidEndDate">
            <summary>
            Enum InvalidEndDate for value: invalid-end-date
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.StatementNotFound">
            <summary>
            Enum StatementNotFound for value: statement-not-found
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.FeedConnectedInDifferentOrganisation">
            <summary>
            Enum FeedConnectedInDifferentOrganisation for value: feed-connected-in-different-organisation
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.FeedAlreadyConnectedInDifferentOrganisation">
            <summary>
            Enum FeedAlreadyConnectedInDifferentOrganisation for value: feed-already-connected-in-different-organisation
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.BankFeedNotFound">
            <summary>
            Enum BankFeedNotFound for value: bank-feed-not-found
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InvalidCountrySpecified">
            <summary>
            Enum InvalidCountrySpecified for value: invalid-country-specified
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InvalidOrganisationBankFeeds">
            <summary>
            Enum InvalidOrganisationBankFeeds for value: invalid-organisation-bank-feeds
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InvalidOrganisationMultiCurrency">
            <summary>
            Enum InvalidOrganisationMultiCurrency for value: invalid-organisation-multi-currency
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InvalidFeedConnectionForOrganisation">
            <summary>
            Enum InvalidFeedConnectionForOrganisation for value: invalid-feed-connection-for-organisation
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.InvalidUserRole">
            <summary>
            Enum InvalidUserRole for value: invalid-user-role
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.AccountNotValid">
            <summary>
            Enum AccountNotValid for value: account-not-valid
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.TypeEnum.FeedNotFoundOrAlreadyDeleted">
            <summary>
            Enum FeedNotFoundOrAlreadyDeleted for value: feed-not-found-or-already-deleted
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.Type">
            <summary>
            Identifies the type of error.
            </summary>
            <value>Identifies the type of error.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.Title">
            <summary>
            Human readable high level error description.
            </summary>
            <value>Human readable high level error description.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.Status">
            <summary>
            The numeric HTTP Status Code, e.g. 404
            </summary>
            <value>The numeric HTTP Status Code, e.g. 404</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.Detail">
            <summary>
            Human readable detailed error description.
            </summary>
            <value>Human readable detailed error description.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.Equals(Xero.NetStandard.OAuth2.Model.Bankfeeds.Error)">
            <summary>
            Returns true if Error instances are equal
            </summary>
            <param name="input">Instance of Error to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Error.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection">
            <summary>
            FeedConnection
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.AccountTypeEnum">
            <summary>
            High level bank account type - BANK CREDITCARD BANK encompasses all bank account types other than credit cards.
            </summary>
            <value>High level bank account type - BANK CREDITCARD BANK encompasses all bank account types other than credit cards.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.AccountTypeEnum.BANK">
            <summary>
            Enum BANK for value: BANK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.AccountTypeEnum.CREDITCARD">
            <summary>
            Enum CREDITCARD for value: CREDITCARD
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.AccountType">
            <summary>
            High level bank account type - BANK CREDITCARD BANK encompasses all bank account types other than credit cards.
            </summary>
            <value>High level bank account type - BANK CREDITCARD BANK encompasses all bank account types other than credit cards.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.Currency">
            <summary>
            Gets or Sets Currency
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.Country">
            <summary>
            Gets or Sets Country
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.StatusEnum">
            <summary>
            the current status of the feed connection
            </summary>
            <value>the current status of the feed connection</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.StatusEnum.PENDING">
            <summary>
            Enum PENDING for value: PENDING
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.StatusEnum.REJECTED">
            <summary>
            Enum REJECTED for value: REJECTED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.Status">
            <summary>
            the current status of the feed connection
            </summary>
            <value>the current status of the feed connection</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.Id">
            <summary>
            GUID used to identify the Account.
            </summary>
            <value>GUID used to identify the Account.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.AccountToken">
            <summary>
            This account identifier is generated by the financial institute (FI). This must be unique for your financial institute.
            </summary>
            <value>This account identifier is generated by the financial institute (FI). This must be unique for your financial institute.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.AccountNumber">
            <summary>
            String(40) when AccountType is BANK String(4) when AccountType is CREDITCARD The Account Number is used to match the feed to a Xero Bank Account. The API will create a new Xero Bank Account if a match to an existing Xero Bank Account is not found. Only the last 4 digits must be supplied for Credit Card numbers. Must be included if AccountId is not specified.
            </summary>
            <value>String(40) when AccountType is BANK String(4) when AccountType is CREDITCARD The Account Number is used to match the feed to a Xero Bank Account. The API will create a new Xero Bank Account if a match to an existing Xero Bank Account is not found. Only the last 4 digits must be supplied for Credit Card numbers. Must be included if AccountId is not specified.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.AccountName">
            <summary>
            The Account Name will be used for the creation of a new Xero Bank Account if a matching Xero Bank Account is not found.
            </summary>
            <value>The Account Name will be used for the creation of a new Xero Bank Account if a matching Xero Bank Account is not found.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.AccountId">
            <summary>
            Xero identifier for a bank account in Xero. Must be included if AccountNumber is not specified.
            </summary>
            <value>Xero identifier for a bank account in Xero. Must be included if AccountNumber is not specified.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.Error">
            <summary>
            Gets or Sets Error
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.Equals(Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection)">
            <summary>
            Returns true if FeedConnection instances are equal
            </summary>
            <param name="input">Instance of FeedConnection to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnection.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnections">
            <summary>
            FeedConnections
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnections.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnections.Items">
            <summary>
            Gets or Sets Items
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnections.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnections.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnections.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnections.Equals(Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnections)">
            <summary>
            Returns true if FeedConnections instances are equal
            </summary>
            <param name="input">Instance of FeedConnections to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnections.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.FeedConnections.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.Pagination">
            <summary>
            Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Pagination.Page">
            <summary>
            Page number which specifies the set of records to retrieve. Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?page&#x3D;2 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned.
            </summary>
            <value>Page number which specifies the set of records to retrieve. Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?page&#x3D;2 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Pagination.PageSize">
            <summary>
            Page size which specifies how many records per page will be returned (default 50). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100.
            </summary>
            <value>Page size which specifies how many records per page will be returned (default 50). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Pagination.PageCount">
            <summary>
            Number of pages available
            </summary>
            <value>Number of pages available</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Pagination.ItemCount">
            <summary>
            Number of items returned
            </summary>
            <value>Number of items returned</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Pagination.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Pagination.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Pagination.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Pagination.Equals(Xero.NetStandard.OAuth2.Model.Bankfeeds.Pagination)">
            <summary>
            Returns true if Pagination instances are equal
            </summary>
            <param name="input">Instance of Pagination to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Pagination.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Pagination.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.StartBalance">
            <summary>
            The starting balance of the statement
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.StartBalance.CreditDebitIndicator">
            <summary>
            Gets or Sets CreditDebitIndicator
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.StartBalance.Amount">
            <summary>
            decimal(19,4) unsigned Opening/closing balance amount.
            </summary>
            <value>decimal(19,4) unsigned Opening/closing balance amount.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.StartBalance.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.StartBalance.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.StartBalance.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.StartBalance.Equals(Xero.NetStandard.OAuth2.Model.Bankfeeds.StartBalance)">
            <summary>
            Returns true if StartBalance instances are equal
            </summary>
            <param name="input">Instance of StartBalance to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.StartBalance.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.StartBalance.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement">
            <summary>
            Statement
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.StatusEnum">
            <summary>
            Current status of statements
            </summary>
            <value>Current status of statements</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.StatusEnum.PENDING">
            <summary>
            Enum PENDING for value: PENDING
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.StatusEnum.REJECTED">
            <summary>
            Enum REJECTED for value: REJECTED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.StatusEnum.DELIVERED">
            <summary>
            Enum DELIVERED for value: DELIVERED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.Status">
            <summary>
            Current status of statements
            </summary>
            <value>Current status of statements</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.Id">
            <summary>
            GUID used to identify the Statement.
            </summary>
            <value>GUID used to identify the Statement.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.FeedConnectionId">
            <summary>
            The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered. This is obtained by calling GET FeedConnections.
            </summary>
            <value>The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered. This is obtained by calling GET FeedConnections.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.StartDate">
            <summary>
            Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD
            </summary>
            <value>Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.EndDate">
            <summary>
            Closing balance date ISO-8601 YYYY-MM-DD
            </summary>
            <value>Closing balance date ISO-8601 YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.StartBalance">
            <summary>
            Gets or Sets StartBalance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.EndBalance">
            <summary>
            Gets or Sets EndBalance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.StatementLines">
            <summary>
            Gets or Sets StatementLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.Errors">
            <summary>
            Gets or Sets Errors
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.StatementLineCount">
            <summary>
            Gets or Sets StatementLineCount
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.Equals(Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement)">
            <summary>
            Returns true if Statement instances are equal
            </summary>
            <param name="input">Instance of Statement to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statement.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine">
            <summary>
            the lines details for a statement
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.CreditDebitIndicator">
            <summary>
            Gets or Sets CreditDebitIndicator
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.PostedDate">
            <summary>
            The date that the transaction was processed or cleared as seen in internet banking ISO-8601 YYYY-MM-DD
            </summary>
            <value>The date that the transaction was processed or cleared as seen in internet banking ISO-8601 YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.Description">
            <summary>
            Transaction description
            </summary>
            <value>Transaction description</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.Amount">
            <summary>
            Transaction amount
            </summary>
            <value>Transaction amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.TransactionId">
            <summary>
            Financial institute&#39;s internal transaction identifier. If provided this field is factored into duplicate detection.
            </summary>
            <value>Financial institute&#39;s internal transaction identifier. If provided this field is factored into duplicate detection.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.PayeeName">
            <summary>
            Typically the merchant or payee name
            </summary>
            <value>Typically the merchant or payee name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.Reference">
            <summary>
            Optional field to enhance the Description
            </summary>
            <value>Optional field to enhance the Description</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.ChequeNumber">
            <summary>
            The cheque/check number
            </summary>
            <value>The cheque/check number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.TransactionType">
            <summary>
            Descriptive transaction type
            </summary>
            <value>Descriptive transaction type</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.Equals(Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine)">
            <summary>
            Returns true if StatementLine instances are equal
            </summary>
            <param name="input">Instance of StatementLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.StatementLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statements">
            <summary>
            Statements
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statements.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statements.Items">
            <summary>
            Gets or Sets Items
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statements.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statements.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statements.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statements.Equals(Xero.NetStandard.OAuth2.Model.Bankfeeds.Statements)">
            <summary>
            Returns true if Statements instances are equal
            </summary>
            <param name="input">Instance of Statements to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statements.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Bankfeeds.Statements.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Files.Association">
            <summary>
            Association
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Association.ObjectGroup">
            <summary>
            Gets or Sets ObjectGroup
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Association.ObjectType">
            <summary>
            Gets or Sets ObjectType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Association.FileId">
            <summary>
            The unique identifier of the file
            </summary>
            <value>The unique identifier of the file</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Association.ObjectId">
            <summary>
            The identifier of the object that the file is being associated with (e.g. InvoiceID, BankTransactionID, ContactID)
            </summary>
            <value>The identifier of the object that the file is being associated with (e.g. InvoiceID, BankTransactionID, ContactID)</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Association.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Association.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Association.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Association.Equals(Xero.NetStandard.OAuth2.Model.Files.Association)">
            <summary>
            Returns true if Association instances are equal
            </summary>
            <param name="input">Instance of Association to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Association.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Association.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Files.FileObject">
            <summary>
            FileObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.FileObject.Name">
            <summary>
            File Name
            </summary>
            <value>File Name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.FileObject.MimeType">
            <summary>
            MimeType of the file (image/png, image/jpeg, application/pdf, etc..)
            </summary>
            <value>MimeType of the file (image/png, image/jpeg, application/pdf, etc..)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.FileObject.Size">
            <summary>
            Numeric value in bytes
            </summary>
            <value>Numeric value in bytes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.FileObject.CreatedDateUtc">
            <summary>
            Created date in UTC
            </summary>
            <value>Created date in UTC</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.FileObject.UpdatedDateUtc">
            <summary>
            Updated date in UTC
            </summary>
            <value>Updated date in UTC</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.FileObject.User">
            <summary>
            Gets or Sets User
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.FileObject.Id">
            <summary>
            File object&#39;s UUID
            </summary>
            <value>File object&#39;s UUID</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.FileObject.FolderId">
            <summary>
            Folder relation object&#39;s UUID
            </summary>
            <value>Folder relation object&#39;s UUID</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.FileObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.FileObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.FileObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.FileObject.Equals(Xero.NetStandard.OAuth2.Model.Files.FileObject)">
            <summary>
            Returns true if FileObject instances are equal
            </summary>
            <param name="input">Instance of FileObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.FileObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.FileObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Files.FileResponse204">
            <summary>
            FileResponse204
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.FileResponse204.Status">
            <summary>
            Status response for 204 no content
            </summary>
            <value>Status response for 204 no content</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.FileResponse204.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.FileResponse204.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.FileResponse204.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.FileResponse204.Equals(Xero.NetStandard.OAuth2.Model.Files.FileResponse204)">
            <summary>
            Returns true if FileResponse204 instances are equal
            </summary>
            <param name="input">Instance of FileResponse204 to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.FileResponse204.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.FileResponse204.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Files.Files">
            <summary>
            Files
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Files.TotalCount">
            <summary>
            Gets or Sets TotalCount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Files.Page">
            <summary>
            Gets or Sets Page
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Files.PerPage">
            <summary>
            Gets or Sets PerPage
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Files.Items">
            <summary>
            Gets or Sets Items
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Files.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Files.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Files.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Files.Equals(Xero.NetStandard.OAuth2.Model.Files.Files)">
            <summary>
            Returns true if Files instances are equal
            </summary>
            <param name="input">Instance of Files to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Files.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Files.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Files.Folder">
            <summary>
            Folder
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Folder.Name">
            <summary>
            The name of the folder
            </summary>
            <value>The name of the folder</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Folder.FileCount">
            <summary>
            The number of files in the folder
            </summary>
            <value>The number of files in the folder</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Folder.Email">
            <summary>
            The email address used to email files to the inbox. Only the inbox will have this element.
            </summary>
            <value>The email address used to email files to the inbox. Only the inbox will have this element.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Folder.IsInbox">
            <summary>
            to indicate if the folder is the Inbox. The Inbox cannot be renamed or deleted.
            </summary>
            <value>to indicate if the folder is the Inbox. The Inbox cannot be renamed or deleted.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Folder.Id">
            <summary>
            Xero unique identifier for a folder  Files
            </summary>
            <value>Xero unique identifier for a folder  Files</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Folder.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Folder.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Folder.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Folder.Equals(Xero.NetStandard.OAuth2.Model.Files.Folder)">
            <summary>
            Returns true if Folder instances are equal
            </summary>
            <param name="input">Instance of Folder to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Folder.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Folder.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Files.Folders">
            <summary>
            Folders
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.Folders._Folders">
            <summary>
            Gets or Sets _Folders
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Folders.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Folders.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Folders.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Folders.Equals(Xero.NetStandard.OAuth2.Model.Files.Folders)">
            <summary>
            Returns true if Folders instances are equal
            </summary>
            <param name="input">Instance of Folders to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Folders.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.Folders.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Files.InlineObject">
            <summary>
            InlineObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.InlineObject.Body">
            <summary>
            Gets or Sets Body
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.InlineObject.Name">
            <summary>
            exact name of the file you are uploading
            </summary>
            <value>exact name of the file you are uploading</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.InlineObject.Filename">
            <summary>
            Gets or Sets Filename
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.InlineObject.MimeType">
            <summary>
            Gets or Sets MimeType
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.InlineObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.InlineObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.InlineObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.InlineObject.Equals(Xero.NetStandard.OAuth2.Model.Files.InlineObject)">
            <summary>
            Returns true if InlineObject instances are equal
            </summary>
            <param name="input">Instance of InlineObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.InlineObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.InlineObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup">
            <summary>
            The Object Group that the object is in. These roughly correlate to the endpoints that can be used to retrieve the object via the core accounting API.
            </summary>
            <value>The Object Group that the object is in. These roughly correlate to the endpoints that can be used to retrieve the object via the core accounting API.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup.Account">
            <summary>
            Enum Account for value: Account
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup.BankTransaction">
            <summary>
            Enum BankTransaction for value: BankTransaction
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup.Contact">
            <summary>
            Enum Contact for value: Contact
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup.CreditNote">
            <summary>
            Enum CreditNote for value: CreditNote
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup.Invoice">
            <summary>
            Enum Invoice for value: Invoice
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup.Item">
            <summary>
            Enum Item for value: Item
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup.ManualJournal">
            <summary>
            Enum ManualJournal for value: ManualJournal
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup.Overpayment">
            <summary>
            Enum Overpayment for value: Overpayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup.Payment">
            <summary>
            Enum Payment for value: Payment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup.Prepayment">
            <summary>
            Enum Prepayment for value: Prepayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup.Quote">
            <summary>
            Enum Quote for value: Quote
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectGroup.Receipt">
            <summary>
            Enum Receipt for value: Receipt
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Files.ObjectType">
            <summary>
            The Object Type
            </summary>
            <value>The Object Type</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Unknown">
            <summary>
            Enum Unknown for value: Unknown
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Accpay">
            <summary>
            Enum Accpay for value: Accpay
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.AccPayCredit">
            <summary>
            Enum AccPayCredit for value: AccPayCredit
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.AccPayPayment">
            <summary>
            Enum AccPayPayment for value: AccPayPayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.AccRec">
            <summary>
            Enum AccRec for value: AccRec
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.AccRecCredit">
            <summary>
            Enum AccRecCredit for value: AccRecCredit
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.AccRecPayment">
            <summary>
            Enum AccRecPayment for value: AccRecPayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Adjustment">
            <summary>
            Enum Adjustment for value: Adjustment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ApCreditPayment">
            <summary>
            Enum ApCreditPayment for value: ApCreditPayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ApOverPayment">
            <summary>
            Enum ApOverPayment for value: ApOverPayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ApOverPaymentPayment">
            <summary>
            Enum ApOverPaymentPayment for value: ApOverPaymentPayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ApOverPaymentSourcePayment">
            <summary>
            Enum ApOverPaymentSourcePayment for value: ApOverPaymentSourcePayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ApPrepayment">
            <summary>
            Enum ApPrepayment for value: ApPrepayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ApPrepaymentPayment">
            <summary>
            Enum ApPrepaymentPayment for value: ApPrepaymentPayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ApPrepaymentSourcePayment">
            <summary>
            Enum ApPrepaymentSourcePayment for value: ApPrepaymentSourcePayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ArCreditPayment">
            <summary>
            Enum ArCreditPayment for value: ArCreditPayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ArOverPayment">
            <summary>
            Enum ArOverPayment for value: ArOverPayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ArOverpaymentPayment">
            <summary>
            Enum ArOverpaymentPayment for value: ArOverpaymentPayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ArOverpaymentSourcePayment">
            <summary>
            Enum ArOverpaymentSourcePayment for value: ArOverpaymentSourcePayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ArPrepayment">
            <summary>
            Enum ArPrepayment for value: ArPrepayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ArPrepaymentPayment">
            <summary>
            Enum ArPrepaymentPayment for value: ArPrepaymentPayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ArPrepaymentSourcePayment">
            <summary>
            Enum ArPrepaymentSourcePayment for value: ArPrepaymentSourcePayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.CashPaid">
            <summary>
            Enum CashPaid for value: CashPaid
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.CashRec">
            <summary>
            Enum CashRec for value: CashRec
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ExpPayment">
            <summary>
            Enum ExpPayment for value: ExpPayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.ManJournal">
            <summary>
            Enum ManJournal for value: ManJournal
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.PurchaseOrder">
            <summary>
            Enum PurchaseOrder for value: PurchaseOrder
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Receipt">
            <summary>
            Enum Receipt for value: Receipt
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Transfer">
            <summary>
            Enum Transfer for value: Transfer
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Account">
            <summary>
            Enum Account for value: Account
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Contact">
            <summary>
            Enum Contact for value: Contact
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Business">
            <summary>
            Enum Business for value: Business
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Employee">
            <summary>
            Enum Employee for value: Employee
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Person">
            <summary>
            Enum Person for value: Person
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.User">
            <summary>
            Enum User for value: User
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Org">
            <summary>
            Enum Org for value: Org
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.FixedAsset">
            <summary>
            Enum FixedAsset for value: FixedAsset
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.PayRun">
            <summary>
            Enum PayRun for value: PayRun
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.PriceListItem">
            <summary>
            Enum PriceListItem for value: PriceListItem
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Bank">
            <summary>
            Enum Bank for value: Bank
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Current">
            <summary>
            Enum Current for value: Current
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Equity">
            <summary>
            Enum Equity for value: Equity
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Expense">
            <summary>
            Enum Expense for value: Expense
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Fixed">
            <summary>
            Enum Fixed for value: Fixed
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Liability">
            <summary>
            Enum Liability for value: Liability
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Prepayment">
            <summary>
            Enum Prepayment for value: Prepayment
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Revenue">
            <summary>
            Enum Revenue for value: Revenue
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Sales">
            <summary>
            Enum Sales for value: Sales
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Overheads">
            <summary>
            Enum Overheads for value: Overheads
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Depreciatn">
            <summary>
            Enum Depreciatn for value: Depreciatn
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.OtherIncome">
            <summary>
            Enum OtherIncome for value: OtherIncome
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.DirectCosts">
            <summary>
            Enum DirectCosts for value: DirectCosts
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Currliab">
            <summary>
            Enum Currliab for value: Currliab
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.Termliab">
            <summary>
            Enum Termliab for value: Termliab
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.NonCurrent">
            <summary>
            Enum NonCurrent for value: NonCurrent
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Files.ObjectType.SalesQuote">
            <summary>
            Enum SalesQuote for value: SalesQuote
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Files.User">
            <summary>
            User
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.User.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Files.User" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.User.Id">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.User.Name">
            <summary>
            Key is Name, but returns Email address of user who created the file
            </summary>
            <value>Key is Name, but returns Email address of user who created the file</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.User.FirstName">
            <summary>
            First name of user
            </summary>
            <value>First name of user</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.User.LastName">
            <summary>
            Last name of user
            </summary>
            <value>Last name of user</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Files.User.FullName">
            <summary>
            Last name of user
            </summary>
            <value>Last name of user</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.User.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.User.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.User.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.User.Equals(Xero.NetStandard.OAuth2.Model.Files.User)">
            <summary>
            Returns true if User instances are equal
            </summary>
            <param name="input">Instance of User to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.User.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Files.User.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage">
            <summary>
            AccountUsage
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.Month">
            <summary>
            The month this usage item contains data for
            </summary>
            <value>The month this usage item contains data for</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.AccountId">
            <summary>
            The account this usage item contains data for
            </summary>
            <value>The account this usage item contains data for</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.CurrencyCode">
            <summary>
            The currency code this usage item contains data for
            </summary>
            <value>The currency code this usage item contains data for</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.TotalReceived">
            <summary>
            Total received
            </summary>
            <value>Total received</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.CountReceived">
            <summary>
            Count of received
            </summary>
            <value>Count of received</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.TotalPaid">
            <summary>
            Total paid
            </summary>
            <value>Total paid</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.CountPaid">
            <summary>
            Count of paid
            </summary>
            <value>Count of paid</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.TotalManualJournal">
            <summary>
            Total value of manual journals
            </summary>
            <value>Total value of manual journals</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.CountManualJournal">
            <summary>
            Count of manual journals
            </summary>
            <value>Count of manual journals</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.AccountName">
            <summary>
            The name of the account
            </summary>
            <value>The name of the account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.ReportingCode">
            <summary>
            Shown if set
            </summary>
            <value>Shown if set</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.ReportingCodeName">
            <summary>
            Shown if set
            </summary>
            <value>Shown if set</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.ReportCodeUpdatedDateUtc">
            <summary>
            Last modified date UTC format
            </summary>
            <value>Last modified date UTC format</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.Equals(Xero.NetStandard.OAuth2.Model.Finance.AccountUsage)">
            <summary>
            Returns true if AccountUsage instances are equal
            </summary>
            <param name="input">Instance of AccountUsage to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.AccountUsage.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.AccountUsageResponse">
            <summary>
            AccountUsageResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsageResponse.OrganisationId">
            <summary>
            The requested Organisation to which the data pertains
            </summary>
            <value>The requested Organisation to which the data pertains</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsageResponse.StartMonth">
            <summary>
            The start month of the report
            </summary>
            <value>The start month of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsageResponse.EndMonth">
            <summary>
            The end month of the report
            </summary>
            <value>The end month of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.AccountUsageResponse.AccountUsage">
            <summary>
            Gets or Sets AccountUsage
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.AccountUsageResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.AccountUsageResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.AccountUsageResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.AccountUsageResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.AccountUsageResponse)">
            <summary>
            Returns true if AccountUsageResponse instances are equal
            </summary>
            <param name="input">Instance of AccountUsageResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.AccountUsageResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.AccountUsageResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail">
            <summary>
            BalanceSheetAccountDetail
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail.Code">
            <summary>
            Accounting code
            </summary>
            <value>Accounting code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail.AccountID">
            <summary>
            ID of the account
            </summary>
            <value>ID of the account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail.Name">
            <summary>
            Account name
            </summary>
            <value>Account name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail.ReportingCode">
            <summary>
            Reporting code
            </summary>
            <value>Reporting code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail.Total">
            <summary>
            Total movement on this account
            </summary>
            <value>Total movement on this account</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail.Equals(Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail)">
            <summary>
            Returns true if BalanceSheetAccountDetail instances are equal
            </summary>
            <param name="input">Instance of BalanceSheetAccountDetail to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountDetail.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountGroup">
            <summary>
            BalanceSheetAccountGroup
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountGroup.AccountTypes">
            <summary>
            Gets or Sets AccountTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountGroup.Total">
            <summary>
            Total value of all the accounts in this type
            </summary>
            <value>Total value of all the accounts in this type</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountGroup.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountGroup.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountGroup.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountGroup.Equals(Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountGroup)">
            <summary>
            Returns true if BalanceSheetAccountGroup instances are equal
            </summary>
            <param name="input">Instance of BalanceSheetAccountGroup to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountGroup.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountGroup.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountType">
            <summary>
            BalanceSheetAccountType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountType.AccountType">
            <summary>
            The type of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountTypes&#39;&gt;Account Types&lt;/a&gt;
            </summary>
            <value>The type of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountTypes&#39;&gt;Account Types&lt;/a&gt;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountType.Accounts">
            <summary>
            A list of all accounts of this type. Refer to the Account section below for each account element detail.
            </summary>
            <value>A list of all accounts of this type. Refer to the Account section below for each account element detail.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountType.Total">
            <summary>
            Total value of all the accounts in this type
            </summary>
            <value>Total value of all the accounts in this type</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountType.Equals(Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountType)">
            <summary>
            Returns true if BalanceSheetAccountType instances are equal
            </summary>
            <param name="input">Instance of BalanceSheetAccountType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetAccountType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetResponse">
            <summary>
            BalanceSheetResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetResponse.BalanceDate">
            <summary>
            Balance date of the report
            </summary>
            <value>Balance date of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetResponse.Asset">
            <summary>
            Gets or Sets Asset
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetResponse.Liability">
            <summary>
            Gets or Sets Liability
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetResponse.Equity">
            <summary>
            Gets or Sets Equity
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetResponse)">
            <summary>
            Returns true if BalanceSheetResponse instances are equal
            </summary>
            <param name="input">Instance of BalanceSheetResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BalanceSheetResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.BankStatementAccountingResponse">
            <summary>
            BankStatementAccountingResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BankStatementAccountingResponse.BankAccountId">
            <summary>
            Xero Identifier of bank account
            </summary>
            <value>Xero Identifier of bank account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BankStatementAccountingResponse.BankAccountName">
            <summary>
            Name of bank account
            </summary>
            <value>Name of bank account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BankStatementAccountingResponse.BankAccountCurrencyCode">
            <summary>
            Currency code of the bank account
            </summary>
            <value>Currency code of the bank account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BankStatementAccountingResponse.Statements">
            <summary>
            List of bank statements and linked accounting data for the requested period
            </summary>
            <value>List of bank statements and linked accounting data for the requested period</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankStatementAccountingResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankStatementAccountingResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankStatementAccountingResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankStatementAccountingResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.BankStatementAccountingResponse)">
            <summary>
            Returns true if BankStatementAccountingResponse instances are equal
            </summary>
            <param name="input">Instance of BankStatementAccountingResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankStatementAccountingResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankStatementAccountingResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.BankStatementResponse">
            <summary>
            BankStatementResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BankStatementResponse.StatementLines">
            <summary>
            Gets or Sets StatementLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BankStatementResponse.CurrentStatement">
            <summary>
            Gets or Sets CurrentStatement
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankStatementResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankStatementResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankStatementResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankStatementResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.BankStatementResponse)">
            <summary>
            Returns true if BankStatementResponse instances are equal
            </summary>
            <param name="input">Instance of BankStatementResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankStatementResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankStatementResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse">
            <summary>
            BankTransactionResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse.BankTransactionId">
            <summary>
            Xero Identifier of transaction
            </summary>
            <value>Xero Identifier of transaction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse.BatchPaymentId">
            <summary>
            Xero Identifier of batch payment. Present if the transaction is part of a batch.
            </summary>
            <value>Xero Identifier of batch payment. Present if the transaction is part of a batch.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse.Date">
            <summary>
            Date of transaction - YYYY-MM-DD
            </summary>
            <value>Date of transaction - YYYY-MM-DD</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse.Amount">
            <summary>
            Amount of transaction
            </summary>
            <value>Amount of transaction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse.LineItems">
            <summary>
            The LineItems element can contain any number of individual LineItem sub-elements. Not included in summary mode
            </summary>
            <value>The LineItems element can contain any number of individual LineItem sub-elements. Not included in summary mode</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse)">
            <summary>
            Returns true if BankTransactionResponse instances are equal
            </summary>
            <param name="input">Instance of BankTransactionResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.BankTransactionResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse">
            <summary>
            CashAccountResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse.UnreconciledAmountPos">
            <summary>
            Total value of transactions in the journals which are not reconciled to bank statement lines, and have a positive (debit) value.
            </summary>
            <value>Total value of transactions in the journals which are not reconciled to bank statement lines, and have a positive (debit) value.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse.UnreconciledAmountNeg">
            <summary>
            Total value of transactions in the journals which are not reconciled to bank statement lines, and have a negative (credit) value.
            </summary>
            <value>Total value of transactions in the journals which are not reconciled to bank statement lines, and have a negative (credit) value.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse.StartingBalance">
            <summary>
            Starting (or historic) balance from the journals (manually keyed in by users on account creation - unverified).
            </summary>
            <value>Starting (or historic) balance from the journals (manually keyed in by users on account creation - unverified).</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse.AccountBalance">
            <summary>
            Current cash at bank accounting value from the journals.
            </summary>
            <value>Current cash at bank accounting value from the journals.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse.BalanceCurrency">
            <summary>
            Currency which the cashAccount transactions relate to.
            </summary>
            <value>Currency which the cashAccount transactions relate to.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse)">
            <summary>
            Returns true if CashAccountResponse instances are equal
            </summary>
            <param name="input">Instance of CashAccountResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashAccountResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.CashBalance">
            <summary>
            CashBalance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashBalance.OpeningCashBalance">
            <summary>
            Opening balance of cash and cash equivalents
            </summary>
            <value>Opening balance of cash and cash equivalents</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashBalance.ClosingCashBalance">
            <summary>
            Closing balance of cash and cash equivalents
            </summary>
            <value>Closing balance of cash and cash equivalents</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashBalance.NetCashMovement">
            <summary>
            Net movement of cash and cash equivalents for the period
            </summary>
            <value>Net movement of cash and cash equivalents for the period</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashBalance.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashBalance.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashBalance.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashBalance.Equals(Xero.NetStandard.OAuth2.Model.Finance.CashBalance)">
            <summary>
            Returns true if CashBalance instances are equal
            </summary>
            <param name="input">Instance of CashBalance to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashBalance.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashBalance.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount">
            <summary>
            CashflowAccount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.AccountId">
            <summary>
            ID of the account
            </summary>
            <value>ID of the account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.AccountType">
            <summary>
            The type of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountTypes&#39;&gt;Account Types&lt;/a&gt;
            </summary>
            <value>The type of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountTypes&#39;&gt;Account Types&lt;/a&gt;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.AccountClass">
            <summary>
            The class of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountClassTypes&#39;&gt;Account Class Types&lt;/a&gt;
            </summary>
            <value>The class of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountClassTypes&#39;&gt;Account Class Types&lt;/a&gt;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.Code">
            <summary>
            Account code
            </summary>
            <value>Account code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.Name">
            <summary>
            Account name
            </summary>
            <value>Account name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.ReportingCode">
            <summary>
            Reporting code used for cash flow classification
            </summary>
            <value>Reporting code used for cash flow classification</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.Total">
            <summary>
            Total amount for the account
            </summary>
            <value>Total amount for the account</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.Equals(Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount)">
            <summary>
            Returns true if CashflowAccount instances are equal
            </summary>
            <param name="input">Instance of CashflowAccount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowAccount.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.CashflowActivity">
            <summary>
            CashflowActivity
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowActivity.Name">
            <summary>
            Name of the cashflow activity type. It will be either Operating Activities, Investing Activities or Financing Activities
            </summary>
            <value>Name of the cashflow activity type. It will be either Operating Activities, Investing Activities or Financing Activities</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowActivity.Total">
            <summary>
            Total value of the activity type
            </summary>
            <value>Total value of the activity type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowActivity.CashflowTypes">
            <summary>
            Gets or Sets CashflowTypes
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowActivity.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowActivity.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowActivity.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowActivity.Equals(Xero.NetStandard.OAuth2.Model.Finance.CashflowActivity)">
            <summary>
            Returns true if CashflowActivity instances are equal
            </summary>
            <param name="input">Instance of CashflowActivity to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowActivity.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowActivity.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.CashflowResponse">
            <summary>
            CashflowResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowResponse.StartDate">
            <summary>
            Start date of the report
            </summary>
            <value>Start date of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowResponse.EndDate">
            <summary>
            End date of the report
            </summary>
            <value>End date of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowResponse.CashBalance">
            <summary>
            Gets or Sets CashBalance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowResponse.CashflowActivities">
            <summary>
            Break down of cash and cash equivalents for the period
            </summary>
            <value>Break down of cash and cash equivalents for the period</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.CashflowResponse)">
            <summary>
            Returns true if CashflowResponse instances are equal
            </summary>
            <param name="input">Instance of CashflowResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.CashflowType">
            <summary>
            CashflowType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowType.Name">
            <summary>
            Name of the activity
            </summary>
            <value>Name of the activity</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowType.Total">
            <summary>
            Total value of the activity
            </summary>
            <value>Total value of the activity</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashflowType.Accounts">
            <summary>
            List of the accounts in this activity
            </summary>
            <value>List of the accounts in this activity</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowType.Equals(Xero.NetStandard.OAuth2.Model.Finance.CashflowType)">
            <summary>
            Returns true if CashflowType instances are equal
            </summary>
            <param name="input">Instance of CashflowType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashflowType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse">
            <summary>
            CashValidationResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse.AccountId">
            <summary>
            The Xero identifier for an account
            </summary>
            <value>The Xero identifier for an account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse.StatementBalance">
            <summary>
            Gets or Sets StatementBalance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse.StatementBalanceDate">
            <summary>
            UTC Date when the last bank statement item was entered into Xero. This date is represented in ISO 8601 format.
            </summary>
            <value>UTC Date when the last bank statement item was entered into Xero. This date is represented in ISO 8601 format.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse.BankStatement">
            <summary>
            Gets or Sets BankStatement
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse.CashAccount">
            <summary>
            Gets or Sets CashAccount
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse)">
            <summary>
            Returns true if CashValidationResponse instances are equal
            </summary>
            <param name="input">Instance of CashValidationResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CashValidationResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail">
            <summary>
            ContactDetail
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail.ContactId">
            <summary>
            ID of the contact associated with the transactions.    Transactions with no contact will be grouped under the special ID: 86793108-198C-46D8-90A3-43C1D12686CE.    Transactions that are receive or spend bank transfers will be grouped under the special ID: 207322B3-6A58-4BE7-80F1-430123914AD6
            </summary>
            <value>ID of the contact associated with the transactions.    Transactions with no contact will be grouped under the special ID: 86793108-198C-46D8-90A3-43C1D12686CE.    Transactions that are receive or spend bank transfers will be grouped under the special ID: 207322B3-6A58-4BE7-80F1-430123914AD6</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail.Name">
            <summary>
            Name of the contact associated with the transactions.    If no contact is associated with the transactions this will appear as “None Provided”,    For receive or spend bank transfer transactions, this will appear as “Bank Transfer”.
            </summary>
            <value>Name of the contact associated with the transactions.    If no contact is associated with the transactions this will appear as “None Provided”,    For receive or spend bank transfer transactions, this will appear as “Bank Transfer”.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail.Total">
            <summary>
            Total value for the contact
            </summary>
            <value>Total value for the contact</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail.TotalDetail">
            <summary>
            Gets or Sets TotalDetail
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail.TotalOther">
            <summary>
            Gets or Sets TotalOther
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail.AccountCodes">
            <summary>
            A list of account codes involved in transactions.
            </summary>
            <value>A list of account codes involved in transactions.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail.Equals(Xero.NetStandard.OAuth2.Model.Finance.ContactDetail)">
            <summary>
            Returns true if ContactDetail instances are equal
            </summary>
            <param name="input">Instance of ContactDetail to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactDetail.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.ContactResponse">
            <summary>
            ContactResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactResponse.ContactId">
            <summary>
            Xero Identifier of contact
            </summary>
            <value>Xero Identifier of contact</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactResponse.ContactName">
            <summary>
            Full name of contact/organisation
            </summary>
            <value>Full name of contact/organisation</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.ContactResponse)">
            <summary>
            Returns true if ContactResponse instances are equal
            </summary>
            <param name="input">Instance of ContactResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalDetail">
            <summary>
            ContactTotalDetail
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalDetail.TotalPaid">
            <summary>
            Total paid invoice and cash value for the contact within the period.
            </summary>
            <value>Total paid invoice and cash value for the contact within the period.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalDetail.TotalOutstanding">
            <summary>
            Total outstanding invoice value for the contact within the period.
            </summary>
            <value>Total outstanding invoice value for the contact within the period.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalDetail.TotalCreditedUnApplied">
            <summary>
            Total unapplied credited value for the contact within the period.
            </summary>
            <value>Total unapplied credited value for the contact within the period.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalDetail.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalDetail.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalDetail.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalDetail.Equals(Xero.NetStandard.OAuth2.Model.Finance.ContactTotalDetail)">
            <summary>
            Returns true if ContactTotalDetail instances are equal
            </summary>
            <param name="input">Instance of ContactTotalDetail to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalDetail.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalDetail.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalOther">
            <summary>
            ContactTotalOther
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalOther.TotalOutstandingAged">
            <summary>
            Total outstanding invoice value for the contact within the period where the invoices are more than 90 days old
            </summary>
            <value>Total outstanding invoice value for the contact within the period where the invoices are more than 90 days old</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalOther.TotalVoided">
            <summary>
            Total voided value for the contact.
            </summary>
            <value>Total voided value for the contact.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalOther.TotalCredited">
            <summary>
            Total credited value for the contact.
            </summary>
            <value>Total credited value for the contact.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalOther.TransactionCount">
            <summary>
            Number of transactions for the contact.
            </summary>
            <value>Number of transactions for the contact.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalOther.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalOther.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalOther.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalOther.Equals(Xero.NetStandard.OAuth2.Model.Finance.ContactTotalOther)">
            <summary>
            Returns true if ContactTotalOther instances are equal
            </summary>
            <param name="input">Instance of ContactTotalOther to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalOther.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ContactTotalOther.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.CreditNoteResponse">
            <summary>
            CreditNoteResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CreditNoteResponse.CreditNoteId">
            <summary>
            Xero Identifier of credit note
            </summary>
            <value>Xero Identifier of credit note</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CreditNoteResponse.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CreditNoteResponse.Total">
            <summary>
            Total of Invoice tax inclusive (i.e. SubTotal + TotalTax); Not included in summary mode
            </summary>
            <value>Total of Invoice tax inclusive (i.e. SubTotal + TotalTax); Not included in summary mode</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CreditNoteResponse.LineItems">
            <summary>
            Not included in summary mode
            </summary>
            <value>Not included in summary mode</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CreditNoteResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CreditNoteResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CreditNoteResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CreditNoteResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.CreditNoteResponse)">
            <summary>
            Returns true if CreditNoteResponse instances are equal
            </summary>
            <param name="input">Instance of CreditNoteResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CreditNoteResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CreditNoteResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse">
            <summary>
            CurrentStatementResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse.StartDate">
            <summary>
            Looking at the most recent bank statement, this field indicates the first date which transactions on this statement pertain to. This date is represented in ISO 8601 format.
            </summary>
            <value>Looking at the most recent bank statement, this field indicates the first date which transactions on this statement pertain to. This date is represented in ISO 8601 format.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse.EndDate">
            <summary>
            Looking at the most recent bank statement, this field indicates the last date which transactions on this statement pertain to. This date is represented in ISO 8601 format.
            </summary>
            <value>Looking at the most recent bank statement, this field indicates the last date which transactions on this statement pertain to. This date is represented in ISO 8601 format.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse.StartBalance">
            <summary>
            Looking at the most recent bank statement, this field indicates the balance before the transactions on the statement are applied (note, this is not always populated by the bank in every single instance (~10%)).
            </summary>
            <value>Looking at the most recent bank statement, this field indicates the balance before the transactions on the statement are applied (note, this is not always populated by the bank in every single instance (~10%)).</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse.EndBalance">
            <summary>
            Looking at the most recent bank statement, this field indicates the balance after the transactions on the statement are applied (note, this is not always populated by the bank in every single instance (~10%)).
            </summary>
            <value>Looking at the most recent bank statement, this field indicates the balance after the transactions on the statement are applied (note, this is not always populated by the bank in every single instance (~10%)).</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse.ImportedDateTimeUtc">
            <summary>
            Looking at the most recent bank statement, this field indicates when the document was imported into Xero.  This date is represented in ISO 8601 format.
            </summary>
            <value>Looking at the most recent bank statement, this field indicates when the document was imported into Xero.  This date is represented in ISO 8601 format.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse.ImportSourceType">
            <summary>
            Looking at the most recent bank statement, this field indicates the source of the data (direct bank feed, indirect bank feed, file upload, or manual keying).
            </summary>
            <value>Looking at the most recent bank statement, this field indicates the source of the data (direct bank feed, indirect bank feed, file upload, or manual keying).</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse)">
            <summary>
            Returns true if CurrentStatementResponse instances are equal
            </summary>
            <param name="input">Instance of CurrentStatementResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.CurrentStatementResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse">
            <summary>
            DataSourceResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.DirectBankFeed">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero.   This gives an indication on the certainty of correctness of the data.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero.   This gives an indication on the certainty of correctness of the data.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.IndirectBankFeed">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was a indirect bank feed to Xero (usually via Yodlee).   This gives an indication on the certainty of correctness of the data.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was a indirect bank feed to Xero (usually via Yodlee).   This gives an indication on the certainty of correctness of the data.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.FileUpload">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was a CSV file upload in to Xero.   This gives an indication on the certainty of correctness of the data.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was a CSV file upload in to Xero.   This gives an indication on the certainty of correctness of the data.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.Manual">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was manually keyed in to Xero.   This gives an indication on the certainty of correctness of the data.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was manually keyed in to Xero.   This gives an indication on the certainty of correctness of the data.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.DirectBankFeedPos">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero.  This gives an indication on the certainty of correctness of the data.  Only positive transactions are included.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero.  This gives an indication on the certainty of correctness of the data.  Only positive transactions are included.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.IndirectBankFeedPos">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was a indirect bank feed to Xero (usually via Yodlee).   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was a indirect bank feed to Xero (usually via Yodlee).   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.FileUploadPos">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was a CSV file upload in to Xero.   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was a CSV file upload in to Xero.   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.ManualPos">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was manually keyed in to Xero.   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was manually keyed in to Xero.   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.DirectBankFeedNeg">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.IndirectBankFeedNeg">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was a indirect bank feed to Xero (usually via Yodlee).   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was a indirect bank feed to Xero (usually via Yodlee).   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.FileUploadNeg">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was a CSV file upload in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was a CSV file upload in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.ManualNeg">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was manually keyed in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was manually keyed in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.OtherPos">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was any other category.   This gives an indication on the certainty of correctness of the data.  Only positive transactions are included.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was any other category.   This gives an indication on the certainty of correctness of the data.  Only positive transactions are included.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.OtherNeg">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was any other category.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was any other category.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.Other">
            <summary>
            Sum of the amounts of all statement lines where the source of the data was any other category.   This gives an indication on the certainty of correctness of the data.
            </summary>
            <value>Sum of the amounts of all statement lines where the source of the data was any other category.   This gives an indication on the certainty of correctness of the data.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse)">
            <summary>
            Returns true if DataSourceResponse instances are equal
            </summary>
            <param name="input">Instance of DataSourceResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.DataSourceResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse">
            <summary>
            HistoryRecordResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse.Changes">
            <summary>
            The type of change recorded against the document
            </summary>
            <value>The type of change recorded against the document</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse.DateUTCString">
            <summary>
            UTC date that the history record was created
            </summary>
            <value>UTC date that the history record was created</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse.DateUTC">
            <summary>
            UTC date that the history record was created
            </summary>
            <value>UTC date that the history record was created</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse.User">
            <summary>
            The users first and last name
            </summary>
            <value>The users first and last name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse.Details">
            <summary>
            Description of the change event or transaction
            </summary>
            <value>Description of the change event or transaction</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse)">
            <summary>
            Returns true if HistoryRecordResponse instances are equal
            </summary>
            <param name="input">Instance of HistoryRecordResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.HistoryRecordResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse">
            <summary>
            IncomeByContactResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.StartDate">
            <summary>
            Start date of the report
            </summary>
            <value>Start date of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.EndDate">
            <summary>
            End date of the report
            </summary>
            <value>End date of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.Total">
            <summary>
            Total value
            </summary>
            <value>Total value</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.TotalDetail">
            <summary>
            Gets or Sets TotalDetail
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.TotalOther">
            <summary>
            Gets or Sets TotalOther
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.Contacts">
            <summary>
            Gets or Sets Contacts
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.ManualJournals">
            <summary>
            Gets or Sets ManualJournals
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse)">
            <summary>
            Returns true if IncomeByContactResponse instances are equal
            </summary>
            <param name="input">Instance of IncomeByContactResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.IncomeByContactResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.InvoiceResponse">
            <summary>
            InvoiceResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.InvoiceResponse.InvoiceId">
            <summary>
            Xero Identifier of invoice
            </summary>
            <value>Xero Identifier of invoice</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.InvoiceResponse.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.InvoiceResponse.Total">
            <summary>
            Total of Invoice tax inclusive (i.e. SubTotal + TotalTax); Not included in summary mode
            </summary>
            <value>Total of Invoice tax inclusive (i.e. SubTotal + TotalTax); Not included in summary mode</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.InvoiceResponse.LineItems">
            <summary>
            Not included in summary mode
            </summary>
            <value>Not included in summary mode</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.InvoiceResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.InvoiceResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.InvoiceResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.InvoiceResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.InvoiceResponse)">
            <summary>
            Returns true if InvoiceResponse instances are equal
            </summary>
            <param name="input">Instance of InvoiceResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.InvoiceResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.InvoiceResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.LineItemResponse">
            <summary>
            LineItemResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.LineItemResponse.AccountId">
            <summary>
            Xero Identifier of account
            </summary>
            <value>Xero Identifier of account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.LineItemResponse.ReportingCode">
            <summary>
            Shown if set
            </summary>
            <value>Shown if set</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.LineItemResponse.LineAmount">
            <summary>
            Amount of line item
            </summary>
            <value>Amount of line item</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.LineItemResponse.AccountType">
            <summary>
            Account type
            </summary>
            <value>Account type</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LineItemResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LineItemResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LineItemResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LineItemResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.LineItemResponse)">
            <summary>
            Returns true if LineItemResponse instances are equal
            </summary>
            <param name="input">Instance of LineItemResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LineItemResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LineItemResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryModel">
            <summary>
            LockHistoryModel
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryModel.HardLockDate">
            <summary>
            Date the account hard lock was set
            </summary>
            <value>Date the account hard lock was set</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryModel.SoftLockDate">
            <summary>
            Date the account soft lock was set
            </summary>
            <value>Date the account soft lock was set</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryModel.UpdatedDateUtc">
            <summary>
            The system date time that the lock was updated
            </summary>
            <value>The system date time that the lock was updated</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryModel.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryModel.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryModel.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryModel.Equals(Xero.NetStandard.OAuth2.Model.Finance.LockHistoryModel)">
            <summary>
            Returns true if LockHistoryModel instances are equal
            </summary>
            <param name="input">Instance of LockHistoryModel to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryModel.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryModel.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryResponse">
            <summary>
            LockHistoryResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryResponse.OrganisationId">
            <summary>
            The requested Organisation to which the data pertains
            </summary>
            <value>The requested Organisation to which the data pertains</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryResponse.EndDate">
            <summary>
            The end date of the report
            </summary>
            <value>The end date of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryResponse.LockDates">
            <summary>
            Gets or Sets LockDates
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.LockHistoryResponse)">
            <summary>
            Returns true if LockHistoryResponse instances are equal
            </summary>
            <param name="input">Instance of LockHistoryResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.LockHistoryResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.ManualJournalTotal">
            <summary>
            ManualJournalTotal
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ManualJournalTotal.Total">
            <summary>
            Total value of manual journals.
            </summary>
            <value>Total value of manual journals.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ManualJournalTotal.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ManualJournalTotal.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ManualJournalTotal.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ManualJournalTotal.Equals(Xero.NetStandard.OAuth2.Model.Finance.ManualJournalTotal)">
            <summary>
            Returns true if ManualJournalTotal instances are equal
            </summary>
            <param name="input">Instance of ManualJournalTotal to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ManualJournalTotal.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ManualJournalTotal.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.OverpaymentResponse">
            <summary>
            OverpaymentResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.OverpaymentResponse.OverpaymentId">
            <summary>
            Xero Identifier of overpayment
            </summary>
            <value>Xero Identifier of overpayment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.OverpaymentResponse.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.OverpaymentResponse.Total">
            <summary>
            Total of Invoice tax inclusive (i.e. SubTotal + TotalTax); Not included in summary mode
            </summary>
            <value>Total of Invoice tax inclusive (i.e. SubTotal + TotalTax); Not included in summary mode</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.OverpaymentResponse.LineItems">
            <summary>
            Not included in summary mode
            </summary>
            <value>Not included in summary mode</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.OverpaymentResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.OverpaymentResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.OverpaymentResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.OverpaymentResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.OverpaymentResponse)">
            <summary>
            Returns true if OverpaymentResponse instances are equal
            </summary>
            <param name="input">Instance of OverpaymentResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.OverpaymentResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.OverpaymentResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse">
            <summary>
            PaymentResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.PaymentId">
            <summary>
            Xero Identifier of payment
            </summary>
            <value>Xero Identifier of payment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.BatchPaymentId">
            <summary>
            Xero Identifier of batch payment. Present if the payment was created as part of a batch.
            </summary>
            <value>Xero Identifier of batch payment. Present if the payment was created as part of a batch.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.Date">
            <summary>
            Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
            </summary>
            <value>Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.Amount">
            <summary>
            The amount of the payment
            </summary>
            <value>The amount of the payment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.BankAmount">
            <summary>
            The bank amount of the payment
            </summary>
            <value>The bank amount of the payment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.CurrencyRate">
            <summary>
            Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500
            </summary>
            <value>Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.Invoice">
            <summary>
            Gets or Sets Invoice
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.CreditNote">
            <summary>
            Gets or Sets CreditNote
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.Prepayment">
            <summary>
            Gets or Sets Prepayment
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.Overpayment">
            <summary>
            Gets or Sets Overpayment
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse)">
            <summary>
            Returns true if PaymentResponse instances are equal
            </summary>
            <param name="input">Instance of PaymentResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PaymentResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount">
            <summary>
            PnlAccount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount.AccountID">
            <summary>
            ID of the account
            </summary>
            <value>ID of the account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount.AccountType">
            <summary>
            The type of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountTypes&#39;&gt;Account Types&lt;/a&gt;
            </summary>
            <value>The type of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountTypes&#39;&gt;Account Types&lt;/a&gt;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount.Code">
            <summary>
            Account code
            </summary>
            <value>Account code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount.Name">
            <summary>
            Account name
            </summary>
            <value>Account name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount.ReportingCode">
            <summary>
            Reporting code (Shown if set)
            </summary>
            <value>Reporting code (Shown if set)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount.Total">
            <summary>
            Total movement on this account
            </summary>
            <value>Total movement on this account</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount.Equals(Xero.NetStandard.OAuth2.Model.Finance.PnlAccount)">
            <summary>
            Returns true if PnlAccount instances are equal
            </summary>
            <param name="input">Instance of PnlAccount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccount.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountClass">
            <summary>
            PnlAccountClass
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountClass.Total">
            <summary>
            Total revenue/expense value
            </summary>
            <value>Total revenue/expense value</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountClass.AccountTypes">
            <summary>
            Contains trading income and other income for revenue section / operating expenses and direct cost for expense section if the data is available for each section. Refer to the account type element below
            </summary>
            <value>Contains trading income and other income for revenue section / operating expenses and direct cost for expense section if the data is available for each section. Refer to the account type element below</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountClass.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountClass.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountClass.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountClass.Equals(Xero.NetStandard.OAuth2.Model.Finance.PnlAccountClass)">
            <summary>
            Returns true if PnlAccountClass instances are equal
            </summary>
            <param name="input">Instance of PnlAccountClass to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountClass.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountClass.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountType">
            <summary>
            PnlAccountType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountType.Total">
            <summary>
            Total movement on this account type
            </summary>
            <value>Total movement on this account type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountType.Title">
            <summary>
            Name of this account type, it will be either Trading Income or Other Income for Revenue section / Direct Cost or Operating Expenses for Expense section
            </summary>
            <value>Name of this account type, it will be either Trading Income or Other Income for Revenue section / Direct Cost or Operating Expenses for Expense section</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountType.Accounts">
            <summary>
            A list of the movement on each account detail during the query period. Refer to the account detail element below
            </summary>
            <value>A list of the movement on each account detail during the query period. Refer to the account detail element below</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountType.Equals(Xero.NetStandard.OAuth2.Model.Finance.PnlAccountType)">
            <summary>
            Returns true if PnlAccountType instances are equal
            </summary>
            <param name="input">Instance of PnlAccountType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PnlAccountType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse">
            <summary>
            PracticeResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse.XeroPartnerSince">
            <summary>
            Year of becoming a partner.
            </summary>
            <value>Year of becoming a partner.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse.Tier">
            <summary>
            Customer tier e.g. Silver
            </summary>
            <value>Customer tier e.g. Silver</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse.Location">
            <summary>
            Country of location.
            </summary>
            <value>Country of location.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse.OrganisationCount">
            <summary>
            Organisation count.
            </summary>
            <value>Organisation count.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse.StaffCertified">
            <summary>
            Staff certified (true/false).
            </summary>
            <value>Staff certified (true/false).</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse)">
            <summary>
            Returns true if PracticeResponse instances are equal
            </summary>
            <param name="input">Instance of PracticeResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PracticeResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.PrepaymentResponse">
            <summary>
            PrepaymentResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PrepaymentResponse.PrepaymentId">
            <summary>
            Xero Identifier of prepayment
            </summary>
            <value>Xero Identifier of prepayment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PrepaymentResponse.Contact">
            <summary>
            Gets or Sets Contact
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PrepaymentResponse.Total">
            <summary>
            Total of Invoice tax inclusive (i.e. SubTotal + TotalTax); Not included in summary mode
            </summary>
            <value>Total of Invoice tax inclusive (i.e. SubTotal + TotalTax); Not included in summary mode</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.PrepaymentResponse.LineItems">
            <summary>
            Not included in summary mode
            </summary>
            <value>Not included in summary mode</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PrepaymentResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PrepaymentResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PrepaymentResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PrepaymentResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.PrepaymentResponse)">
            <summary>
            Returns true if PrepaymentResponse instances are equal
            </summary>
            <param name="input">Instance of PrepaymentResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PrepaymentResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.PrepaymentResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.Problem">
            <summary>
            Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.Problem.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.Problem.Title">
            <summary>
            Gets or Sets Title
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.Problem.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.Problem.Detail">
            <summary>
            Gets or Sets Detail
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.Problem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.Problem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.Problem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.Problem.Equals(Xero.NetStandard.OAuth2.Model.Finance.Problem)">
            <summary>
            Returns true if Problem instances are equal
            </summary>
            <param name="input">Instance of Problem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.Problem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.Problem.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.ProblemType">
            <summary>
            Defines ProblemType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Finance.ProblemType.NotSet">
            <summary>
            Enum NotSet for value: NotSet
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Finance.ProblemType.BankAccountNotFound">
            <summary>
            Enum BankAccountNotFound for value: bank-account-not-found
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Finance.ProblemType.InternalError">
            <summary>
            Enum InternalError for value: internal-error
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Finance.ProblemType.InvalidApplication">
            <summary>
            Enum InvalidApplication for value: invalid-application
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Finance.ProblemType.InvalidRequest">
            <summary>
            Enum InvalidRequest for value: invalid-request
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Finance.ProblemType.OrganisationNotFound">
            <summary>
            Enum OrganisationNotFound for value: organisation-not-found
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Finance.ProblemType.OrganisationOffline">
            <summary>
            Enum OrganisationOffline for value: organisation-offline
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Finance.ProblemType.RequestTimeout">
            <summary>
            Enum RequestTimeout for value: request-timeout
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Finance.ProblemType.ServiceUnavailable">
            <summary>
            Enum ServiceUnavailable for value: service-unavailable
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Finance.ProblemType.Unauthorized">
            <summary>
            Enum Unauthorized for value: unauthorized
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse">
            <summary>
            ProfitAndLossResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse.StartDate">
            <summary>
            Start date of the report
            </summary>
            <value>Start date of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse.EndDate">
            <summary>
            End date of the report
            </summary>
            <value>End date of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse.NetProfitLoss">
            <summary>
            Net profit loss value
            </summary>
            <value>Net profit loss value</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse.Revenue">
            <summary>
            Gets or Sets Revenue
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse.Expense">
            <summary>
            Gets or Sets Expense
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse)">
            <summary>
            Returns true if ProfitAndLossResponse instances are equal
            </summary>
            <param name="input">Instance of ProfitAndLossResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ProfitAndLossResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryModel">
            <summary>
            ReportHistoryModel
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryModel.ReportName">
            <summary>
            Report code or report title
            </summary>
            <value>Report code or report title</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryModel.ReportDateText">
            <summary>
            The date or date range of the report
            </summary>
            <value>The date or date range of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryModel.PublishedDateUtc">
            <summary>
            The system date time that the report was published
            </summary>
            <value>The system date time that the report was published</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryModel.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryModel.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryModel.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryModel.Equals(Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryModel)">
            <summary>
            Returns true if ReportHistoryModel instances are equal
            </summary>
            <param name="input">Instance of ReportHistoryModel to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryModel.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryModel.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryResponse">
            <summary>
            ReportHistoryResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryResponse.OrganisationId">
            <summary>
            The requested Organisation to which the data pertains
            </summary>
            <value>The requested Organisation to which the data pertains</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryResponse.EndDate">
            <summary>
            The end date of the report
            </summary>
            <value>The end date of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryResponse.Reports">
            <summary>
            Gets or Sets Reports
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryResponse)">
            <summary>
            Returns true if ReportHistoryResponse instances are equal
            </summary>
            <param name="input">Instance of ReportHistoryResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.ReportHistoryResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.StatementBalanceResponse">
            <summary>
            StatementBalanceResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementBalanceResponse.Value">
            <summary>
            Total closing balance of the account. This includes both reconciled and unreconciled bank statement lines. The closing balance will always be represented as a positive number, with it’s debit/credit status defined in the statementBalanceDebitCredit field.
            </summary>
            <value>Total closing balance of the account. This includes both reconciled and unreconciled bank statement lines. The closing balance will always be represented as a positive number, with it’s debit/credit status defined in the statementBalanceDebitCredit field.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementBalanceResponse.Type">
            <summary>
            The DEBIT or CREDIT status of the account. Cash accounts in credit have a negative balance.
            </summary>
            <value>The DEBIT or CREDIT status of the account. Cash accounts in credit have a negative balance.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementBalanceResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementBalanceResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementBalanceResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementBalanceResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.StatementBalanceResponse)">
            <summary>
            Returns true if StatementBalanceResponse instances are equal
            </summary>
            <param name="input">Instance of StatementBalanceResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementBalanceResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementBalanceResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse">
            <summary>
            StatementLineResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.StatementLineId">
            <summary>
            Xero Identifier of statement line
            </summary>
            <value>Xero Identifier of statement line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.PostedDate">
            <summary>
            Date of when statement line was posted
            </summary>
            <value>Date of when statement line was posted</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.Reference">
            <summary>
            Reference description of statement line
            </summary>
            <value>Reference description of statement line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.Notes">
            <summary>
            Notes description of statement line
            </summary>
            <value>Notes description of statement line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.ChequeNo">
            <summary>
            Cheque number of statement line
            </summary>
            <value>Cheque number of statement line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.Amount">
            <summary>
            Amount of statement line
            </summary>
            <value>Amount of statement line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.TransactionDate">
            <summary>
            Transaction date of statement line
            </summary>
            <value>Transaction date of statement line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.Type">
            <summary>
            Type of statement line
            </summary>
            <value>Type of statement line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.IsReconciled">
            <summary>
            Boolean to show if statement line is reconciled
            </summary>
            <value>Boolean to show if statement line is reconciled</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.IsDuplicate">
            <summary>
            Boolean to show if statement line is duplicate
            </summary>
            <value>Boolean to show if statement line is duplicate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.IsDeleted">
            <summary>
            Boolean to show if statement line is deleted
            </summary>
            <value>Boolean to show if statement line is deleted</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.Payments">
            <summary>
            List of payments associated with reconciled statement lines
            </summary>
            <value>List of payments associated with reconciled statement lines</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.BankTransactions">
            <summary>
            List of bank transactions associated with reconciled statement lines
            </summary>
            <value>List of bank transactions associated with reconciled statement lines</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse)">
            <summary>
            Returns true if StatementLineResponse instances are equal
            </summary>
            <param name="input">Instance of StatementLineResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementLineResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse">
            <summary>
            StatementLinesResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.UnreconciledAmountPos">
            <summary>
            Sum of the amounts of all statement lines where both the reconciled flag is set to FALSE, and the amount is positive.
            </summary>
            <value>Sum of the amounts of all statement lines where both the reconciled flag is set to FALSE, and the amount is positive.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.UnreconciledAmountNeg">
            <summary>
            Sum of the amounts of all statement lines where both the reconciled flag is set to FALSE, and the amount is negative.
            </summary>
            <value>Sum of the amounts of all statement lines where both the reconciled flag is set to FALSE, and the amount is negative.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.UnreconciledLines">
            <summary>
            Count of all statement lines where the reconciled flag is set to FALSE.
            </summary>
            <value>Count of all statement lines where the reconciled flag is set to FALSE.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.AvgDaysUnreconciledPos">
            <summary>
            Sum-product of age of statement line in days multiplied by transaction amount, divided by the sum of transaction amount - in for those statement lines in which the reconciled flag is set to FALSE, and the amount is positive. Provides an indication of the age of unreconciled transactions.
            </summary>
            <value>Sum-product of age of statement line in days multiplied by transaction amount, divided by the sum of transaction amount - in for those statement lines in which the reconciled flag is set to FALSE, and the amount is positive. Provides an indication of the age of unreconciled transactions.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.AvgDaysUnreconciledNeg">
            <summary>
            Sum-product of age of statement line in days multiplied by transaction amount, divided by the sum of transaction amount - in for those statement lines in which the reconciled flag is set to FALSE, and the amount is negative. Provides an indication of the age of unreconciled transactions.
            </summary>
            <value>Sum-product of age of statement line in days multiplied by transaction amount, divided by the sum of transaction amount - in for those statement lines in which the reconciled flag is set to FALSE, and the amount is negative. Provides an indication of the age of unreconciled transactions.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.EarliestUnreconciledTransaction">
            <summary>
            UTC Date which is the earliest transaction date of a statement line for which the reconciled flag is set to FALSE.  This date is represented in ISO 8601 format.
            </summary>
            <value>UTC Date which is the earliest transaction date of a statement line for which the reconciled flag is set to FALSE.  This date is represented in ISO 8601 format.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.LatestUnreconciledTransaction">
            <summary>
            UTC Date which is the latest transaction date of a statement line for which the reconciled flag is set to FALSE.  This date is represented in ISO 8601 format.
            </summary>
            <value>UTC Date which is the latest transaction date of a statement line for which the reconciled flag is set to FALSE.  This date is represented in ISO 8601 format.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.DeletedAmount">
            <summary>
            Sum of the amounts of all deleted statement lines.  Transactions may be deleted due to duplication or otherwise.
            </summary>
            <value>Sum of the amounts of all deleted statement lines.  Transactions may be deleted due to duplication or otherwise.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.TotalAmount">
            <summary>
            Sum of the amounts of all statement lines.  This is used as a metric of comparison to the unreconciled figures above.
            </summary>
            <value>Sum of the amounts of all statement lines.  This is used as a metric of comparison to the unreconciled figures above.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.DataSource">
            <summary>
            Gets or Sets DataSource
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.EarliestReconciledTransaction">
            <summary>
            UTC Date which is the earliest transaction date of a statement line for which the reconciled flag is set to TRUE.  This date is represented in ISO 8601 format.
            </summary>
            <value>UTC Date which is the earliest transaction date of a statement line for which the reconciled flag is set to TRUE.  This date is represented in ISO 8601 format.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.LatestReconciledTransaction">
            <summary>
            UTC Date which is the latest transaction date of a statement line for which the reconciled flag is set to TRUE.  This date is represented in ISO 8601 format.
            </summary>
            <value>UTC Date which is the latest transaction date of a statement line for which the reconciled flag is set to TRUE.  This date is represented in ISO 8601 format.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.ReconciledAmountPos">
            <summary>
            Sum of the amounts of all statement lines where both the reconciled flag is set to TRUE, and the amount is positive.
            </summary>
            <value>Sum of the amounts of all statement lines where both the reconciled flag is set to TRUE, and the amount is positive.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.ReconciledAmountNeg">
            <summary>
            Sum of the amounts of all statement lines where both the reconciled flag is set to TRUE, and the amount is negative.
            </summary>
            <value>Sum of the amounts of all statement lines where both the reconciled flag is set to TRUE, and the amount is negative.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.ReconciledLines">
            <summary>
            Count of all statement lines where the reconciled flag is set to TRUE
            </summary>
            <value>Count of all statement lines where the reconciled flag is set to TRUE</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.TotalAmountPos">
            <summary>
            Sum of the amounts of all statement lines where the amount is positive
            </summary>
            <value>Sum of the amounts of all statement lines where the amount is positive</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.TotalAmountNeg">
            <summary>
            Sum of the amounts of all statement lines where the amount is negative.
            </summary>
            <value>Sum of the amounts of all statement lines where the amount is negative.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse)">
            <summary>
            Returns true if StatementLinesResponse instances are equal
            </summary>
            <param name="input">Instance of StatementLinesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementLinesResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse">
            <summary>
            StatementResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.StatementId">
            <summary>
            Xero Identifier of statement
            </summary>
            <value>Xero Identifier of statement</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.StartDate">
            <summary>
            Start date of statement
            </summary>
            <value>Start date of statement</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.EndDate">
            <summary>
            End date of statement
            </summary>
            <value>End date of statement</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.ImportedDateTimeUtc">
            <summary>
            Utc date time of when the statement was imported in Xero
            </summary>
            <value>Utc date time of when the statement was imported in Xero</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.ImportSource">
            <summary>
            Indicates the source of the statement data. Either imported from 1) direct bank feed OR 2) manual customer entry or upload. Manual import sources are STMTIMPORTSRC/MANUAL, STMTIMPORTSRC/CSV, STMTIMPORTSRC/OFX, Ofx or STMTIMPORTSRC/QIF. All other import sources are direct and, depending on the direct solution, may contain the name of the financial institution.
            </summary>
            <value>Indicates the source of the statement data. Either imported from 1) direct bank feed OR 2) manual customer entry or upload. Manual import sources are STMTIMPORTSRC/MANUAL, STMTIMPORTSRC/CSV, STMTIMPORTSRC/OFX, Ofx or STMTIMPORTSRC/QIF. All other import sources are direct and, depending on the direct solution, may contain the name of the financial institution.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.StartBalance">
            <summary>
            Opening balance sourced from imported bank statements (if supplied). Note, for manually uploaded statements, this balance is also manual and usually not supplied.
            </summary>
            <value>Opening balance sourced from imported bank statements (if supplied). Note, for manually uploaded statements, this balance is also manual and usually not supplied.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.EndBalance">
            <summary>
            Closing balance sourced from imported bank statements (if supplied). Note, for manually uploaded statements, this balance is also manual and usually not supplied.
            </summary>
            <value>Closing balance sourced from imported bank statements (if supplied). Note, for manually uploaded statements, this balance is also manual and usually not supplied.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.StatementLines">
            <summary>
            List of statement lines
            </summary>
            <value>List of statement lines</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.StatementResponse)">
            <summary>
            Returns true if StatementResponse instances are equal
            </summary>
            <param name="input">Instance of StatementResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.StatementResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.TotalDetail">
            <summary>
            TotalDetail
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TotalDetail.TotalPaid">
            <summary>
            Total paid invoice and cash value within the period.
            </summary>
            <value>Total paid invoice and cash value within the period.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TotalDetail.TotalOutstanding">
            <summary>
            Total outstanding invoice value within the period.
            </summary>
            <value>Total outstanding invoice value within the period.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TotalDetail.TotalCreditedUnApplied">
            <summary>
            Total unapplied credited value within the period.
            </summary>
            <value>Total unapplied credited value within the period.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TotalDetail.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TotalDetail.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TotalDetail.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TotalDetail.Equals(Xero.NetStandard.OAuth2.Model.Finance.TotalDetail)">
            <summary>
            Returns true if TotalDetail instances are equal
            </summary>
            <param name="input">Instance of TotalDetail to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TotalDetail.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TotalDetail.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.TotalOther">
            <summary>
            TotalOther
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TotalOther.TotalOutstandingAged">
            <summary>
            Total outstanding invoice value within the period where the invoices are more than 90 days old
            </summary>
            <value>Total outstanding invoice value within the period where the invoices are more than 90 days old</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TotalOther.TotalVoided">
            <summary>
            Total voided value.
            </summary>
            <value>Total voided value.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TotalOther.TotalCredited">
            <summary>
            Total credited value.
            </summary>
            <value>Total credited value.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TotalOther.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TotalOther.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TotalOther.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TotalOther.Equals(Xero.NetStandard.OAuth2.Model.Finance.TotalOther)">
            <summary>
            Returns true if TotalOther instances are equal
            </summary>
            <param name="input">Instance of TotalOther to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TotalOther.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TotalOther.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount">
            <summary>
            TrialBalanceAccount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.AccountId">
            <summary>
            ID of the account
            </summary>
            <value>ID of the account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.AccountType">
            <summary>
            The type of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountTypes&#39;&gt;Account Types&lt;/a&gt;
            </summary>
            <value>The type of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountTypes&#39;&gt;Account Types&lt;/a&gt;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.AccountCode">
            <summary>
            Customer defined alpha numeric account code e.g 200 or SALES
            </summary>
            <value>Customer defined alpha numeric account code e.g 200 or SALES</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.AccountClass">
            <summary>
            The class of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountClassTypes&#39;&gt;Account Class Types&lt;/a&gt;
            </summary>
            <value>The class of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountClassTypes&#39;&gt;Account Class Types&lt;/a&gt;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.Status">
            <summary>
            Accounts with a status of ACTIVE can be updated to ARCHIVED. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountStatusCodes&#39;&gt;Account Status Codes&lt;/a&gt;
            </summary>
            <value>Accounts with a status of ACTIVE can be updated to ARCHIVED. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountStatusCodes&#39;&gt;Account Status Codes&lt;/a&gt;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.ReportingCode">
            <summary>
            Reporting code (Shown if set)
            </summary>
            <value>Reporting code (Shown if set)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.AccountName">
            <summary>
            Name of the account
            </summary>
            <value>Name of the account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.Balance">
            <summary>
            Gets or Sets Balance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.SignedBalance">
            <summary>
            Value of balance. Expense and Asset accounts code debits as positive. Revenue, Liability, and Equity accounts code debits as negative
            </summary>
            <value>Value of balance. Expense and Asset accounts code debits as positive. Revenue, Liability, and Equity accounts code debits as negative</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.AccountMovement">
            <summary>
            Gets or Sets AccountMovement
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.Equals(Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount)">
            <summary>
            Returns true if TrialBalanceAccount instances are equal
            </summary>
            <param name="input">Instance of TrialBalanceAccount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceAccount.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceEntry">
            <summary>
            TrialBalanceEntry
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceEntry.Value">
            <summary>
            Net movement or net balance in the account
            </summary>
            <value>Net movement or net balance in the account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceEntry.EntryType">
            <summary>
            Sign (Debit/Credit) of the movement of balance in the account
            </summary>
            <value>Sign (Debit/Credit) of the movement of balance in the account</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceEntry.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceEntry.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceEntry.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceEntry.Equals(Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceEntry)">
            <summary>
            Returns true if TrialBalanceEntry instances are equal
            </summary>
            <param name="input">Instance of TrialBalanceEntry to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceEntry.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceEntry.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceMovement">
            <summary>
            TrialBalanceMovement
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceMovement.Debits">
            <summary>
            Debit amount
            </summary>
            <value>Debit amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceMovement.Credits">
            <summary>
            Credit amount
            </summary>
            <value>Credit amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceMovement.Movement">
            <summary>
            Gets or Sets Movement
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceMovement.SignedMovement">
            <summary>
            Value of movement. Expense and Asset accounts code debits as positive. Revenue, Liability, and Equity accounts code debits as negative
            </summary>
            <value>Value of movement. Expense and Asset accounts code debits as positive. Revenue, Liability, and Equity accounts code debits as negative</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceMovement.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceMovement.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceMovement.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceMovement.Equals(Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceMovement)">
            <summary>
            Returns true if TrialBalanceMovement instances are equal
            </summary>
            <param name="input">Instance of TrialBalanceMovement to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceMovement.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceMovement.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceResponse">
            <summary>
            TrialBalanceResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceResponse.StartDate">
            <summary>
            Start date of the report
            </summary>
            <value>Start date of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceResponse.EndDate">
            <summary>
            End date of the report
            </summary>
            <value>End date of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceResponse.Accounts">
            <summary>
            Refer to the accounts section below
            </summary>
            <value>Refer to the accounts section below</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceResponse)">
            <summary>
            Returns true if TrialBalanceResponse instances are equal
            </summary>
            <param name="input">Instance of TrialBalanceResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.TrialBalanceResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.UserActivitiesResponse">
            <summary>
            UserActivitiesResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserActivitiesResponse.OrganisationId">
            <summary>
            The requested Organisation to which the data pertains
            </summary>
            <value>The requested Organisation to which the data pertains</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserActivitiesResponse.DataMonth">
            <summary>
            The month of the report
            </summary>
            <value>The month of the report</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserActivitiesResponse.Users">
            <summary>
            Gets or Sets Users
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.UserActivitiesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.UserActivitiesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.UserActivitiesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.UserActivitiesResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.UserActivitiesResponse)">
            <summary>
            Returns true if UserActivitiesResponse instances are equal
            </summary>
            <param name="input">Instance of UserActivitiesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.UserActivitiesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.UserActivitiesResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Finance.UserResponse">
            <summary>
            UserResponse
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.UserId">
            <summary>
            The Xero identifier for the user
            </summary>
            <value>The Xero identifier for the user</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.UserCreatedDateUtc">
            <summary>
            Timestamp of user creation.
            </summary>
            <value>Timestamp of user creation.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.LastLoginDateUtc">
            <summary>
            Timestamp of user last login
            </summary>
            <value>Timestamp of user last login</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.IsExternalPartner">
            <summary>
            User is external partner.
            </summary>
            <value>User is external partner.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.HasAccountantRole">
            <summary>
            User has Accountant role.
            </summary>
            <value>User has Accountant role.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.MonthPeriod">
            <summary>
            Month period in format  yyyy-MM.
            </summary>
            <value>Month period in format  yyyy-MM.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.NumberOfLogins">
            <summary>
            Number of times the user has logged in.
            </summary>
            <value>Number of times the user has logged in.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.NumberOfDocumentsCreated">
            <summary>
            Number of documents created.
            </summary>
            <value>Number of documents created.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.NetValueDocumentsCreated">
            <summary>
            Net value of documents created.
            </summary>
            <value>Net value of documents created.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.AbsoluteValueDocumentsCreated">
            <summary>
            Absolute value of documents created.
            </summary>
            <value>Absolute value of documents created.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.AttachedPractices">
            <summary>
            Gets or Sets AttachedPractices
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.HistoryRecords">
            <summary>
            Gets or Sets HistoryRecords
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.Equals(Xero.NetStandard.OAuth2.Model.Finance.UserResponse)">
            <summary>
            Returns true if UserResponse instances are equal
            </summary>
            <param name="input">Instance of UserResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Finance.UserResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Identity.AccessToken">
            <summary>
            AccessToken
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.AccessToken.IdToken">
            <summary>
            Xero unique identifier
            </summary>
            <value>Xero unique identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.AccessToken._AccessToken">
            <summary>
            access token provided during authentication flow
            </summary>
            <value>access token provided during authentication flow</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.AccessToken.ExpiresIn">
            <summary>
            time in seconds until access token expires.
            </summary>
            <value>time in seconds until access token expires.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.AccessToken.TokenType">
            <summary>
            type of token i.e. Bearer
            </summary>
            <value>type of token i.e. Bearer</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.AccessToken.RefreshToken">
            <summary>
            token used to refresh an expired access token
            </summary>
            <value>token used to refresh an expired access token</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.AccessToken.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.AccessToken.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.AccessToken.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.AccessToken.Equals(Xero.NetStandard.OAuth2.Model.Identity.AccessToken)">
            <summary>
            Returns true if AccessToken instances are equal
            </summary>
            <param name="input">Instance of AccessToken to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.AccessToken.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.AccessToken.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Identity.Connection">
            <summary>
            Connection
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.Connection.Id">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.Connection.TenantId">
            <summary>
            Xero identifier of organisation
            </summary>
            <value>Xero identifier of organisation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.Connection.AuthEventId">
            <summary>
            Identifier shared across connections authorised at the same time
            </summary>
            <value>Identifier shared across connections authorised at the same time</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.Connection.TenantType">
            <summary>
            Xero tenant type (i.e. ORGANISATION, PRACTICE)
            </summary>
            <value>Xero tenant type (i.e. ORGANISATION, PRACTICE)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.Connection.TenantName">
            <summary>
            Xero tenant name
            </summary>
            <value>Xero tenant name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.Connection.CreatedDateUtc">
            <summary>
            The date when the user connected this tenant to your app
            </summary>
            <value>The date when the user connected this tenant to your app</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.Connection.UpdatedDateUtc">
            <summary>
            The date when the user most recently connected this tenant to your app. May differ to the created date if the user has disconnected and subsequently reconnected this tenant to your app.
            </summary>
            <value>The date when the user most recently connected this tenant to your app. May differ to the created date if the user has disconnected and subsequently reconnected this tenant to your app.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.Connection.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.Connection.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.Connection.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.Connection.Equals(Xero.NetStandard.OAuth2.Model.Identity.Connection)">
            <summary>
            Returns true if Connection instances are equal
            </summary>
            <param name="input">Instance of Connection to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.Connection.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.Connection.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Identity.RefreshToken">
            <summary>
            RefreshToken
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.RefreshToken.GrantType">
            <summary>
            Xero grant type
            </summary>
            <value>Xero grant type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.RefreshToken._RefreshToken">
            <summary>
            refresh token provided during authentication flow
            </summary>
            <value>refresh token provided during authentication flow</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.RefreshToken.ClientId">
            <summary>
            client id for Xero app
            </summary>
            <value>client id for Xero app</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Identity.RefreshToken.ClientSecret">
            <summary>
            client secret for Xero app 2
            </summary>
            <value>client secret for Xero app 2</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.RefreshToken.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.RefreshToken.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.RefreshToken.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.RefreshToken.Equals(Xero.NetStandard.OAuth2.Model.Identity.RefreshToken)">
            <summary>
            Returns true if RefreshToken instances are equal
            </summary>
            <param name="input">Instance of RefreshToken to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.RefreshToken.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Identity.RefreshToken.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.Account">
            <summary>
            Account
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Account.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Account.AccountID">
            <summary>
            Xero identifier for accounts
            </summary>
            <value>Xero identifier for accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Account.Code">
            <summary>
            Customer defined account code
            </summary>
            <value>Customer defined account code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Account.Name">
            <summary>
            Name of account
            </summary>
            <value>Name of account</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Account.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Account.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Account.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Account.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.Account)">
            <summary>
            Returns true if Account instances are equal
            </summary>
            <param name="input">Instance of Account to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Account.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Account.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType">
            <summary>
            See Account Types
            </summary>
            <value>See Account Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.BANK">
            <summary>
            Enum BANK for value: BANK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.CURRENT">
            <summary>
            Enum CURRENT for value: CURRENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.CURRLIAB">
            <summary>
            Enum CURRLIAB for value: CURRLIAB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.DEPRECIATN">
            <summary>
            Enum DEPRECIATN for value: DEPRECIATN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.DIRECTCOSTS">
            <summary>
            Enum DIRECTCOSTS for value: DIRECTCOSTS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.EQUITY">
            <summary>
            Enum EQUITY for value: EQUITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.EXPENSE">
            <summary>
            Enum EXPENSE for value: EXPENSE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.FIXED">
            <summary>
            Enum FIXED for value: FIXED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.INVENTORY">
            <summary>
            Enum INVENTORY for value: INVENTORY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.LIABILITY">
            <summary>
            Enum LIABILITY for value: LIABILITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.NONCURRENT">
            <summary>
            Enum NONCURRENT for value: NONCURRENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.OTHERINCOME">
            <summary>
            Enum OTHERINCOME for value: OTHERINCOME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.OVERHEADS">
            <summary>
            Enum OVERHEADS for value: OVERHEADS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.PREPAYMENT">
            <summary>
            Enum PREPAYMENT for value: PREPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.REVENUE">
            <summary>
            Enum REVENUE for value: REVENUE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.SALES">
            <summary>
            Enum SALES for value: SALES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.TERMLIAB">
            <summary>
            Enum TERMLIAB for value: TERMLIAB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.PAYGLIABILITY">
            <summary>
            Enum PAYGLIABILITY for value: PAYGLIABILITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.PAYG">
            <summary>
            Enum PAYG for value: PAYG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.SUPERANNUATIONEXPENSE">
            <summary>
            Enum SUPERANNUATIONEXPENSE for value: SUPERANNUATIONEXPENSE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.SUPERANNUATIONLIABILITY">
            <summary>
            Enum SUPERANNUATIONLIABILITY for value: SUPERANNUATIONLIABILITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.WAGESEXPENSE">
            <summary>
            Enum WAGESEXPENSE for value: WAGESEXPENSE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AccountType.WAGESPAYABLELIABILITY">
            <summary>
            Enum WAGESPAYABLELIABILITY for value: WAGESPAYABLELIABILITY
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceCategory">
            <summary>
            Defines AllowanceCategory
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceCategory.NONDEDUCTIBLE">
            <summary>
            Enum NONDEDUCTIBLE for value: NONDEDUCTIBLE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceCategory.UNIFORM">
            <summary>
            Enum UNIFORM for value: UNIFORM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceCategory.PRIVATEVEHICLE">
            <summary>
            Enum PRIVATEVEHICLE for value: PRIVATEVEHICLE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceCategory.HOMEOFFICE">
            <summary>
            Enum HOMEOFFICE for value: HOMEOFFICE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceCategory.TRANSPORT">
            <summary>
            Enum TRANSPORT for value: TRANSPORT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceCategory.GENERAL">
            <summary>
            Enum GENERAL for value: GENERAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceCategory.OTHER">
            <summary>
            Enum OTHER for value: OTHER
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceType">
            <summary>
            Defines AllowanceType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceType.CAR">
            <summary>
            Enum CAR for value: CAR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceType.TRANSPORT">
            <summary>
            Enum TRANSPORT for value: TRANSPORT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceType.LAUNDRY">
            <summary>
            Enum LAUNDRY for value: LAUNDRY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceType.MEALS">
            <summary>
            Enum MEALS for value: MEALS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceType.TRAVEL">
            <summary>
            Enum TRAVEL for value: TRAVEL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceType.OTHER">
            <summary>
            Enum OTHER for value: OTHER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceType.JOBKEEPER">
            <summary>
            Enum JOBKEEPER for value: JOBKEEPER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceType.TOOLS">
            <summary>
            Enum TOOLS for value: TOOLS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceType.TASKS">
            <summary>
            Enum TASKS for value: TASKS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.AllowanceType.QUALIFICATIONS">
            <summary>
            Enum QUALIFICATIONS for value: QUALIFICATIONS
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.APIException">
            <summary>
            The object returned for a bad request
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.APIException.ErrorNumber">
            <summary>
            The error number
            </summary>
            <value>The error number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.APIException.Type">
            <summary>
            The type of error
            </summary>
            <value>The type of error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.APIException.Message">
            <summary>
            The message describing the error
            </summary>
            <value>The message describing the error</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.APIException.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.APIException.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.APIException.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.APIException.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.APIException)">
            <summary>
            Returns true if APIException instances are equal
            </summary>
            <param name="input">Instance of APIException to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.APIException.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.APIException.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount">
            <summary>
            BankAccount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount.StatementText">
            <summary>
            The text that will appear on your employee&#39;s bank statement when they receive payment
            </summary>
            <value>The text that will appear on your employee&#39;s bank statement when they receive payment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount.AccountName">
            <summary>
            The name of the account
            </summary>
            <value>The name of the account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount.BSB">
            <summary>
            The BSB number of the account
            </summary>
            <value>The BSB number of the account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount.AccountNumber">
            <summary>
            The account number
            </summary>
            <value>The account number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount.Remainder">
            <summary>
            If this account is the Remaining bank account
            </summary>
            <value>If this account is the Remaining bank account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount.Amount">
            <summary>
            Fixed amounts (for example, if an employee wants to have $100 of their salary transferred to one account, and the remaining amount to another)
            </summary>
            <value>Fixed amounts (for example, if an employee wants to have $100 of their salary transferred to one account, and the remaining amount to another)</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount)">
            <summary>
            Returns true if BankAccount instances are equal
            </summary>
            <param name="input">Instance of BankAccount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.BankAccount.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.CalendarType">
            <summary>
            Defines CalendarType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.CalendarType.WEEKLY">
            <summary>
            Enum WEEKLY for value: WEEKLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.CalendarType.FORTNIGHTLY">
            <summary>
            Enum FORTNIGHTLY for value: FORTNIGHTLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.CalendarType.FOURWEEKLY">
            <summary>
            Enum FOURWEEKLY for value: FOURWEEKLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.CalendarType.MONTHLY">
            <summary>
            Enum MONTHLY for value: MONTHLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.CalendarType.TWICEMONTHLY">
            <summary>
            Enum TWICEMONTHLY for value: TWICEMONTHLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.CalendarType.QUARTERLY">
            <summary>
            Enum QUARTERLY for value: QUARTERLY
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine">
            <summary>
            DeductionLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine.CalculationType">
            <summary>
            Gets or Sets CalculationType
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine.DeductionTypeID">
            <summary>
            Xero deduction type identifier
            </summary>
            <value>Xero deduction type identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine.Amount">
            <summary>
            Deduction type amount
            </summary>
            <value>Deduction type amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine.Percentage">
            <summary>
            The Percentage of the Deduction
            </summary>
            <value>The Percentage of the Deduction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine.NumberOfUnits">
            <summary>
            Deduction number of units
            </summary>
            <value>Deduction number of units</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine)">
            <summary>
            Returns true if DeductionLine instances are equal
            </summary>
            <param name="input">Instance of DeductionLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType">
            <summary>
            DeductionType
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.DeductionCategoryEnum">
            <summary>
            Defines DeductionCategory
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.DeductionCategoryEnum.NONE">
            <summary>
            Enum NONE for value: NONE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.DeductionCategoryEnum.UNIONFEES">
            <summary>
            Enum UNIONFEES for value: UNIONFEES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.DeductionCategoryEnum.WORKPLACEGIVING">
            <summary>
            Enum WORKPLACEGIVING for value: WORKPLACEGIVING
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.DeductionCategory">
            <summary>
            Gets or Sets DeductionCategory
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.Name">
            <summary>
            Name of the earnings rate (max length &#x3D; 100)
            </summary>
            <value>Name of the earnings rate (max length &#x3D; 100)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.AccountCode">
            <summary>
            See Accounts
            </summary>
            <value>See Accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.ReducesTax">
            <summary>
            Indicates that this is a pre-tax deduction that will reduce the amount of tax you withhold from an employee.
            </summary>
            <value>Indicates that this is a pre-tax deduction that will reduce the amount of tax you withhold from an employee.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.ReducesSuper">
            <summary>
            Most deductions don’t reduce your superannuation guarantee contribution liability, so typically you will not set any value for this.
            </summary>
            <value>Most deductions don’t reduce your superannuation guarantee contribution liability, so typically you will not set any value for this.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.IsExemptFromW1">
            <summary>
            Boolean to determine if the deduction type is reportable or exempt from W1
            </summary>
            <value>Boolean to determine if the deduction type is reportable or exempt from W1</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.DeductionTypeID">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.CurrentRecord">
            <summary>
            Is the current record
            </summary>
            <value>Is the current record</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType)">
            <summary>
            Returns true if DeductionType instances are equal
            </summary>
            <param name="input">Instance of DeductionType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionTypeCalculationType">
            <summary>
            Defines DeductionTypeCalculationType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionTypeCalculationType.FIXEDAMOUNT">
            <summary>
            Enum FIXEDAMOUNT for value: FIXEDAMOUNT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionTypeCalculationType.PRETAX">
            <summary>
            Enum PRETAX for value: PRETAX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.DeductionTypeCalculationType.POSTTAX">
            <summary>
            Enum POSTTAX for value: POSTTAX
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine">
            <summary>
            EarningsLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.CalculationType">
            <summary>
            Gets or Sets CalculationType
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.EarningsRateID">
            <summary>
            Xero unique id for earnings rate
            </summary>
            <value>Xero unique id for earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.AnnualSalary">
            <summary>
            Annual salary for earnings line
            </summary>
            <value>Annual salary for earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.NumberOfUnitsPerWeek">
            <summary>
            number of units for earning line
            </summary>
            <value>number of units for earning line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.RatePerUnit">
            <summary>
            Rate per unit of the EarningsLine.
            </summary>
            <value>Rate per unit of the EarningsLine.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.NormalNumberOfUnits">
            <summary>
            Normal number of units for EarningsLine. Applicable when RateType is \&quot;MULTIPLE\&quot;
            </summary>
            <value>Normal number of units for EarningsLine. Applicable when RateType is \&quot;MULTIPLE\&quot;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.Amount">
            <summary>
            Earnings rate amount
            </summary>
            <value>Earnings rate amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.NumberOfUnits">
            <summary>
            Earnings rate number of units.
            </summary>
            <value>Earnings rate number of units.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.FixedAmount">
            <summary>
            Earnings rate amount. Only applicable if the EarningsRate RateType is Fixed
            </summary>
            <value>Earnings rate amount. Only applicable if the EarningsRate RateType is Fixed</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine)">
            <summary>
            Returns true if EarningsLine instances are equal
            </summary>
            <param name="input">Instance of EarningsLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate">
            <summary>
            EarningsRate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.EarningsType">
            <summary>
            Gets or Sets EarningsType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.RateType">
            <summary>
            Gets or Sets RateType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.EmploymentTerminationPaymentType">
            <summary>
            Gets or Sets EmploymentTerminationPaymentType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.AllowanceType">
            <summary>
            Gets or Sets AllowanceType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.AllowanceCategory">
            <summary>
            Gets or Sets AllowanceCategory
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.Name">
            <summary>
            Name of the earnings rate (max length &#x3D; 100)
            </summary>
            <value>Name of the earnings rate (max length &#x3D; 100)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.AccountCode">
            <summary>
            See Accounts
            </summary>
            <value>See Accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.TypeOfUnits">
            <summary>
            Type of units used to record earnings (max length &#x3D; 50). Only When RateType is RATEPERUNIT
            </summary>
            <value>Type of units used to record earnings (max length &#x3D; 50). Only When RateType is RATEPERUNIT</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.IsExemptFromTax">
            <summary>
            Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding
            </summary>
            <value>Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.IsExemptFromSuper">
            <summary>
            See the ATO website for details of which payments are exempt from SGC
            </summary>
            <value>See the ATO website for details of which payments are exempt from SGC</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.IsReportableAsW1">
            <summary>
            Boolean to determine if the earnings rate is reportable or exempt from W1
            </summary>
            <value>Boolean to determine if the earnings rate is reportable or exempt from W1</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.EarningsRateID">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.RatePerUnit">
            <summary>
            Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT.
            </summary>
            <value>Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.Multiplier">
            <summary>
            This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE
            </summary>
            <value>This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.AccrueLeave">
            <summary>
            Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE
            </summary>
            <value>Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.Amount">
            <summary>
            Optional Amount for FIXEDAMOUNT RateType EarningsRate
            </summary>
            <value>Optional Amount for FIXEDAMOUNT RateType EarningsRate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.CurrentRecord">
            <summary>
            Is the current record
            </summary>
            <value>Is the current record</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate)">
            <summary>
            Returns true if EarningsRate instances are equal
            </summary>
            <param name="input">Instance of EarningsRate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRateCalculationType">
            <summary>
            Defines EarningsRateCalculationType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRateCalculationType.USEEARNINGSRATE">
            <summary>
            Enum USEEARNINGSRATE for value: USEEARNINGSRATE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRateCalculationType.ENTEREARNINGSRATE">
            <summary>
            Enum ENTEREARNINGSRATE for value: ENTEREARNINGSRATE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsRateCalculationType.ANNUALSALARY">
            <summary>
            Enum ANNUALSALARY for value: ANNUALSALARY
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType">
            <summary>
            Defines EarningsType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.FIXED">
            <summary>
            Enum FIXED for value: FIXED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.ORDINARYTIMEEARNINGS">
            <summary>
            Enum ORDINARYTIMEEARNINGS for value: ORDINARYTIMEEARNINGS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.OVERTIMEEARNINGS">
            <summary>
            Enum OVERTIMEEARNINGS for value: OVERTIMEEARNINGS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.ALLOWANCE">
            <summary>
            Enum ALLOWANCE for value: ALLOWANCE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.LUMPSUMD">
            <summary>
            Enum LUMPSUMD for value: LUMPSUMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.EMPLOYMENTTERMINATIONPAYMENT">
            <summary>
            Enum EMPLOYMENTTERMINATIONPAYMENT for value: EMPLOYMENTTERMINATIONPAYMENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.LUMPSUMA">
            <summary>
            Enum LUMPSUMA for value: LUMPSUMA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.LUMPSUMB">
            <summary>
            Enum LUMPSUMB for value: LUMPSUMB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.BONUSESANDCOMMISSIONS">
            <summary>
            Enum BONUSESANDCOMMISSIONS for value: BONUSESANDCOMMISSIONS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.LUMPSUME">
            <summary>
            Enum LUMPSUME for value: LUMPSUME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.LUMPSUMW">
            <summary>
            Enum LUMPSUMW for value: LUMPSUMW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.DIRECTORSFEES">
            <summary>
            Enum DIRECTORSFEES for value: DIRECTORSFEES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.PAIDPARENTALLEAVE">
            <summary>
            Enum PAIDPARENTALLEAVE for value: PAIDPARENTALLEAVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EarningsType.WORKERSCOMPENSATION">
            <summary>
            Enum WORKERSCOMPENSATION for value: WORKERSCOMPENSATION
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee">
            <summary>
            Employee
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.GenderEnum">
            <summary>
            The employee’s gender. See Employee Gender
            </summary>
            <value>The employee’s gender. See Employee Gender</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.GenderEnum.N">
            <summary>
            Enum N for value: N
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.GenderEnum.M">
            <summary>
            Enum M for value: M
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.GenderEnum.F">
            <summary>
            Enum F for value: F
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.GenderEnum.I">
            <summary>
            Enum I for value: I
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.Gender">
            <summary>
            The employee’s gender. See Employee Gender
            </summary>
            <value>The employee’s gender. See Employee Gender</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.TerminationReasonEnum">
            <summary>
            * &#x60;V&#x60; Voluntary cessation - An employee resignation, retirement, domestic or pressing necessity or abandonment of employment * &#x60;I&#x60; Ill health - An employee resignation due to medical condition that prevents the continuation of employment, such as for illness, ill-health, medical unfitness or total permanent disability * &#x60;D&#x60; Deceased - The death of an employee * &#x60;R&#x60; Redundancy - An employer-initiated termination of employment due to a genuine redundancy or approved early retirement scheme * &#x60;F&#x60; Dismissal - An employer-initiated termination of employment due to dismissal, inability to perform the required work, misconduct or inefficiency * &#x60;C&#x60; Contract cessation - The natural conclusion of a limited employment relationship due to contract/engagement duration or task completion, seasonal work completion, or to cease casuals that are no longer required * &#x60;T&#x60; Transfer - The administrative arrangements performed to transfer employees across payroll systems, move them temporarily to another employer (machinery of government for public servants), transfer of business, move them to outsourcing arrangements or other such technical activities. 
            </summary>
            <value>* &#x60;V&#x60; Voluntary cessation - An employee resignation, retirement, domestic or pressing necessity or abandonment of employment * &#x60;I&#x60; Ill health - An employee resignation due to medical condition that prevents the continuation of employment, such as for illness, ill-health, medical unfitness or total permanent disability * &#x60;D&#x60; Deceased - The death of an employee * &#x60;R&#x60; Redundancy - An employer-initiated termination of employment due to a genuine redundancy or approved early retirement scheme * &#x60;F&#x60; Dismissal - An employer-initiated termination of employment due to dismissal, inability to perform the required work, misconduct or inefficiency * &#x60;C&#x60; Contract cessation - The natural conclusion of a limited employment relationship due to contract/engagement duration or task completion, seasonal work completion, or to cease casuals that are no longer required * &#x60;T&#x60; Transfer - The administrative arrangements performed to transfer employees across payroll systems, move them temporarily to another employer (machinery of government for public servants), transfer of business, move them to outsourcing arrangements or other such technical activities. </value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.TerminationReasonEnum.V">
            <summary>
            Enum V for value: V
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.TerminationReasonEnum.I">
            <summary>
            Enum I for value: I
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.TerminationReasonEnum.D">
            <summary>
            Enum D for value: D
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.TerminationReasonEnum.R">
            <summary>
            Enum R for value: R
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.TerminationReasonEnum.F">
            <summary>
            Enum F for value: F
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.TerminationReasonEnum.C">
            <summary>
            Enum C for value: C
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.TerminationReasonEnum.T">
            <summary>
            Enum T for value: T
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.TerminationReason">
            <summary>
            * &#x60;V&#x60; Voluntary cessation - An employee resignation, retirement, domestic or pressing necessity or abandonment of employment * &#x60;I&#x60; Ill health - An employee resignation due to medical condition that prevents the continuation of employment, such as for illness, ill-health, medical unfitness or total permanent disability * &#x60;D&#x60; Deceased - The death of an employee * &#x60;R&#x60; Redundancy - An employer-initiated termination of employment due to a genuine redundancy or approved early retirement scheme * &#x60;F&#x60; Dismissal - An employer-initiated termination of employment due to dismissal, inability to perform the required work, misconduct or inefficiency * &#x60;C&#x60; Contract cessation - The natural conclusion of a limited employment relationship due to contract/engagement duration or task completion, seasonal work completion, or to cease casuals that are no longer required * &#x60;T&#x60; Transfer - The administrative arrangements performed to transfer employees across payroll systems, move them temporarily to another employer (machinery of government for public servants), transfer of business, move them to outsourcing arrangements or other such technical activities. 
            </summary>
            <value>* &#x60;V&#x60; Voluntary cessation - An employee resignation, retirement, domestic or pressing necessity or abandonment of employment * &#x60;I&#x60; Ill health - An employee resignation due to medical condition that prevents the continuation of employment, such as for illness, ill-health, medical unfitness or total permanent disability * &#x60;D&#x60; Deceased - The death of an employee * &#x60;R&#x60; Redundancy - An employer-initiated termination of employment due to a genuine redundancy or approved early retirement scheme * &#x60;F&#x60; Dismissal - An employer-initiated termination of employment due to dismissal, inability to perform the required work, misconduct or inefficiency * &#x60;C&#x60; Contract cessation - The natural conclusion of a limited employment relationship due to contract/engagement duration or task completion, seasonal work completion, or to cease casuals that are no longer required * &#x60;T&#x60; Transfer - The administrative arrangements performed to transfer employees across payroll systems, move them temporarily to another employer (machinery of government for public servants), transfer of business, move them to outsourcing arrangements or other such technical activities. </value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.FirstName">
            <summary>
            First name of employee
            </summary>
            <value>First name of employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.LastName">
            <summary>
            Last name of employee
            </summary>
            <value>Last name of employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.DateOfBirth">
            <summary>
            Date of birth of the employee (YYYY-MM-DD)
            </summary>
            <value>Date of birth of the employee (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.HomeAddress">
            <summary>
            Gets or Sets HomeAddress
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.StartDate">
            <summary>
            Start date for an employee (YYYY-MM-DD)
            </summary>
            <value>Start date for an employee (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.Title">
            <summary>
            Title of the employee
            </summary>
            <value>Title of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.MiddleNames">
            <summary>
            Middle name(s) of the employee
            </summary>
            <value>Middle name(s) of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.Email">
            <summary>
            The email address for the employee
            </summary>
            <value>The email address for the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.Phone">
            <summary>
            Employee phone number
            </summary>
            <value>Employee phone number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.Mobile">
            <summary>
            Employee mobile number
            </summary>
            <value>Employee mobile number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.TwitterUserName">
            <summary>
            Employee’s twitter name
            </summary>
            <value>Employee’s twitter name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.IsAuthorisedToApproveLeave">
            <summary>
            Authorised to approve other employees&#39; leave requests
            </summary>
            <value>Authorised to approve other employees&#39; leave requests</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.IsAuthorisedToApproveTimesheets">
            <summary>
            Authorised to approve timesheets
            </summary>
            <value>Authorised to approve timesheets</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.JobTitle">
            <summary>
            JobTitle of the employee
            </summary>
            <value>JobTitle of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.Classification">
            <summary>
            Employees classification
            </summary>
            <value>Employees classification</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.OrdinaryEarningsRateID">
            <summary>
            Xero unique identifier for earnings rate
            </summary>
            <value>Xero unique identifier for earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.PayrollCalendarID">
            <summary>
            Xero unique identifier for payroll calendar for the employee
            </summary>
            <value>Xero unique identifier for payroll calendar for the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.EmployeeGroupName">
            <summary>
            The Employee Group allows you to report on payroll expenses and liabilities for each group of employees
            </summary>
            <value>The Employee Group allows you to report on payroll expenses and liabilities for each group of employees</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.EmployeeID">
            <summary>
            Xero unique identifier for an Employee
            </summary>
            <value>Xero unique identifier for an Employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.TerminationDate">
            <summary>
            Employee Termination Date (YYYY-MM-DD)
            </summary>
            <value>Employee Termination Date (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.BankAccounts">
            <summary>
            Gets or Sets BankAccounts
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.PayTemplate">
            <summary>
            Gets or Sets PayTemplate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.OpeningBalances">
            <summary>
            Gets or Sets OpeningBalances
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.TaxDeclaration">
            <summary>
            Gets or Sets TaxDeclaration
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.LeaveBalances">
            <summary>
            Gets or Sets LeaveBalances
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.LeaveLines">
            <summary>
            Gets or Sets LeaveLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.SuperMemberships">
            <summary>
            Gets or Sets SuperMemberships
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.Employee)">
            <summary>
            Returns true if Employee instances are equal
            </summary>
            <param name="input">Instance of Employee to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employee.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.Employees">
            <summary>
            Employees
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Employees._Employees">
            <summary>
            Gets or Sets _Employees
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employees.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employees.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employees.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employees.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.Employees)">
            <summary>
            Returns true if Employees instances are equal
            </summary>
            <param name="input">Instance of Employees to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employees.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Employees.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.EmployeeStatus">
            <summary>
            Employee Status Types
            </summary>
            <value>Employee Status Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EmployeeStatus.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EmployeeStatus.TERMINATED">
            <summary>
            Enum TERMINATED for value: TERMINATED
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.EmploymentBasis">
            <summary>
            Defines EmploymentBasis
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EmploymentBasis.FULLTIME">
            <summary>
            Enum FULLTIME for value: FULLTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EmploymentBasis.PARTTIME">
            <summary>
            Enum PARTTIME for value: PARTTIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EmploymentBasis.CASUAL">
            <summary>
            Enum CASUAL for value: CASUAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EmploymentBasis.LABOURHIRE">
            <summary>
            Enum LABOURHIRE for value: LABOURHIRE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EmploymentBasis.SUPERINCOMESTREAM">
            <summary>
            Enum SUPERINCOMESTREAM for value: SUPERINCOMESTREAM
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.EmploymentTerminationPaymentType">
            <summary>
            Defines EmploymentTerminationPaymentType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EmploymentTerminationPaymentType.O">
            <summary>
            Enum O for value: O
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EmploymentTerminationPaymentType.R">
            <summary>
            Enum R for value: R
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.EntitlementFinalPayPayoutType">
            <summary>
            Defines EntitlementFinalPayPayoutType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EntitlementFinalPayPayoutType.NOTPAIDOUT">
            <summary>
            Enum NOTPAIDOUT for value: NOTPAIDOUT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.EntitlementFinalPayPayoutType.PAIDOUT">
            <summary>
            Enum PAIDOUT for value: PAIDOUT
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress">
            <summary>
            HomeAddress
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.Region">
            <summary>
            Gets or Sets Region
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.AddressLine1">
            <summary>
            Address line 1 for employee home address
            </summary>
            <value>Address line 1 for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.AddressLine2">
            <summary>
            Address line 2 for employee home address
            </summary>
            <value>Address line 2 for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.City">
            <summary>
            Suburb for employee home address
            </summary>
            <value>Suburb for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.PostalCode">
            <summary>
            PostCode for employee home address
            </summary>
            <value>PostCode for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.Country">
            <summary>
            Country of HomeAddress
            </summary>
            <value>Country of HomeAddress</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress)">
            <summary>
            Returns true if HomeAddress instances are equal
            </summary>
            <param name="input">Instance of HomeAddress to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.HomeAddress.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveAccrualLine">
            <summary>
            LeaveAccrualLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveAccrualLine.LeaveTypeID">
            <summary>
            Xero identifier for the Leave type.
            </summary>
            <value>Xero identifier for the Leave type.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveAccrualLine.NumberOfUnits">
            <summary>
            Leave Accrual number of units
            </summary>
            <value>Leave Accrual number of units</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveAccrualLine.AutoCalculate">
            <summary>
            If you want to auto calculate leave.
            </summary>
            <value>If you want to auto calculate leave.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveAccrualLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveAccrualLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveAccrualLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveAccrualLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveAccrualLine)">
            <summary>
            Returns true if LeaveAccrualLine instances are equal
            </summary>
            <param name="input">Instance of LeaveAccrualLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveAccrualLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveAccrualLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication">
            <summary>
            LeaveApplication
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.LeaveApplicationID">
            <summary>
            The Xero identifier for Payroll Employee
            </summary>
            <value>The Xero identifier for Payroll Employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.EmployeeID">
            <summary>
            The Xero identifier for Payroll Employee
            </summary>
            <value>The Xero identifier for Payroll Employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.LeaveTypeID">
            <summary>
            The Xero identifier for Leave Type
            </summary>
            <value>The Xero identifier for Leave Type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.Title">
            <summary>
            The title of the leave
            </summary>
            <value>The title of the leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.StartDate">
            <summary>
            Start date of the leave (YYYY-MM-DD)
            </summary>
            <value>Start date of the leave (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.EndDate">
            <summary>
            End date of the leave (YYYY-MM-DD)
            </summary>
            <value>End date of the leave (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.Description">
            <summary>
            The Description of the Leave
            </summary>
            <value>The Description of the Leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.LeavePeriods">
            <summary>
            Gets or Sets LeavePeriods
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication)">
            <summary>
            Returns true if LeaveApplication instances are equal
            </summary>
            <param name="input">Instance of LeaveApplication to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplication.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplications">
            <summary>
            LeaveApplications
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplications._LeaveApplications">
            <summary>
            Gets or Sets _LeaveApplications
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplications.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplications.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplications.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplications.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplications)">
            <summary>
            Returns true if LeaveApplications instances are equal
            </summary>
            <param name="input">Instance of LeaveApplications to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplications.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveApplications.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveBalance">
            <summary>
            LeaveBalance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveBalance.LeaveName">
            <summary>
            The name of the leave type
            </summary>
            <value>The name of the leave type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveBalance.LeaveTypeID">
            <summary>
            Identifier of the leave type (see PayItems)
            </summary>
            <value>Identifier of the leave type (see PayItems)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveBalance.NumberOfUnits">
            <summary>
            The balance of the leave available
            </summary>
            <value>The balance of the leave available</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveBalance.TypeOfUnits">
            <summary>
            The type of units as specified by the LeaveType (see PayItems)
            </summary>
            <value>The type of units as specified by the LeaveType (see PayItems)</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveBalance.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveBalance.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveBalance.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveBalance.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveBalance)">
            <summary>
            Returns true if LeaveBalance instances are equal
            </summary>
            <param name="input">Instance of LeaveBalance to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveBalance.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveBalance.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode">
            <summary>
            Code used to identify the Leave Category
            </summary>
            <value>Code used to identify the Leave Category</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode.ANNUALLEAVE">
            <summary>
            Enum ANNUALLEAVE for value: ANNUALLEAVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode.LONGSERVICELEAVE">
            <summary>
            Enum LONGSERVICELEAVE for value: LONGSERVICELEAVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode.PERSONALCARERSLEAVE">
            <summary>
            Enum PERSONALCARERSLEAVE for value: PERSONALCARERSLEAVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode.ROSTEREDDAYOFF">
            <summary>
            Enum ROSTEREDDAYOFF for value: ROSTEREDDAYOFF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode.TIMEOFFINLIEU">
            <summary>
            Enum TIMEOFFINLIEU for value: TIMEOFFINLIEU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode.COMPASSIONATEANDBEREAVEMENTLEAVE">
            <summary>
            Enum COMPASSIONATEANDBEREAVEMENTLEAVE for value: COMPASSIONATEANDBEREAVEMENTLEAVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode.STUDYLEAVE">
            <summary>
            Enum STUDYLEAVE for value: STUDYLEAVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode.FAMILYANDDOMESTICVIOLENCELEAVE">
            <summary>
            Enum FAMILYANDDOMESTICVIOLENCELEAVE for value: FAMILYANDDOMESTICVIOLENCELEAVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode.SPECIALPAIDLEAVE">
            <summary>
            Enum SPECIALPAIDLEAVE for value: SPECIALPAIDLEAVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode.COMMUNITYSERVICELEAVE">
            <summary>
            Enum COMMUNITYSERVICELEAVE for value: COMMUNITYSERVICELEAVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode.JURYDUTYLEAVE">
            <summary>
            Enum JURYDUTYLEAVE for value: JURYDUTYLEAVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveCategoryCode.DEFENCERESERVELEAVE">
            <summary>
            Enum DEFENCERESERVELEAVE for value: DEFENCERESERVELEAVE
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveEarningsLine">
            <summary>
            LeaveEarningsLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveEarningsLine.EarningsRateID">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveEarningsLine.RatePerUnit">
            <summary>
            Rate per unit of the EarningsLine.
            </summary>
            <value>Rate per unit of the EarningsLine.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveEarningsLine.NumberOfUnits">
            <summary>
            Earnings rate number of units.
            </summary>
            <value>Earnings rate number of units.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveEarningsLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveEarningsLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveEarningsLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveEarningsLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveEarningsLine)">
            <summary>
            Returns true if LeaveEarningsLine instances are equal
            </summary>
            <param name="input">Instance of LeaveEarningsLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveEarningsLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveEarningsLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine">
            <summary>
            LeaveLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.CalculationType">
            <summary>
            Gets or Sets CalculationType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.EntitlementFinalPayPayoutType">
            <summary>
            Gets or Sets EntitlementFinalPayPayoutType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.EmploymentTerminationPaymentType">
            <summary>
            Gets or Sets EmploymentTerminationPaymentType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.LeaveTypeID">
            <summary>
            Xero leave type identifier
            </summary>
            <value>Xero leave type identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.IncludeSuperannuationGuaranteeContribution">
            <summary>
            amount of leave line
            </summary>
            <value>amount of leave line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.NumberOfUnits">
            <summary>
            Number of units for leave line.
            </summary>
            <value>Number of units for leave line.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.AnnualNumberOfUnits">
            <summary>
            Hours of leave accrued each year
            </summary>
            <value>Hours of leave accrued each year</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.FullTimeNumberOfUnitsPerPeriod">
            <summary>
            Normal ordinary earnings number of units for leave line.
            </summary>
            <value>Normal ordinary earnings number of units for leave line.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine)">
            <summary>
            Returns true if LeaveLine instances are equal
            </summary>
            <param name="input">Instance of LeaveLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLineCalculationType">
            <summary>
            Calculation type for leave line for Opening Balance on Employee
            </summary>
            <value>Calculation type for leave line for Opening Balance on Employee</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLineCalculationType.NOCALCULATIONREQUIRED">
            <summary>
            Enum NOCALCULATIONREQUIRED for value: NOCALCULATIONREQUIRED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLineCalculationType.FIXEDAMOUNTEACHPERIOD">
            <summary>
            Enum FIXEDAMOUNTEACHPERIOD for value: FIXEDAMOUNTEACHPERIOD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLineCalculationType.ENTERRATEINPAYTEMPLATE">
            <summary>
            Enum ENTERRATEINPAYTEMPLATE for value: ENTERRATEINPAYTEMPLATE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLineCalculationType.BASEDONORDINARYEARNINGS">
            <summary>
            Enum BASEDONORDINARYEARNINGS for value: BASEDONORDINARYEARNINGS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLineCalculationType.Empty">
            <summary>
            Enum Empty for value: 
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLines">
            <summary>
            The leave type lines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLines.Employee">
            <summary>
            Gets or Sets Employee
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLines.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLines.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLines.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLines.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLines)">
            <summary>
            Returns true if LeaveLines instances are equal
            </summary>
            <param name="input">Instance of LeaveLines to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLines.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveLines.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriod">
            <summary>
            LeavePeriod
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriod.LeavePeriodStatus">
            <summary>
            Gets or Sets LeavePeriodStatus
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriod.NumberOfUnits">
            <summary>
            The Number of Units for the leave
            </summary>
            <value>The Number of Units for the leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriod.PayPeriodEndDate">
            <summary>
            The Pay Period End Date (YYYY-MM-DD)
            </summary>
            <value>The Pay Period End Date (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriod.PayPeriodStartDate">
            <summary>
            The Pay Period Start Date (YYYY-MM-DD)
            </summary>
            <value>The Pay Period Start Date (YYYY-MM-DD)</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriod.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriod.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriod.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriod.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriod)">
            <summary>
            Returns true if LeavePeriod instances are equal
            </summary>
            <param name="input">Instance of LeavePeriod to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriod.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriod.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriodStatus">
            <summary>
            Defines LeavePeriodStatus
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriodStatus.SCHEDULED">
            <summary>
            Enum SCHEDULED for value: SCHEDULED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeavePeriodStatus.PROCESSED">
            <summary>
            Enum PROCESSED for value: PROCESSED
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType">
            <summary>
            LeaveType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.LeaveCategoryCode">
            <summary>
            Gets or Sets LeaveCategoryCode
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.Name">
            <summary>
            Name of the earnings rate (max length &#x3D; 100)
            </summary>
            <value>Name of the earnings rate (max length &#x3D; 100)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.TypeOfUnits">
            <summary>
            The type of units by which leave entitlements are normally tracked. These are typically the same as the type of units used for the employee’s ordinary earnings rate
            </summary>
            <value>The type of units by which leave entitlements are normally tracked. These are typically the same as the type of units used for the employee’s ordinary earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.LeaveTypeID">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.NormalEntitlement">
            <summary>
            The number of units the employee is entitled to each year
            </summary>
            <value>The number of units the employee is entitled to each year</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.LeaveLoadingRate">
            <summary>
            Enter an amount here if your organisation pays an additional percentage on top of ordinary earnings when your employees take leave (typically 17.5%)
            </summary>
            <value>Enter an amount here if your organisation pays an additional percentage on top of ordinary earnings when your employees take leave (typically 17.5%)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.IsPaidLeave">
            <summary>
            Set this to indicate that an employee will be paid when taking this type of leave
            </summary>
            <value>Set this to indicate that an employee will be paid when taking this type of leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.ShowOnPayslip">
            <summary>
            Set this if you want a balance for this leave type to be shown on your employee’s payslips
            </summary>
            <value>Set this if you want a balance for this leave type to be shown on your employee’s payslips</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.CurrentRecord">
            <summary>
            Is the current record
            </summary>
            <value>Is the current record</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.SGCExempt">
            <summary>
            Set this to indicate that the leave type is exempt from superannuation guarantee contribution
            </summary>
            <value>Set this to indicate that the leave type is exempt from superannuation guarantee contribution</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType)">
            <summary>
            Returns true if LeaveType instances are equal
            </summary>
            <param name="input">Instance of LeaveType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveTypeContributionType">
            <summary>
            Defines LeaveTypeContributionType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveTypeContributionType.SGC">
            <summary>
            Enum SGC for value: SGC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveTypeContributionType.SALARYSACRIFICE">
            <summary>
            Enum SALARYSACRIFICE for value: SALARYSACRIFICE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveTypeContributionType.EMPLOYERADDITIONAL">
            <summary>
            Enum EMPLOYERADDITIONAL for value: EMPLOYERADDITIONAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.LeaveTypeContributionType.EMPLOYEE">
            <summary>
            Enum EMPLOYEE for value: EMPLOYEE
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.ManualTaxType">
            <summary>
            Defines ManualTaxType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.ManualTaxType.PAYGMANUAL">
            <summary>
            Enum PAYGMANUAL for value: PAYGMANUAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.ManualTaxType.ETPOMANUAL">
            <summary>
            Enum ETPOMANUAL for value: ETPOMANUAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.ManualTaxType.ETPRMANUAL">
            <summary>
            Enum ETPRMANUAL for value: ETPRMANUAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.ManualTaxType.SCHEDULE5MANUAL">
            <summary>
            Enum SCHEDULE5MANUAL for value: SCHEDULE5MANUAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.ManualTaxType.SCHEDULE5STSLMANUAL">
            <summary>
            Enum SCHEDULE5STSLMANUAL for value: SCHEDULE5STSLMANUAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.ManualTaxType.SCHEDULE4MANUAL">
            <summary>
            Enum SCHEDULE4MANUAL for value: SCHEDULE4MANUAL
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances">
            <summary>
            OpeningBalances
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.OpeningBalanceDate">
            <summary>
            Opening Balance Date. (YYYY-MM-DD)
            </summary>
            <value>Opening Balance Date. (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.Tax">
            <summary>
            Opening Balance tax
            </summary>
            <value>Opening Balance tax</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.EarningsLines">
            <summary>
            Gets or Sets EarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.DeductionLines">
            <summary>
            Gets or Sets DeductionLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.SuperLines">
            <summary>
            Gets or Sets SuperLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.ReimbursementLines">
            <summary>
            Gets or Sets ReimbursementLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.LeaveLines">
            <summary>
            Gets or Sets LeaveLines
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances)">
            <summary>
            Returns true if OpeningBalances instances are equal
            </summary>
            <param name="input">Instance of OpeningBalances to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.OpeningBalances.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItem">
            <summary>
            PayItem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItem.EarningsRates">
            <summary>
            Gets or Sets EarningsRates
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItem.DeductionTypes">
            <summary>
            Gets or Sets DeductionTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItem.LeaveTypes">
            <summary>
            Gets or Sets LeaveTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItem.ReimbursementTypes">
            <summary>
            Gets or Sets ReimbursementTypes
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItem.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.PayItem)">
            <summary>
            Returns true if PayItem instances are equal
            </summary>
            <param name="input">Instance of PayItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItem.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItems">
            <summary>
            PayItems
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItems._PayItems">
            <summary>
            Gets or Sets _PayItems
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItems.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItems.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItems.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItems.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.PayItems)">
            <summary>
            Returns true if PayItems instances are equal
            </summary>
            <param name="input">Instance of PayItems to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItems.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayItems.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PaymentFrequencyType">
            <summary>
            Defines PaymentFrequencyType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.PaymentFrequencyType.WEEKLY">
            <summary>
            Enum WEEKLY for value: WEEKLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.PaymentFrequencyType.MONTHLY">
            <summary>
            Enum MONTHLY for value: MONTHLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.PaymentFrequencyType.FORTNIGHTLY">
            <summary>
            Enum FORTNIGHTLY for value: FORTNIGHTLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.PaymentFrequencyType.QUARTERLY">
            <summary>
            Enum QUARTERLY for value: QUARTERLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.PaymentFrequencyType.TWICEMONTHLY">
            <summary>
            Enum TWICEMONTHLY for value: TWICEMONTHLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.PaymentFrequencyType.FOURWEEKLY">
            <summary>
            Enum FOURWEEKLY for value: FOURWEEKLY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.PaymentFrequencyType.YEARLY">
            <summary>
            Enum YEARLY for value: YEARLY
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar">
            <summary>
            PayrollCalendar
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.CalendarType">
            <summary>
            Gets or Sets CalendarType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.Name">
            <summary>
            Name of the Payroll Calendar
            </summary>
            <value>Name of the Payroll Calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.StartDate">
            <summary>
            The start date of the upcoming pay period. The end date will be calculated based upon this date, and the calendar type selected (YYYY-MM-DD)
            </summary>
            <value>The start date of the upcoming pay period. The end date will be calculated based upon this date, and the calendar type selected (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.PaymentDate">
            <summary>
            The date on which employees will be paid for the upcoming pay period (YYYY-MM-DD)
            </summary>
            <value>The date on which employees will be paid for the upcoming pay period (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.PayrollCalendarID">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.ReferenceDate">
            <summary>
            Reference Date (YYYY-MM-DD)
            </summary>
            <value>Reference Date (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar)">
            <summary>
            Returns true if PayrollCalendar instances are equal
            </summary>
            <param name="input">Instance of PayrollCalendar to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendar.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendars">
            <summary>
            PayrollCalendars
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendars._PayrollCalendars">
            <summary>
            Gets or Sets _PayrollCalendars
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendars.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendars.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendars.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendars.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendars)">
            <summary>
            Returns true if PayrollCalendars instances are equal
            </summary>
            <param name="input">Instance of PayrollCalendars to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendars.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayrollCalendars.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun">
            <summary>
            PayRun
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.PayRunStatus">
            <summary>
            Gets or Sets PayRunStatus
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.PayrollCalendarID">
            <summary>
            Xero identifier for pay run
            </summary>
            <value>Xero identifier for pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.PayRunID">
            <summary>
            Xero identifier for pay run
            </summary>
            <value>Xero identifier for pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.PayRunPeriodStartDate">
            <summary>
            Period Start Date for the PayRun (YYYY-MM-DD)
            </summary>
            <value>Period Start Date for the PayRun (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.PayRunPeriodEndDate">
            <summary>
            Period End Date for the PayRun (YYYY-MM-DD)
            </summary>
            <value>Period End Date for the PayRun (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.PaymentDate">
            <summary>
            Payment Date for the PayRun (YYYY-MM-DD)
            </summary>
            <value>Payment Date for the PayRun (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.PayslipMessage">
            <summary>
            Payslip message for the PayRun
            </summary>
            <value>Payslip message for the PayRun</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.Payslips">
            <summary>
            The payslips in the payrun
            </summary>
            <value>The payslips in the payrun</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.Wages">
            <summary>
            The total Wages for the Payrun
            </summary>
            <value>The total Wages for the Payrun</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.Deductions">
            <summary>
            The total Deductions for the Payrun
            </summary>
            <value>The total Deductions for the Payrun</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.Tax">
            <summary>
            The total Tax for the Payrun
            </summary>
            <value>The total Tax for the Payrun</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.Super">
            <summary>
            The total Super for the Payrun
            </summary>
            <value>The total Super for the Payrun</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.Reimbursement">
            <summary>
            The total Reimbursements for the Payrun
            </summary>
            <value>The total Reimbursements for the Payrun</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.NetPay">
            <summary>
            The total NetPay for the Payrun
            </summary>
            <value>The total NetPay for the Payrun</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun)">
            <summary>
            Returns true if PayRun instances are equal
            </summary>
            <param name="input">Instance of PayRun to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRun.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRuns">
            <summary>
            PayRuns
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRuns._PayRuns">
            <summary>
            Gets or Sets _PayRuns
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRuns.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRuns.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRuns.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRuns.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.PayRuns)">
            <summary>
            Returns true if PayRuns instances are equal
            </summary>
            <param name="input">Instance of PayRuns to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRuns.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRuns.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRunStatus">
            <summary>
            Defines PayRunStatus
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRunStatus.DRAFT">
            <summary>
            Enum DRAFT for value: DRAFT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.PayRunStatus.POSTED">
            <summary>
            Enum POSTED for value: POSTED
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip">
            <summary>
            Payslip
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.EmployeeID">
            <summary>
            The Xero identifier for an employee
            </summary>
            <value>The Xero identifier for an employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.PayslipID">
            <summary>
            Xero identifier for the payslip
            </summary>
            <value>Xero identifier for the payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.FirstName">
            <summary>
            First name of employee
            </summary>
            <value>First name of employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.LastName">
            <summary>
            Last name of employee
            </summary>
            <value>Last name of employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.Wages">
            <summary>
            The Wages for the Payslip
            </summary>
            <value>The Wages for the Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.Deductions">
            <summary>
            The Deductions for the Payslip
            </summary>
            <value>The Deductions for the Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.Tax">
            <summary>
            The Tax for the Payslip
            </summary>
            <value>The Tax for the Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.Super">
            <summary>
            The Super for the Payslip
            </summary>
            <value>The Super for the Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.Reimbursements">
            <summary>
            The Reimbursements for the Payslip
            </summary>
            <value>The Reimbursements for the Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.NetPay">
            <summary>
            The NetPay for the Payslip
            </summary>
            <value>The NetPay for the Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.EarningsLines">
            <summary>
            Gets or Sets EarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.LeaveEarningsLines">
            <summary>
            Gets or Sets LeaveEarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.TimesheetEarningsLines">
            <summary>
            Gets or Sets TimesheetEarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.DeductionLines">
            <summary>
            Gets or Sets DeductionLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.LeaveAccrualLines">
            <summary>
            Gets or Sets LeaveAccrualLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.ReimbursementLines">
            <summary>
            Gets or Sets ReimbursementLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.SuperannuationLines">
            <summary>
            Gets or Sets SuperannuationLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.TaxLines">
            <summary>
            Gets or Sets TaxLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip)">
            <summary>
            Returns true if Payslip instances are equal
            </summary>
            <param name="input">Instance of Payslip to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslip.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines">
            <summary>
            PayslipLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.EarningsLines">
            <summary>
            Gets or Sets EarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.LeaveEarningsLines">
            <summary>
            Gets or Sets LeaveEarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.TimesheetEarningsLines">
            <summary>
            Gets or Sets TimesheetEarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.DeductionLines">
            <summary>
            Gets or Sets DeductionLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.LeaveAccrualLines">
            <summary>
            Gets or Sets LeaveAccrualLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.ReimbursementLines">
            <summary>
            Gets or Sets ReimbursementLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.SuperannuationLines">
            <summary>
            Gets or Sets SuperannuationLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.TaxLines">
            <summary>
            Gets or Sets TaxLines
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines)">
            <summary>
            Returns true if PayslipLines instances are equal
            </summary>
            <param name="input">Instance of PayslipLines to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipLines.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipObject">
            <summary>
            PayslipObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipObject.Payslip">
            <summary>
            Gets or Sets Payslip
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipObject)">
            <summary>
            Returns true if PayslipObject instances are equal
            </summary>
            <param name="input">Instance of PayslipObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslips">
            <summary>
            Payslips
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslips._Payslips">
            <summary>
            Gets or Sets _Payslips
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslips.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslips.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslips.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslips.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.Payslips)">
            <summary>
            Returns true if Payslips instances are equal
            </summary>
            <param name="input">Instance of Payslips to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslips.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Payslips.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary">
            <summary>
            PayslipSummary
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.EmployeeID">
            <summary>
            The Xero identifier for an employee
            </summary>
            <value>The Xero identifier for an employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.PayslipID">
            <summary>
            Xero identifier for the payslip
            </summary>
            <value>Xero identifier for the payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.FirstName">
            <summary>
            First name of employee
            </summary>
            <value>First name of employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.LastName">
            <summary>
            Last name of employee
            </summary>
            <value>Last name of employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.EmployeeGroup">
            <summary>
            Employee group name
            </summary>
            <value>Employee group name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.Wages">
            <summary>
            The Wages for the Payslip
            </summary>
            <value>The Wages for the Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.Deductions">
            <summary>
            The Deductions for the Payslip
            </summary>
            <value>The Deductions for the Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.Tax">
            <summary>
            The Tax for the Payslip
            </summary>
            <value>The Tax for the Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.Super">
            <summary>
            The Super for the Payslip
            </summary>
            <value>The Super for the Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.Reimbursements">
            <summary>
            The Reimbursements for the Payslip
            </summary>
            <value>The Reimbursements for the Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.NetPay">
            <summary>
            The NetPay for the Payslip
            </summary>
            <value>The NetPay for the Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary)">
            <summary>
            Returns true if PayslipSummary instances are equal
            </summary>
            <param name="input">Instance of PayslipSummary to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayslipSummary.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate">
            <summary>
            PayTemplate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate.EarningsLines">
            <summary>
            Gets or Sets EarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate.DeductionLines">
            <summary>
            Gets or Sets DeductionLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate.SuperLines">
            <summary>
            Gets or Sets SuperLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate.ReimbursementLines">
            <summary>
            Gets or Sets ReimbursementLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate.LeaveLines">
            <summary>
            Gets or Sets LeaveLines
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate)">
            <summary>
            Returns true if PayTemplate instances are equal
            </summary>
            <param name="input">Instance of PayTemplate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.PayTemplate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.RateType">
            <summary>
            Defines RateType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.RateType.FIXEDAMOUNT">
            <summary>
            Enum FIXEDAMOUNT for value: FIXEDAMOUNT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.RateType.MULTIPLE">
            <summary>
            Enum MULTIPLE for value: MULTIPLE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.RateType.RATEPERUNIT">
            <summary>
            Enum RATEPERUNIT for value: RATEPERUNIT
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLine">
            <summary>
            ReimbursementLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLine.ReimbursementTypeID">
            <summary>
            Xero reimbursement type identifier
            </summary>
            <value>Xero reimbursement type identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLine.Amount">
            <summary>
            Reimbursement type amount
            </summary>
            <value>Reimbursement type amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLine.Description">
            <summary>
            Reimbursement lines description (max length 50)
            </summary>
            <value>Reimbursement lines description (max length 50)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLine.ExpenseAccount">
            <summary>
            Reimbursement expense account. For posted pay run you should be able to see expense account code.
            </summary>
            <value>Reimbursement expense account. For posted pay run you should be able to see expense account code.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLine)">
            <summary>
            Returns true if ReimbursementLine instances are equal
            </summary>
            <param name="input">Instance of ReimbursementLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLines">
            <summary>
            The reimbursement type lines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLines._ReimbursementLines">
            <summary>
            Gets or Sets _ReimbursementLines
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLines.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLines.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLines.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLines.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLines)">
            <summary>
            Returns true if ReimbursementLines instances are equal
            </summary>
            <param name="input">Instance of ReimbursementLines to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLines.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementLines.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType">
            <summary>
            ReimbursementType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType.Name">
            <summary>
            Name of the earnings rate (max length &#x3D; 100)
            </summary>
            <value>Name of the earnings rate (max length &#x3D; 100)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType.AccountCode">
            <summary>
            See Accounts
            </summary>
            <value>See Accounts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType.ReimbursementTypeID">
            <summary>
            Xero identifier
            </summary>
            <value>Xero identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType.CurrentRecord">
            <summary>
            Is the current record
            </summary>
            <value>Is the current record</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType)">
            <summary>
            Returns true if ReimbursementType instances are equal
            </summary>
            <param name="input">Instance of ReimbursementType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ReimbursementType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.ResidencyStatus">
            <summary>
            Defines ResidencyStatus
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.ResidencyStatus.AUSTRALIANRESIDENT">
            <summary>
            Enum AUSTRALIANRESIDENT for value: AUSTRALIANRESIDENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.ResidencyStatus.FOREIGNRESIDENT">
            <summary>
            Enum FOREIGNRESIDENT for value: FOREIGNRESIDENT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.ResidencyStatus.WORKINGHOLIDAYMAKER">
            <summary>
            Enum WORKINGHOLIDAYMAKER for value: WORKINGHOLIDAYMAKER
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Settings.Accounts">
            <summary>
            Payroll Account details for SuperExpense, SuperLiabilty, WagesExpense, PAYGLiability &amp; WagesPayable.
            </summary>
            <value>Payroll Account details for SuperExpense, SuperLiabilty, WagesExpense, PAYGLiability &amp; WagesPayable.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Settings.TrackingCategories">
            <summary>
            Gets or Sets TrackingCategories
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Settings.DaysInPayrollYear">
            <summary>
            Number of days in the Payroll year
            </summary>
            <value>Number of days in the Payroll year</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Settings.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Settings.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Settings.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Settings.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.Settings)">
            <summary>
            Returns true if Settings instances are equal
            </summary>
            <param name="input">Instance of Settings to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Settings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Settings.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsObject">
            <summary>
            SettingsObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsObject.Settings">
            <summary>
            Gets or Sets Settings
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsObject)">
            <summary>
            Returns true if SettingsObject instances are equal
            </summary>
            <param name="input">Instance of SettingsObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategories">
            <summary>
            Tracking categories for Employees and Timesheets
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategories.EmployeeGroups">
            <summary>
            Gets or Sets EmployeeGroups
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategories.TimesheetCategories">
            <summary>
            Gets or Sets TimesheetCategories
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategories.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategories.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategories.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategories.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategories)">
            <summary>
            Returns true if SettingsTrackingCategories instances are equal
            </summary>
            <param name="input">Instance of SettingsTrackingCategories to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategories.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategories.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesEmployeeGroups">
            <summary>
            The tracking category used for employees
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesEmployeeGroups.TrackingCategoryID">
            <summary>
            The identifier for the tracking category
            </summary>
            <value>The identifier for the tracking category</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesEmployeeGroups.TrackingCategoryName">
            <summary>
            Name of the tracking category
            </summary>
            <value>Name of the tracking category</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesEmployeeGroups.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesEmployeeGroups.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesEmployeeGroups.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesEmployeeGroups.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesEmployeeGroups)">
            <summary>
            Returns true if SettingsTrackingCategoriesEmployeeGroups instances are equal
            </summary>
            <param name="input">Instance of SettingsTrackingCategoriesEmployeeGroups to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesEmployeeGroups.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesEmployeeGroups.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesTimesheetCategories">
            <summary>
            The tracking category used for timesheets
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesTimesheetCategories.TrackingCategoryID">
            <summary>
            The identifier for the tracking category
            </summary>
            <value>The identifier for the tracking category</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesTimesheetCategories.TrackingCategoryName">
            <summary>
            Name of the tracking category
            </summary>
            <value>Name of the tracking category</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesTimesheetCategories.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesTimesheetCategories.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesTimesheetCategories.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesTimesheetCategories.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesTimesheetCategories)">
            <summary>
            Returns true if SettingsTrackingCategoriesTimesheetCategories instances are equal
            </summary>
            <param name="input">Instance of SettingsTrackingCategoriesTimesheetCategories to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesTimesheetCategories.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SettingsTrackingCategoriesTimesheetCategories.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.State">
            <summary>
            State abbreviation for employee home address
            </summary>
            <value>State abbreviation for employee home address</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.State.ACT">
            <summary>
            Enum ACT for value: ACT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.State.NSW">
            <summary>
            Enum NSW for value: NSW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.State.NT">
            <summary>
            Enum NT for value: NT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.State.QLD">
            <summary>
            Enum QLD for value: QLD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.State.SA">
            <summary>
            Enum SA for value: SA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.State.TAS">
            <summary>
            Enum TAS for value: TAS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.State.VIC">
            <summary>
            Enum VIC for value: VIC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.State.WA">
            <summary>
            Enum WA for value: WA
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationCalculationType">
            <summary>
            Defines SuperannuationCalculationType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationCalculationType.FIXEDAMOUNT">
            <summary>
            Enum FIXEDAMOUNT for value: FIXEDAMOUNT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationCalculationType.PERCENTAGEOFEARNINGS">
            <summary>
            Enum PERCENTAGEOFEARNINGS for value: PERCENTAGEOFEARNINGS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationCalculationType.STATUTORY">
            <summary>
            Enum STATUTORY for value: STATUTORY
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationContributionType">
            <summary>
            Defines SuperannuationContributionType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationContributionType.SGC">
            <summary>
            Enum SGC for value: SGC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationContributionType.SALARYSACRIFICE">
            <summary>
            Enum SALARYSACRIFICE for value: SALARYSACRIFICE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationContributionType.EMPLOYERADDITIONAL">
            <summary>
            Enum EMPLOYERADDITIONAL for value: EMPLOYERADDITIONAL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationContributionType.EMPLOYEE">
            <summary>
            Enum EMPLOYEE for value: EMPLOYEE
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine">
            <summary>
            SuperannuationLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.ContributionType">
            <summary>
            Gets or Sets ContributionType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.CalculationType">
            <summary>
            Gets or Sets CalculationType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.SuperMembershipID">
            <summary>
            Xero identifier for payroll super fund membership ID.
            </summary>
            <value>Xero identifier for payroll super fund membership ID.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.MinimumMonthlyEarnings">
            <summary>
            Superannuation minimum monthly earnings.
            </summary>
            <value>Superannuation minimum monthly earnings.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.ExpenseAccountCode">
            <summary>
            Superannuation expense account code.
            </summary>
            <value>Superannuation expense account code.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.LiabilityAccountCode">
            <summary>
            Superannuation liability account code
            </summary>
            <value>Superannuation liability account code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.PaymentDateForThisPeriod">
            <summary>
            Superannuation payment date for the current period (YYYY-MM-DD)
            </summary>
            <value>Superannuation payment date for the current period (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.Percentage">
            <summary>
            Superannuation percentage
            </summary>
            <value>Superannuation percentage</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.Amount">
            <summary>
            Superannuation amount
            </summary>
            <value>Superannuation amount</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine)">
            <summary>
            Returns true if SuperannuationLine instances are equal
            </summary>
            <param name="input">Instance of SuperannuationLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperannuationLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund">
            <summary>
            SuperFund
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.SuperFundID">
            <summary>
            Xero identifier for a super fund
            </summary>
            <value>Xero identifier for a super fund</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.Name">
            <summary>
            Name of the super fund
            </summary>
            <value>Name of the super fund</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.ABN">
            <summary>
            ABN of the self managed super fund
            </summary>
            <value>ABN of the self managed super fund</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.BSB">
            <summary>
            BSB of the self managed super fund
            </summary>
            <value>BSB of the self managed super fund</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.AccountNumber">
            <summary>
            The account number for the self managed super fund.
            </summary>
            <value>The account number for the self managed super fund.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.AccountName">
            <summary>
            The account name for the self managed super fund.
            </summary>
            <value>The account name for the self managed super fund.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.ElectronicServiceAddress">
            <summary>
            The electronic service address for the self managed super fund.
            </summary>
            <value>The electronic service address for the self managed super fund.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.EmployerNumber">
            <summary>
            Some funds assign a unique number to each employer
            </summary>
            <value>Some funds assign a unique number to each employer</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.SPIN">
            <summary>
            The SPIN of the Regulated SuperFund. This field has been deprecated. It will only be present for legacy superfunds. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN.
            </summary>
            <value>The SPIN of the Regulated SuperFund. This field has been deprecated. It will only be present for legacy superfunds. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.USI">
            <summary>
            The USI of the Regulated SuperFund
            </summary>
            <value>The USI of the Regulated SuperFund</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund)">
            <summary>
            Returns true if SuperFund instances are equal
            </summary>
            <param name="input">Instance of SuperFund to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFund.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProduct">
            <summary>
            SuperFundProduct
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProduct.ABN">
            <summary>
            The ABN of the Regulated SuperFund
            </summary>
            <value>The ABN of the Regulated SuperFund</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProduct.USI">
            <summary>
            The USI of the Regulated SuperFund
            </summary>
            <value>The USI of the Regulated SuperFund</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProduct.SPIN">
            <summary>
            The SPIN of the Regulated SuperFund. This field has been deprecated. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN
            </summary>
            <value>The SPIN of the Regulated SuperFund. This field has been deprecated. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProduct.ProductName">
            <summary>
            The name of the Regulated SuperFund
            </summary>
            <value>The name of the Regulated SuperFund</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProduct.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProduct.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProduct.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProduct.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProduct)">
            <summary>
            Returns true if SuperFundProduct instances are equal
            </summary>
            <param name="input">Instance of SuperFundProduct to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProduct.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProduct.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProducts">
            <summary>
            SuperFundProducts
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProducts._SuperFundProducts">
            <summary>
            Gets or Sets _SuperFundProducts
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProducts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProducts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProducts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProducts.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProducts)">
            <summary>
            Returns true if SuperFundProducts instances are equal
            </summary>
            <param name="input">Instance of SuperFundProducts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProducts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundProducts.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFunds">
            <summary>
            SuperFunds
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFunds._SuperFunds">
            <summary>
            Gets or Sets _SuperFunds
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFunds.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFunds.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFunds.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFunds.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFunds)">
            <summary>
            Returns true if SuperFunds instances are equal
            </summary>
            <param name="input">Instance of SuperFunds to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFunds.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFunds.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundType">
            <summary>
            Defines SuperFundType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundType.REGULATED">
            <summary>
            Enum REGULATED for value: REGULATED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperFundType.SMSF">
            <summary>
            Enum SMSF for value: SMSF
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine">
            <summary>
            SuperLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.ContributionType">
            <summary>
            Gets or Sets ContributionType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.CalculationType">
            <summary>
            Gets or Sets CalculationType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.SuperMembershipID">
            <summary>
            Xero super membership ID
            </summary>
            <value>Xero super membership ID</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.MinimumMonthlyEarnings">
            <summary>
            amount of minimum earnings
            </summary>
            <value>amount of minimum earnings</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.ExpenseAccountCode">
            <summary>
            expense account code
            </summary>
            <value>expense account code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.LiabilityAccountCode">
            <summary>
            liabilty account code
            </summary>
            <value>liabilty account code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.Percentage">
            <summary>
            percentage for super line
            </summary>
            <value>percentage for super line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.Amount">
            <summary>
            Super membership amount
            </summary>
            <value>Super membership amount</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine)">
            <summary>
            Returns true if SuperLine instances are equal
            </summary>
            <param name="input">Instance of SuperLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership">
            <summary>
            SuperMembership
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership.SuperMembershipID">
            <summary>
            Xero unique identifier for Super membership
            </summary>
            <value>Xero unique identifier for Super membership</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership.SuperFundID">
            <summary>
            Xero identifier for super fund
            </summary>
            <value>Xero identifier for super fund</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership.EmployeeNumber">
            <summary>
            The membership number assigned to the employee by the super fund.
            </summary>
            <value>The membership number assigned to the employee by the super fund.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership)">
            <summary>
            Returns true if SuperMembership instances are equal
            </summary>
            <param name="input">Instance of SuperMembership to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.SuperMembership.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration">
            <summary>
            TaxDeclaration
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.EmploymentBasis">
            <summary>
            Gets or Sets EmploymentBasis
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.TFNExemptionType">
            <summary>
            Gets or Sets TFNExemptionType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.ResidencyStatus">
            <summary>
            Gets or Sets ResidencyStatus
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.EmployeeID">
            <summary>
            Address line 1 for employee home address
            </summary>
            <value>Address line 1 for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.TaxFileNumber">
            <summary>
            The tax file number e.g 123123123.
            </summary>
            <value>The tax file number e.g 123123123.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.AustralianResidentForTaxPurposes">
            <summary>
            If the employee is Australian resident for tax purposes. e.g true or false
            </summary>
            <value>If the employee is Australian resident for tax purposes. e.g true or false</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.TaxFreeThresholdClaimed">
            <summary>
            If tax free threshold claimed. e.g true or false
            </summary>
            <value>If tax free threshold claimed. e.g true or false</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.TaxOffsetEstimatedAmount">
            <summary>
            If has tax offset estimated then the tax offset estimated amount. e.g 100
            </summary>
            <value>If has tax offset estimated then the tax offset estimated amount. e.g 100</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.HasHELPDebt">
            <summary>
            If employee has HECS or HELP debt. e.g true or false
            </summary>
            <value>If employee has HECS or HELP debt. e.g true or false</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.HasSFSSDebt">
            <summary>
            If employee has financial supplement debt. e.g true or false
            </summary>
            <value>If employee has financial supplement debt. e.g true or false</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.HasTradeSupportLoanDebt">
            <summary>
            If employee has trade support loan. e.g true or false
            </summary>
            <value>If employee has trade support loan. e.g true or false</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.UpwardVariationTaxWithholdingAmount">
            <summary>
            If the employee has requested that additional tax be withheld each pay run. e.g 50
            </summary>
            <value>If the employee has requested that additional tax be withheld each pay run. e.g 50</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.EligibleToReceiveLeaveLoading">
            <summary>
            If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false
            </summary>
            <value>If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.ApprovedWithholdingVariationPercentage">
            <summary>
            If the employee has approved withholding variation. e.g (0 - 100)
            </summary>
            <value>If the employee has approved withholding variation. e.g (0 - 100)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.HasStudentStartupLoan">
            <summary>
            If the employee is eligible for student startup loan rules
            </summary>
            <value>If the employee is eligible for student startup loan rules</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.HasLoanOrStudentDebt">
            <summary>
            If the employee has any of the following loans or debts: Higher Education Loan Program (HELP/HECS), VET Student Loan (VSL), Financial Supplement (FS), Student Start-up Loan (SSL), or Trade Support Loan (TSL)
            </summary>
            <value>If the employee has any of the following loans or debts: Higher Education Loan Program (HELP/HECS), VET Student Loan (VSL), Financial Supplement (FS), Student Start-up Loan (SSL), or Trade Support Loan (TSL)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration)">
            <summary>
            Returns true if TaxDeclaration instances are equal
            </summary>
            <param name="input">Instance of TaxDeclaration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxDeclaration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine">
            <summary>
            TaxLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine.ManualTaxType">
            <summary>
            Gets or Sets ManualTaxType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine.PayslipTaxLineID">
            <summary>
            Xero identifier for payslip tax line ID.
            </summary>
            <value>Xero identifier for payslip tax line ID.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine.Amount">
            <summary>
            The tax line amount
            </summary>
            <value>The tax line amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine.TaxTypeName">
            <summary>
            Name of the tax type.
            </summary>
            <value>Name of the tax type.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine.Description">
            <summary>
            Description of the tax line.
            </summary>
            <value>Description of the tax line.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine.LiabilityAccount">
            <summary>
            The tax line liability account code. For posted pay run you should be able to see liability account code
            </summary>
            <value>The tax line liability account code. For posted pay run you should be able to see liability account code</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine)">
            <summary>
            Returns true if TaxLine instances are equal
            </summary>
            <param name="input">Instance of TaxLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TaxLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.TFNExemptionType">
            <summary>
            Defines TFNExemptionType
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.TFNExemptionType.NOTQUOTED">
            <summary>
            Enum NOTQUOTED for value: NOTQUOTED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.TFNExemptionType.PENDING">
            <summary>
            Enum PENDING for value: PENDING
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.TFNExemptionType.PENSIONER">
            <summary>
            Enum PENSIONER for value: PENSIONER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.TFNExemptionType.UNDER18">
            <summary>
            Enum UNDER18 for value: UNDER18
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet">
            <summary>
            Timesheet
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.EmployeeID">
            <summary>
            The Xero identifier for an employee
            </summary>
            <value>The Xero identifier for an employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.StartDate">
            <summary>
            Period start date (YYYY-MM-DD)
            </summary>
            <value>Period start date (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.EndDate">
            <summary>
            Period end date (YYYY-MM-DD)
            </summary>
            <value>Period end date (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.Hours">
            <summary>
            Timesheet total hours
            </summary>
            <value>Timesheet total hours</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.TimesheetID">
            <summary>
            The Xero identifier for a Payroll Timesheet
            </summary>
            <value>The Xero identifier for a Payroll Timesheet</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.TimesheetLines">
            <summary>
            Gets or Sets TimesheetLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.ValidationErrors">
            <summary>
            Displays array of validation error messages from the API
            </summary>
            <value>Displays array of validation error messages from the API</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet)">
            <summary>
            Returns true if Timesheet instances are equal
            </summary>
            <param name="input">Instance of Timesheet to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheet.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetLine">
            <summary>
            TimesheetLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetLine.EarningsRateID">
            <summary>
            The Xero identifier for an Earnings Rate
            </summary>
            <value>The Xero identifier for an Earnings Rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetLine.TrackingItemID">
            <summary>
            The Xero identifier for a Tracking Category. The TrackingOptionID must belong to the TrackingCategory selected as TimesheetCategories under Payroll Settings.
            </summary>
            <value>The Xero identifier for a Tracking Category. The TrackingOptionID must belong to the TrackingCategory selected as TimesheetCategories under Payroll Settings.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetLine.NumberOfUnits">
            <summary>
            The number of units on a timesheet line
            </summary>
            <value>The number of units on a timesheet line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetLine.UpdatedDateUTC">
            <summary>
            Last modified timestamp
            </summary>
            <value>Last modified timestamp</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetLine)">
            <summary>
            Returns true if TimesheetLine instances are equal
            </summary>
            <param name="input">Instance of TimesheetLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetObject">
            <summary>
            TimesheetObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetObject.Timesheet">
            <summary>
            Gets or Sets Timesheet
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetObject)">
            <summary>
            Returns true if TimesheetObject instances are equal
            </summary>
            <param name="input">Instance of TimesheetObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheets">
            <summary>
            Timesheets
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheets._Timesheets">
            <summary>
            Gets or Sets _Timesheets
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheets.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheets.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheets.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheets.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheets)">
            <summary>
            Returns true if Timesheets instances are equal
            </summary>
            <param name="input">Instance of Timesheets to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheets.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.Timesheets.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetStatus">
            <summary>
            Defines TimesheetStatus
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetStatus.DRAFT">
            <summary>
            Enum DRAFT for value: DRAFT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetStatus.PROCESSED">
            <summary>
            Enum PROCESSED for value: PROCESSED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetStatus.APPROVED">
            <summary>
            Enum APPROVED for value: APPROVED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetStatus.REJECTED">
            <summary>
            Enum REJECTED for value: REJECTED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollAu.TimesheetStatus.REQUESTED">
            <summary>
            Enum REQUESTED for value: REQUESTED
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollAu.ValidationError">
            <summary>
            ValidationError
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollAu.ValidationError.Message">
            <summary>
            Validation error message
            </summary>
            <value>Validation error message</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ValidationError.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ValidationError.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ValidationError.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ValidationError.Equals(Xero.NetStandard.OAuth2.Model.PayrollAu.ValidationError)">
            <summary>
            Returns true if ValidationError instances are equal
            </summary>
            <param name="input">Instance of ValidationError to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ValidationError.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollAu.ValidationError.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Account">
            <summary>
            Account
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.TypeEnum">
            <summary>
            The assigned AccountType
            </summary>
            <value>The assigned AccountType</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.TypeEnum.PAYELIABILITY">
            <summary>
            Enum PAYELIABILITY for value: PAYELIABILITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.TypeEnum.WAGESPAYABLE">
            <summary>
            Enum WAGESPAYABLE for value: WAGESPAYABLE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.TypeEnum.WAGESEXPENSE">
            <summary>
            Enum WAGESEXPENSE for value: WAGESEXPENSE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.TypeEnum.BANK">
            <summary>
            Enum BANK for value: BANK
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.Type">
            <summary>
            The assigned AccountType
            </summary>
            <value>The assigned AccountType</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.AccountID">
            <summary>
            The Xero identifier for Settings.
            </summary>
            <value>The Xero identifier for Settings.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.Code">
            <summary>
            A unique 3 digit number for each Account
            </summary>
            <value>A unique 3 digit number for each Account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.Name">
            <summary>
            Name of the Account.
            </summary>
            <value>Name of the Account.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Account)">
            <summary>
            Returns true if Account instances are equal
            </summary>
            <param name="input">Instance of Account to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Account.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Accounts">
            <summary>
            Accounts
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Accounts._Accounts">
            <summary>
            Gets or Sets _Accounts
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Accounts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Accounts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Accounts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Accounts.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Accounts)">
            <summary>
            Returns true if Accounts instances are equal
            </summary>
            <param name="input">Instance of Accounts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Accounts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Accounts.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Address" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.AddressLine1">
            <summary>
            Address line 1 for employee home address
            </summary>
            <value>Address line 1 for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.AddressLine2">
            <summary>
            Address line 2 for employee home address
            </summary>
            <value>Address line 2 for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.City">
            <summary>
            Suburb for employee home address
            </summary>
            <value>Suburb for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.Suburb">
            <summary>
            Suburb for employee home address
            </summary>
            <value>Suburb for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.PostCode">
            <summary>
            PostCode for employee home address
            </summary>
            <value>PostCode for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.CountryName">
            <summary>
            Country of HomeAddress
            </summary>
            <value>Country of HomeAddress</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Address)">
            <summary>
            Returns true if Address instances are equal
            </summary>
            <param name="input">Instance of Address to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Address.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount">
            <summary>
            BankAccount
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.CalculationTypeEnum">
            <summary>
            Calculation type for the transaction can be &#39;Fixed Amount&#39; or &#39;Balance&#39;
            </summary>
            <value>Calculation type for the transaction can be &#39;Fixed Amount&#39; or &#39;Balance&#39;</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.CalculationTypeEnum.FixedAmount">
            <summary>
            Enum FixedAmount for value: FixedAmount
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.CalculationTypeEnum.Balance">
            <summary>
            Enum Balance for value: Balance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.CalculationType">
            <summary>
            Calculation type for the transaction can be &#39;Fixed Amount&#39; or &#39;Balance&#39;
            </summary>
            <value>Calculation type for the transaction can be &#39;Fixed Amount&#39; or &#39;Balance&#39;</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.AccountName">
            <summary>
            Bank account name (max length &#x3D; 32)
            </summary>
            <value>Bank account name (max length &#x3D; 32)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.AccountNumber">
            <summary>
            Bank account number (digits only; max length &#x3D; 8)
            </summary>
            <value>Bank account number (digits only; max length &#x3D; 8)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.SortCode">
            <summary>
            Bank account sort code (6 digits)
            </summary>
            <value>Bank account sort code (6 digits)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.Particulars">
            <summary>
            Particulars that appear on the statement.
            </summary>
            <value>Particulars that appear on the statement.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.Code">
            <summary>
            Code of a transaction that appear on the statement.
            </summary>
            <value>Code of a transaction that appear on the statement.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.DollarAmount">
            <summary>
            Dollar amount of a transaction.
            </summary>
            <value>Dollar amount of a transaction.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.Reference">
            <summary>
            Statement Text/reference for a transaction that appear on the statement.
            </summary>
            <value>Statement Text/reference for a transaction that appear on the statement.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount)">
            <summary>
            Returns true if BankAccount instances are equal
            </summary>
            <param name="input">Instance of BankAccount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.BankAccount.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit">
            <summary>
            Benefit
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.CategoryEnum">
            <summary>
            Superannuations Category type
            </summary>
            <value>Superannuations Category type</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.CategoryEnum.KiwiSaver">
            <summary>
            Enum KiwiSaver for value: KiwiSaver
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.CategoryEnum.ComplyingFund">
            <summary>
            Enum ComplyingFund for value: ComplyingFund
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.CategoryEnum.Other">
            <summary>
            Enum Other for value: Other
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.Category">
            <summary>
            Superannuations Category type
            </summary>
            <value>Superannuations Category type</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.CalculationTypeNZEnum">
            <summary>
            Calculation Type of the superannuation either FixedAmount or PercentageOfTaxableEarnings
            </summary>
            <value>Calculation Type of the superannuation either FixedAmount or PercentageOfTaxableEarnings</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.CalculationTypeNZEnum.FixedAmount">
            <summary>
            Enum FixedAmount for value: FixedAmount
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.CalculationTypeNZEnum.PercentageOfTaxableEarnings">
            <summary>
            Enum PercentageOfTaxableEarnings for value: PercentageOfTaxableEarnings
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.CalculationTypeNZ">
            <summary>
            Calculation Type of the superannuation either FixedAmount or PercentageOfTaxableEarnings
            </summary>
            <value>Calculation Type of the superannuation either FixedAmount or PercentageOfTaxableEarnings</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.Id">
            <summary>
            The Xero identifier for superannuation
            </summary>
            <value>The Xero identifier for superannuation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.Name">
            <summary>
            Name of the superannuations
            </summary>
            <value>Name of the superannuations</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.LiabilityAccountId">
            <summary>
            Xero identifier for Liability Account
            </summary>
            <value>Xero identifier for Liability Account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.ExpenseAccountId">
            <summary>
            Xero identifier for Expense Account
            </summary>
            <value>Xero identifier for Expense Account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.StandardAmount">
            <summary>
            Standard amount of the superannuation
            </summary>
            <value>Standard amount of the superannuation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.Percentage">
            <summary>
            Percentage of Taxable Earnings of the superannuation
            </summary>
            <value>Percentage of Taxable Earnings of the superannuation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.CompanyMax">
            <summary>
            Company Maximum amount of the superannuation
            </summary>
            <value>Company Maximum amount of the superannuation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.CurrentRecord">
            <summary>
            Identifier of a record is active or not.
            </summary>
            <value>Identifier of a record is active or not.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit)">
            <summary>
            Returns true if Benefit instances are equal
            </summary>
            <param name="input">Instance of Benefit to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Benefit.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.CalendarType">
            <summary>
            Calendar type of the pay run
            </summary>
            <value>Calendar type of the pay run</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.CalendarType.Weekly">
            <summary>
            Enum Weekly for value: Weekly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.CalendarType.Fortnightly">
            <summary>
            Enum Fortnightly for value: Fortnightly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.CalendarType.FourWeekly">
            <summary>
            Enum FourWeekly for value: FourWeekly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.CalendarType.Monthly">
            <summary>
            Enum Monthly for value: Monthly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.CalendarType.Annual">
            <summary>
            Enum Annual for value: Annual
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.CalendarType.Quarterly">
            <summary>
            Enum Quarterly for value: Quarterly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.CalendarType.TwiceMonthly">
            <summary>
            Enum TwiceMonthly for value: TwiceMonthly
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction">
            <summary>
            Deduction
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.DeductionCategoryEnum">
            <summary>
            Deduction Category type
            </summary>
            <value>Deduction Category type</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.DeductionCategoryEnum.PayrollGiving">
            <summary>
            Enum PayrollGiving for value: PayrollGiving
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.DeductionCategoryEnum.KiwiSaverVoluntaryContributions">
            <summary>
            Enum KiwiSaverVoluntaryContributions for value: KiwiSaverVoluntaryContributions
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.DeductionCategoryEnum.Superannuation">
            <summary>
            Enum Superannuation for value: Superannuation
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.DeductionCategoryEnum.NzOther">
            <summary>
            Enum NzOther for value: NzOther
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.DeductionCategory">
            <summary>
            Deduction Category type
            </summary>
            <value>Deduction Category type</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.DeductionId">
            <summary>
            The Xero identifier for Deduction
            </summary>
            <value>The Xero identifier for Deduction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.DeductionName">
            <summary>
            Name of the deduction
            </summary>
            <value>Name of the deduction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.LiabilityAccountId">
            <summary>
            Xero identifier for Liability Account
            </summary>
            <value>Xero identifier for Liability Account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.CurrentRecord">
            <summary>
            Identifier of a record is active or not.
            </summary>
            <value>Identifier of a record is active or not.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.StandardAmount">
            <summary>
            Standard amount of the deduction.
            </summary>
            <value>Standard amount of the deduction.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction)">
            <summary>
            Returns true if Deduction instances are equal
            </summary>
            <param name="input">Instance of Deduction to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deduction.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine">
            <summary>
            DeductionLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine.DeductionTypeID">
            <summary>
            Xero identifier for payroll deduction
            </summary>
            <value>Xero identifier for payroll deduction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine.DisplayName">
            <summary>
            name of earnings rate for display in UI
            </summary>
            <value>name of earnings rate for display in UI</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine.Amount">
            <summary>
            The amount of the deduction line
            </summary>
            <value>The amount of the deduction line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine.SubjectToTax">
            <summary>
            Identifies if the deduction is subject to tax
            </summary>
            <value>Identifies if the deduction is subject to tax</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine.Percentage">
            <summary>
            Deduction rate percentage
            </summary>
            <value>Deduction rate percentage</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine)">
            <summary>
            Returns true if DeductionLine instances are equal
            </summary>
            <param name="input">Instance of DeductionLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionObject">
            <summary>
            DeductionObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionObject.Deduction">
            <summary>
            Gets or Sets Deduction
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionObject)">
            <summary>
            Returns true if DeductionObject instances are equal
            </summary>
            <param name="input">Instance of DeductionObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.DeductionObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Deductions">
            <summary>
            Deductions
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Deductions.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Deductions.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Deductions._Deductions">
            <summary>
            Gets or Sets _Deductions
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deductions.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deductions.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deductions.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deductions.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Deductions)">
            <summary>
            Returns true if Deductions instances are equal
            </summary>
            <param name="input">Instance of Deductions to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deductions.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Deductions.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine">
            <summary>
            EarningsLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.EarningsLineID">
            <summary>
            Xero identifier for payroll earnings line
            </summary>
            <value>Xero identifier for payroll earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.EarningsRateID">
            <summary>
            Xero identifier for payroll earnings rate
            </summary>
            <value>Xero identifier for payroll earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.DisplayName">
            <summary>
            name of earnings rate for display in UI
            </summary>
            <value>name of earnings rate for display in UI</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.RatePerUnit">
            <summary>
            Rate per unit for earnings line
            </summary>
            <value>Rate per unit for earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.NumberOfUnits">
            <summary>
            Earnings number of units
            </summary>
            <value>Earnings number of units</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.FixedAmount">
            <summary>
            Earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
            </summary>
            <value>Earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.Amount">
            <summary>
            The amount of the earnings line.
            </summary>
            <value>The amount of the earnings line.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.IsLinkedToTimesheet">
            <summary>
            Identifies if the earnings is taken from the timesheet. False for earnings line
            </summary>
            <value>Identifies if the earnings is taken from the timesheet. False for earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.IsAverageDailyPayRate">
            <summary>
            Identifies if the earnings is using an average daily pay rate
            </summary>
            <value>Identifies if the earnings is using an average daily pay rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.IsSystemGenerated">
            <summary>
            Flag to identify whether the earnings line is system generated or not.
            </summary>
            <value>Flag to identify whether the earnings line is system generated or not.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine)">
            <summary>
            Returns true if EarningsLine instances are equal
            </summary>
            <param name="input">Instance of EarningsLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder">
            <summary>
            EarningsOrder
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder.StatutoryDeductionCategory">
            <summary>
            Gets or Sets StatutoryDeductionCategory
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder.Id">
            <summary>
            Xero unique identifier for an earning rate
            </summary>
            <value>Xero unique identifier for an earning rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder.Name">
            <summary>
            Name of the earning order
            </summary>
            <value>Name of the earning order</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder.LiabilityAccountId">
            <summary>
            Xero identifier for Liability Account
            </summary>
            <value>Xero identifier for Liability Account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder.CurrentRecord">
            <summary>
            Identifier of a record is active or not.
            </summary>
            <value>Identifier of a record is active or not.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder)">
            <summary>
            Returns true if EarningsOrder instances are equal
            </summary>
            <param name="input">Instance of EarningsOrder to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrder.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrderObject">
            <summary>
            EarningsOrderObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrderObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrderObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrderObject.StatutoryDeduction">
            <summary>
            Gets or Sets StatutoryDeduction
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrderObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrderObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrderObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrderObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrderObject)">
            <summary>
            Returns true if EarningsOrderObject instances are equal
            </summary>
            <param name="input">Instance of EarningsOrderObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrderObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrderObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrders">
            <summary>
            EarningsOrders
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrders.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrders.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrders.StatutoryDeductions">
            <summary>
            Gets or Sets StatutoryDeductions
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrders.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrders.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrders.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrders.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrders)">
            <summary>
            Returns true if EarningsOrders instances are equal
            </summary>
            <param name="input">Instance of EarningsOrders to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrders.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsOrders.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate">
            <summary>
            EarningsRate
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum">
            <summary>
            Indicates how an employee will be paid when taking this type of earning
            </summary>
            <value>Indicates how an employee will be paid when taking this type of earning</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.Allowance">
            <summary>
            Enum Allowance for value: Allowance
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.Backpay">
            <summary>
            Enum Backpay for value: Backpay
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.Bonus">
            <summary>
            Enum Bonus for value: Bonus
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.Commission">
            <summary>
            Enum Commission for value: Commission
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.DiscretionaryPayments">
            <summary>
            Enum DiscretionaryPayments for value: DiscretionaryPayments
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.HolidayPay">
            <summary>
            Enum HolidayPay for value: HolidayPay
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.LumpSum">
            <summary>
            Enum LumpSum for value: LumpSum
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.OtherEarnings">
            <summary>
            Enum OtherEarnings for value: OtherEarnings
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.OtherGrossEarnings">
            <summary>
            Enum OtherGrossEarnings for value: OtherGrossEarnings
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.OvertimeEarnings">
            <summary>
            Enum OvertimeEarnings for value: OvertimeEarnings
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.RegularEarnings">
            <summary>
            Enum RegularEarnings for value: RegularEarnings
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.SalarySacrificeForKiwiSaver">
            <summary>
            Enum SalarySacrificeForKiwiSaver for value: SalarySacrificeForKiwiSaver
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.TipsDirect">
            <summary>
            Enum TipsDirect for value: Tips(Direct)
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.TipsNonDirect">
            <summary>
            Enum TipsNonDirect for value: Tips(Non-Direct)
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsTypeEnum.WithholdingIncome">
            <summary>
            Enum WithholdingIncome for value: WithholdingIncome
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsType">
            <summary>
            Indicates how an employee will be paid when taking this type of earning
            </summary>
            <value>Indicates how an employee will be paid when taking this type of earning</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.RateTypeEnum">
            <summary>
            Indicates the type of the earning rate
            </summary>
            <value>Indicates the type of the earning rate</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.RateTypeEnum.RatePerUnit">
            <summary>
            Enum RatePerUnit for value: RatePerUnit
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.RateTypeEnum.MultipleOfOrdinaryEarningsRate">
            <summary>
            Enum MultipleOfOrdinaryEarningsRate for value: MultipleOfOrdinaryEarningsRate
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.RateTypeEnum.FixedAmount">
            <summary>
            Enum FixedAmount for value: FixedAmount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.RateType">
            <summary>
            Indicates the type of the earning rate
            </summary>
            <value>Indicates the type of the earning rate</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.EarningsRateID">
            <summary>
            Xero unique identifier for an earning rate
            </summary>
            <value>Xero unique identifier for an earning rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.Name">
            <summary>
            Name of the earning rate
            </summary>
            <value>Name of the earning rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.TypeOfUnits">
            <summary>
            The type of units used to record earnings
            </summary>
            <value>The type of units used to record earnings</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.CurrentRecord">
            <summary>
            Indicates whether an earning type is active
            </summary>
            <value>Indicates whether an earning type is active</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.ExpenseAccountID">
            <summary>
            The account that will be used for the earnings rate
            </summary>
            <value>The account that will be used for the earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.RatePerUnit">
            <summary>
            Default rate per unit (optional). Only applicable if RateType is RatePerUnit
            </summary>
            <value>Default rate per unit (optional). Only applicable if RateType is RatePerUnit</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.MultipleOfOrdinaryEarningsRate">
            <summary>
            This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MultipleOfOrdinaryEarningsRate
            </summary>
            <value>This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MultipleOfOrdinaryEarningsRate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.FixedAmount">
            <summary>
            Optional Fixed Rate Amount. Applicable for FixedAmount Rate
            </summary>
            <value>Optional Fixed Rate Amount. Applicable for FixedAmount Rate</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate)">
            <summary>
            Returns true if EarningsRate instances are equal
            </summary>
            <param name="input">Instance of EarningsRate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRateObject">
            <summary>
            EarningsRateObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRateObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRateObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRateObject.EarningsRate">
            <summary>
            Gets or Sets EarningsRate
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRateObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRateObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRateObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRateObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRateObject)">
            <summary>
            Returns true if EarningsRateObject instances are equal
            </summary>
            <param name="input">Instance of EarningsRateObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRateObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRateObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRates">
            <summary>
            EarningsRates
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRates.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRates.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRates._EarningsRates">
            <summary>
            Gets or Sets _EarningsRates
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRates.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRates.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRates.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRates.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRates)">
            <summary>
            Returns true if EarningsRates instances are equal
            </summary>
            <param name="input">Instance of EarningsRates to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRates.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsRates.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate">
            <summary>
            EarningsTemplate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate.PayTemplateEarningID">
            <summary>
            The Xero identifier for the earnings template
            </summary>
            <value>The Xero identifier for the earnings template</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate.RatePerUnit">
            <summary>
            The rate per unit
            </summary>
            <value>The rate per unit</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate.NumberOfUnits">
            <summary>
            The rate per unit
            </summary>
            <value>The rate per unit</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate.FixedAmount">
            <summary>
            The fixed amount per period
            </summary>
            <value>The fixed amount per period</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate.EarningsRateID">
            <summary>
            The corresponding earnings rate identifier
            </summary>
            <value>The corresponding earnings rate identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate.Name">
            <summary>
            The read-only name of the Earning Template.
            </summary>
            <value>The read-only name of the Earning Template.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate)">
            <summary>
            Returns true if EarningsTemplate instances are equal
            </summary>
            <param name="input">Instance of EarningsTemplate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplateObject">
            <summary>
            EarningsTemplateObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplateObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplateObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplateObject.EarningTemplate">
            <summary>
            Gets or Sets EarningTemplate
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplateObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplateObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplateObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplateObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplateObject)">
            <summary>
            Returns true if EarningsTemplateObject instances are equal
            </summary>
            <param name="input">Instance of EarningsTemplateObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplateObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EarningsTemplateObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee">
            <summary>
            Employee
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.GenderEnum">
            <summary>
            The employee’s gender
            </summary>
            <value>The employee’s gender</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.GenderEnum.M">
            <summary>
            Enum M for value: M
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.GenderEnum.F">
            <summary>
            Enum F for value: F
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.Gender">
            <summary>
            The employee’s gender
            </summary>
            <value>The employee’s gender</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.EmployeeID">
            <summary>
            Xero unique identifier for the employee
            </summary>
            <value>Xero unique identifier for the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.Title">
            <summary>
            Title of the employee
            </summary>
            <value>Title of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.FirstName">
            <summary>
            First name of employee
            </summary>
            <value>First name of employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.LastName">
            <summary>
            Last name of employee
            </summary>
            <value>Last name of employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.DateOfBirth">
            <summary>
            Date of birth of the employee (YYYY-MM-DD)
            </summary>
            <value>Date of birth of the employee (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.Email">
            <summary>
            The email address for the employee
            </summary>
            <value>The email address for the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.PhoneNumber">
            <summary>
            Employee phone number
            </summary>
            <value>Employee phone number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.StartDate">
            <summary>
            Employment start date of the employee at the time it was requested
            </summary>
            <value>Employment start date of the employee at the time it was requested</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.EndDate">
            <summary>
            Employment end date of the employee at the time it was requested
            </summary>
            <value>Employment end date of the employee at the time it was requested</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.PayrollCalendarID">
            <summary>
            Xero unique identifier for the payroll calendar of the employee
            </summary>
            <value>Xero unique identifier for the payroll calendar of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to the employee
            </summary>
            <value>UTC timestamp of last update to the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.CreatedDateUTC">
            <summary>
            UTC timestamp when the employee was created in Xero
            </summary>
            <value>UTC timestamp when the employee was created in Xero</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Employee)">
            <summary>
            Returns true if Employee instances are equal
            </summary>
            <param name="input">Instance of Employee to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employee.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeEarningsTemplates">
            <summary>
            EmployeeEarningsTemplates
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeEarningsTemplates.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeEarningsTemplates.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeEarningsTemplates.EarningTemplates">
            <summary>
            Gets or Sets EarningTemplates
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeEarningsTemplates.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeEarningsTemplates.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeEarningsTemplates.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeEarningsTemplates.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeEarningsTemplates)">
            <summary>
            Returns true if EmployeeEarningsTemplates instances are equal
            </summary>
            <param name="input">Instance of EmployeeEarningsTemplates to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeEarningsTemplates.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeEarningsTemplates.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave">
            <summary>
            EmployeeLeave
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.LeaveID">
            <summary>
            The Xero identifier for LeaveType
            </summary>
            <value>The Xero identifier for LeaveType</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.LeaveTypeID">
            <summary>
            The Xero identifier for LeaveType
            </summary>
            <value>The Xero identifier for LeaveType</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.Description">
            <summary>
            The description of the leave  (max length &#x3D; 50)
            </summary>
            <value>The description of the leave  (max length &#x3D; 50)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.StartDate">
            <summary>
            Start date of the leave (YYYY-MM-DD)
            </summary>
            <value>Start date of the leave (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.EndDate">
            <summary>
            End date of the leave (YYYY-MM-DD)
            </summary>
            <value>End date of the leave (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.Periods">
            <summary>
            The leave period information. The StartDate, EndDate and NumberOfUnits needs to be specified when you do not want to calculate NumberOfUnits automatically. Using incorrect period StartDate and EndDate will result in automatic computation of the NumberOfUnits.
            </summary>
            <value>The leave period information. The StartDate, EndDate and NumberOfUnits needs to be specified when you do not want to calculate NumberOfUnits automatically. Using incorrect period StartDate and EndDate will result in automatic computation of the NumberOfUnits.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to the leave type note
            </summary>
            <value>UTC timestamp of last update to the leave type note</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave)">
            <summary>
            Returns true if EmployeeLeave instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeave to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeave.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalance">
            <summary>
            EmployeeLeaveBalance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalance.Name">
            <summary>
            Name of the leave type.
            </summary>
            <value>Name of the leave type.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalance.LeaveTypeID">
            <summary>
            The Xero identifier for leave type
            </summary>
            <value>The Xero identifier for leave type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalance.Balance">
            <summary>
            The employees current balance for the corresponding leave type.
            </summary>
            <value>The employees current balance for the corresponding leave type.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalance.TypeOfUnits">
            <summary>
            The type of the units of the leave.
            </summary>
            <value>The type of the units of the leave.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalance.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalance.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalance.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalance.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalance)">
            <summary>
            Returns true if EmployeeLeaveBalance instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveBalance to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalance.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalance.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalances">
            <summary>
            EmployeeLeaveBalances
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalances.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalances.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalances.LeaveBalances">
            <summary>
            Gets or Sets LeaveBalances
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalances.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalances.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalances.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalances.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalances)">
            <summary>
            Returns true if EmployeeLeaveBalances instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveBalances to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalances.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveBalances.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveObject">
            <summary>
            EmployeeLeaveObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveObject.Leave">
            <summary>
            Gets or Sets Leave
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveObject)">
            <summary>
            Returns true if EmployeeLeaveObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaves">
            <summary>
            EmployeeLeaves
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaves.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaves.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaves.Leave">
            <summary>
            Gets or Sets Leave
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaves.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaves.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaves.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaves.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaves)">
            <summary>
            Returns true if EmployeeLeaves instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaves to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaves.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaves.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup">
            <summary>
            EmployeeLeaveSetup
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.IncludeHolidayPay">
            <summary>
            Identifier if holiday pay will be included in each payslip
            </summary>
            <value>Identifier if holiday pay will be included in each payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.HolidayPayOpeningBalance">
            <summary>
            Initial holiday pay balance. A percentage — usually 8% — of gross earnings since their last work anniversary.
            </summary>
            <value>Initial holiday pay balance. A percentage — usually 8% — of gross earnings since their last work anniversary.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.AnnualLeaveOpeningBalance">
            <summary>
            Initial annual leave balance. The balance at their last anniversary, less any leave taken since then and excluding accrued annual leave.
            </summary>
            <value>Initial annual leave balance. The balance at their last anniversary, less any leave taken since then and excluding accrued annual leave.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.NegativeAnnualLeaveBalancePaidAmount">
            <summary>
            The dollar value of annual leave opening balance if negative.
            </summary>
            <value>The dollar value of annual leave opening balance if negative.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.SickLeaveHoursToAccrueAnnually">
            <summary>
            Number of hours accrued annually for sick leave. Multiply the number of days they&#39;re entitled to by the hours worked per day
            </summary>
            <value>Number of hours accrued annually for sick leave. Multiply the number of days they&#39;re entitled to by the hours worked per day</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.SickLeaveMaximumHoursToAccrue">
            <summary>
            Maximum number of hours accrued annually for sick leave. Multiply the maximum days they can accrue by the hours worked per day
            </summary>
            <value>Maximum number of hours accrued annually for sick leave. Multiply the maximum days they can accrue by the hours worked per day</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.SickLeaveOpeningBalance">
            <summary>
            Initial sick leave balance. This will be positive unless they&#39;ve taken sick leave in advance
            </summary>
            <value>Initial sick leave balance. This will be positive unless they&#39;ve taken sick leave in advance</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup)">
            <summary>
            Returns true if EmployeeLeaveSetup instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveSetup to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetup.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetupObject">
            <summary>
            EmployeeLeaveSetupObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetupObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetupObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetupObject.LeaveSetup">
            <summary>
            Gets or Sets LeaveSetup
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetupObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetupObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetupObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetupObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetupObject)">
            <summary>
            Returns true if EmployeeLeaveSetupObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveSetupObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetupObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveSetupObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType">
            <summary>
            EmployeeLeaveType
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.ScheduleOfAccrualEnum">
            <summary>
            The schedule of accrual
            </summary>
            <value>The schedule of accrual</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.ScheduleOfAccrualEnum.AnnuallyAfter6Months">
            <summary>
            Enum AnnuallyAfter6Months for value: AnnuallyAfter6Months
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.ScheduleOfAccrualEnum.OnAnniversaryDate">
            <summary>
            Enum OnAnniversaryDate for value: OnAnniversaryDate
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.ScheduleOfAccrualEnum.PercentageOfGrossEarnings">
            <summary>
            Enum PercentageOfGrossEarnings for value: PercentageOfGrossEarnings
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.ScheduleOfAccrualEnum.NoAccruals">
            <summary>
            Enum NoAccruals for value: NoAccruals
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.ScheduleOfAccrual">
            <summary>
            The schedule of accrual
            </summary>
            <value>The schedule of accrual</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.LeaveTypeID">
            <summary>
            The Xero identifier for leave type
            </summary>
            <value>The Xero identifier for leave type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.HoursAccruedAnnually">
            <summary>
            The number of hours accrued for the leave annually. This is 0 when the scheduleOfAccrual chosen is \&quot;OnHourWorked\&quot;
            </summary>
            <value>The number of hours accrued for the leave annually. This is 0 when the scheduleOfAccrual chosen is \&quot;OnHourWorked\&quot;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.MaximumToAccrue">
            <summary>
            The maximum number of hours that can be accrued for the leave
            </summary>
            <value>The maximum number of hours that can be accrued for the leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.OpeningBalance">
            <summary>
            The initial number of hours assigned when the leave was added to the employee
            </summary>
            <value>The initial number of hours assigned when the leave was added to the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.RateAccruedHourly">
            <summary>
            The number of hours added to the leave balance for every hour worked by the employee. This is normally 0, unless the scheduleOfAccrual chosen is \&quot;OnHourWorked\&quot;
            </summary>
            <value>The number of hours added to the leave balance for every hour worked by the employee. This is normally 0, unless the scheduleOfAccrual chosen is \&quot;OnHourWorked\&quot;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.PercentageOfGrossEarnings">
            <summary>
            Specific for scheduleOfAccrual having percentage of gross earnings. Identifies how much percentage of gross earnings is accrued per pay period.
            </summary>
            <value>Specific for scheduleOfAccrual having percentage of gross earnings. Identifies how much percentage of gross earnings is accrued per pay period.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.IncludeHolidayPayEveryPay">
            <summary>
            Specific to Holiday pay. Flag determining if pay for leave type is added on each pay run.
            </summary>
            <value>Specific to Holiday pay. Flag determining if pay for leave type is added on each pay run.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.ShowAnnualLeaveInAdvance">
            <summary>
            Specific to Annual Leave. Flag to include leave available to take in advance in the balance in the payslip
            </summary>
            <value>Specific to Annual Leave. Flag to include leave available to take in advance in the balance in the payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.AnnualLeaveTotalAmountPaid">
            <summary>
            Specific to Annual Leave. Annual leave balance in dollars
            </summary>
            <value>Specific to Annual Leave. Annual leave balance in dollars</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType)">
            <summary>
            Returns true if EmployeeLeaveType instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypeObject">
            <summary>
            EmployeeLeaveTypeObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypeObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypeObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypeObject.LeaveType">
            <summary>
            Gets or Sets LeaveType
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypeObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypeObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypeObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypeObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypeObject)">
            <summary>
            Returns true if EmployeeLeaveTypeObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveTypeObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypeObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypeObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypes">
            <summary>
            EmployeeLeaveTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypes.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypes.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypes.LeaveTypes">
            <summary>
            Gets or Sets LeaveTypes
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypes.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypes.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypes.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypes.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypes)">
            <summary>
            Returns true if EmployeeLeaveTypes instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveTypes to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypes.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeLeaveTypes.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeObject">
            <summary>
            EmployeeObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeObject.Employee">
            <summary>
            Gets or Sets Employee
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeObject)">
            <summary>
            Returns true if EmployeeObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalance">
            <summary>
            EmployeeOpeningBalance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalance.PeriodEndDate">
            <summary>
            The opening balance period end date.
            </summary>
            <value>The opening balance period end date.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalance.DaysPaid">
            <summary>
            The paid number of days.
            </summary>
            <value>The paid number of days.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalance.UnpaidWeeks">
            <summary>
            The number of unpaid weeks.
            </summary>
            <value>The number of unpaid weeks.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalance.GrossEarnings">
            <summary>
            The gross earnings during the period.
            </summary>
            <value>The gross earnings during the period.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalance.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalance.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalance.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalance.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalance)">
            <summary>
            Returns true if EmployeeOpeningBalance instances are equal
            </summary>
            <param name="input">Instance of EmployeeOpeningBalance to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalance.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalance.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalancesObject">
            <summary>
            EmployeeOpeningBalancesObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalancesObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalancesObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalancesObject.OpeningBalances">
            <summary>
            Gets or Sets OpeningBalances
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalancesObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalancesObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalancesObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalancesObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalancesObject)">
            <summary>
            Returns true if EmployeeOpeningBalancesObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeOpeningBalancesObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalancesObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeOpeningBalancesObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplate">
            <summary>
            EmployeePayTemplate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplate.EmployeeID">
            <summary>
            Unique identifier for the employee
            </summary>
            <value>Unique identifier for the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplate.EarningTemplates">
            <summary>
            Gets or Sets EarningTemplates
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplate.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplate)">
            <summary>
            Returns true if EmployeePayTemplate instances are equal
            </summary>
            <param name="input">Instance of EmployeePayTemplate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplateObject">
            <summary>
            EmployeePayTemplateObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplateObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplateObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplateObject.PayTemplate">
            <summary>
            Gets or Sets PayTemplate
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplateObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplateObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplateObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplateObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplateObject)">
            <summary>
            Returns true if EmployeePayTemplateObject instances are equal
            </summary>
            <param name="input">Instance of EmployeePayTemplateObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplateObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplateObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplates">
            <summary>
            EmployeePayTemplates
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplates.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplates.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplates.PayTemplate">
            <summary>
            Gets or Sets PayTemplate
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplates.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplates.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplates.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplates.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplates)">
            <summary>
            Returns true if EmployeePayTemplates instances are equal
            </summary>
            <param name="input">Instance of EmployeePayTemplates to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplates.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeePayTemplates.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Employees">
            <summary>
            Employees
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employees.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employees.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employees._Employees">
            <summary>
            Gets or Sets _Employees
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employees.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employees.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employees.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employees.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Employees)">
            <summary>
            Returns true if Employees instances are equal
            </summary>
            <param name="input">Instance of Employees to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employees.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employees.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance">
            <summary>
            EmployeeStatutoryLeaveBalance
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.LeaveTypeEnum">
            <summary>
            The type of statutory leave
            </summary>
            <value>The type of statutory leave</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.LeaveTypeEnum.Sick">
            <summary>
            Enum Sick for value: Sick
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.LeaveTypeEnum.Adoption">
            <summary>
            Enum Adoption for value: Adoption
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.LeaveTypeEnum.Maternity">
            <summary>
            Enum Maternity for value: Maternity
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.LeaveTypeEnum.Paternity">
            <summary>
            Enum Paternity for value: Paternity
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.LeaveTypeEnum.Sharedparental">
            <summary>
            Enum Sharedparental for value: Sharedparental
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.LeaveType">
            <summary>
            The type of statutory leave
            </summary>
            <value>The type of statutory leave</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.UnitsEnum">
            <summary>
            The units will be \&quot;Hours\&quot;
            </summary>
            <value>The units will be \&quot;Hours\&quot;</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.UnitsEnum.Hours">
            <summary>
            Enum Hours for value: Hours
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.Units">
            <summary>
            The units will be \&quot;Hours\&quot;
            </summary>
            <value>The units will be \&quot;Hours\&quot;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.BalanceRemaining">
            <summary>
            The balance remaining for the corresponding leave type as of specified date.
            </summary>
            <value>The balance remaining for the corresponding leave type as of specified date.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance)">
            <summary>
            Returns true if EmployeeStatutoryLeaveBalance instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutoryLeaveBalance to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalance.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalanceObject">
            <summary>
            EmployeeStatutoryLeaveBalanceObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalanceObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalanceObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalanceObject.LeaveBalance">
            <summary>
            Gets or Sets LeaveBalance
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalanceObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalanceObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalanceObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalanceObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalanceObject)">
            <summary>
            Returns true if EmployeeStatutoryLeaveBalanceObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutoryLeaveBalanceObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalanceObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveBalanceObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeavesSummaries">
            <summary>
            EmployeeStatutoryLeavesSummaries
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeavesSummaries.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeavesSummaries.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeavesSummaries.StatutoryLeaves">
            <summary>
            Gets or Sets StatutoryLeaves
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeavesSummaries.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeavesSummaries.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeavesSummaries.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeavesSummaries.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeavesSummaries)">
            <summary>
            Returns true if EmployeeStatutoryLeavesSummaries instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutoryLeavesSummaries to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeavesSummaries.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeavesSummaries.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary">
            <summary>
            EmployeeStatutoryLeaveSummary
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.TypeEnum">
            <summary>
            The category of statutory leave
            </summary>
            <value>The category of statutory leave</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.TypeEnum.Sick">
            <summary>
            Enum Sick for value: Sick
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.TypeEnum.Adoption">
            <summary>
            Enum Adoption for value: Adoption
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.TypeEnum.Maternity">
            <summary>
            Enum Maternity for value: Maternity
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.TypeEnum.Paternity">
            <summary>
            Enum Paternity for value: Paternity
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.TypeEnum.Sharedparental">
            <summary>
            Enum Sharedparental for value: Sharedparental
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.Type">
            <summary>
            The category of statutory leave
            </summary>
            <value>The category of statutory leave</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.StatusEnum">
            <summary>
            The status of the leave
            </summary>
            <value>The status of the leave</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.StatusEnum.Pending">
            <summary>
            Enum Pending for value: Pending
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.StatusEnum.InProgress">
            <summary>
            Enum InProgress for value: In-Progress
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.StatusEnum.Completed">
            <summary>
            Enum Completed for value: Completed
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.Status">
            <summary>
            The status of the leave
            </summary>
            <value>The status of the leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.StatutoryLeaveID">
            <summary>
            The unique identifier (guid) of a statutory leave.
            </summary>
            <value>The unique identifier (guid) of a statutory leave.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.EmployeeID">
            <summary>
            The unique identifier (guid) of the employee
            </summary>
            <value>The unique identifier (guid) of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.StartDate">
            <summary>
            The date when the leave starts
            </summary>
            <value>The date when the leave starts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.EndDate">
            <summary>
            The date when the leave ends
            </summary>
            <value>The date when the leave ends</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.IsEntitled">
            <summary>
            Whether the leave was entitled to receive payment
            </summary>
            <value>Whether the leave was entitled to receive payment</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary)">
            <summary>
            Returns true if EmployeeStatutoryLeaveSummary instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutoryLeaveSummary to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutoryLeaveSummary.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave">
            <summary>
            EmployeeStatutorySickLeave
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum">
            <summary>
            Defines EntitlementFailureReasons
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.UnableToCalculateAwe">
            <summary>
            Enum UnableToCalculateAwe for value: UnableToCalculateAwe
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.AweLowerThanLel">
            <summary>
            Enum AweLowerThanLel for value: AweLowerThanLel
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.NotQualifiedInPreviousPiw">
            <summary>
            Enum NotQualifiedInPreviousPiw for value: NotQualifiedInPreviousPiw
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.ExceededMaximumEntitlementWeeksOfSsp">
            <summary>
            Enum ExceededMaximumEntitlementWeeksOfSsp for value: ExceededMaximumEntitlementWeeksOfSsp
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.ExceededMaximumDurationOfPiw">
            <summary>
            Enum ExceededMaximumDurationOfPiw for value: ExceededMaximumDurationOfPiw
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.SufficientNoticeNotGiven">
            <summary>
            Enum SufficientNoticeNotGiven for value: SufficientNoticeNotGiven
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EntitlementFailureReasons">
            <summary>
            If the leave requested was considered \&quot;not entitled\&quot;, the reasons why are listed here.
            </summary>
            <value>If the leave requested was considered \&quot;not entitled\&quot;, the reasons why are listed here.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.StatutoryLeaveID">
            <summary>
            The unique identifier (guid) of a statutory leave
            </summary>
            <value>The unique identifier (guid) of a statutory leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EmployeeID">
            <summary>
            The unique identifier (guid) of the employee
            </summary>
            <value>The unique identifier (guid) of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.LeaveTypeID">
            <summary>
            The unique identifier (guid) of the \&quot;Statutory Sick Leave (non-pensionable)\&quot; pay item
            </summary>
            <value>The unique identifier (guid) of the \&quot;Statutory Sick Leave (non-pensionable)\&quot; pay item</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.StartDate">
            <summary>
            The date when the leave starts
            </summary>
            <value>The date when the leave starts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EndDate">
            <summary>
            The date when the leave ends
            </summary>
            <value>The date when the leave ends</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.Type">
            <summary>
            the type of statutory leave
            </summary>
            <value>the type of statutory leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.Status">
            <summary>
            the type of statutory leave
            </summary>
            <value>the type of statutory leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.WorkPattern">
            <summary>
            The days of the work week the employee is scheduled to work at the time the leave is taken
            </summary>
            <value>The days of the work week the employee is scheduled to work at the time the leave is taken</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.IsPregnancyRelated">
            <summary>
            Whether the sick leave was pregnancy related
            </summary>
            <value>Whether the sick leave was pregnancy related</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.SufficientNotice">
            <summary>
            Whether the employee provided sufficient notice and documentation as required by the employer supporting the sick leave request
            </summary>
            <value>Whether the employee provided sufficient notice and documentation as required by the employer supporting the sick leave request</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.IsEntitled">
            <summary>
            Whether the leave was entitled to receive payment
            </summary>
            <value>Whether the leave was entitled to receive payment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EntitlementWeeksRequested">
            <summary>
            The amount of requested time (in weeks)
            </summary>
            <value>The amount of requested time (in weeks)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EntitlementWeeksQualified">
            <summary>
            The amount of statutory sick leave time off (in weeks) that is available to take at the time the leave was requested
            </summary>
            <value>The amount of statutory sick leave time off (in weeks) that is available to take at the time the leave was requested</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.EntitlementWeeksRemaining">
            <summary>
            A calculated amount of time (in weeks) that remains for the statutory sick leave period
            </summary>
            <value>A calculated amount of time (in weeks) that remains for the statutory sick leave period</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.OverlapsWithOtherLeave">
            <summary>
            Whether another leave (Paternity, Shared Parental specifically) occurs during the requested leave&#39;s period. While this is allowed it could affect payment amounts
            </summary>
            <value>Whether another leave (Paternity, Shared Parental specifically) occurs during the requested leave&#39;s period. While this is allowed it could affect payment amounts</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave)">
            <summary>
            Returns true if EmployeeStatutorySickLeave instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutorySickLeave to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeave.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaveObject">
            <summary>
            EmployeeStatutorySickLeaveObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaveObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaveObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaveObject.StatutorySickLeave">
            <summary>
            Gets or Sets StatutorySickLeave
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaveObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaveObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaveObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaveObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaveObject)">
            <summary>
            Returns true if EmployeeStatutorySickLeaveObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutorySickLeaveObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaveObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaveObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaves">
            <summary>
            EmployeeStatutorySickLeaves
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaves.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaves.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaves.StatutorySickLeave">
            <summary>
            Gets or Sets StatutorySickLeave
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaves.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaves.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaves.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaves.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaves)">
            <summary>
            Returns true if EmployeeStatutorySickLeaves instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutorySickLeaves to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaves.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeStatutorySickLeaves.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax">
            <summary>
            EmployeeTax
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.TaxCode">
            <summary>
            Gets or Sets TaxCode
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.KiwiSaverContributionsEnum">
            <summary>
            Contribution Option which can be &#39;MakeContributions&#39; &#39;OptOut&#39;, &#39;OnAContributionsHoliday&#39;, &#39;OnASavingsSuspension&#39;, &#39;NotCurrentlyAKiwiSaverMember&#39; for employees without a KiwiSaver membership
            </summary>
            <value>Contribution Option which can be &#39;MakeContributions&#39; &#39;OptOut&#39;, &#39;OnAContributionsHoliday&#39;, &#39;OnASavingsSuspension&#39;, &#39;NotCurrentlyAKiwiSaverMember&#39; for employees without a KiwiSaver membership</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.KiwiSaverContributionsEnum.MakeContributions">
            <summary>
            Enum MakeContributions for value: MakeContributions
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.KiwiSaverContributionsEnum.OptOut">
            <summary>
            Enum OptOut for value: OptOut
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.KiwiSaverContributionsEnum.OnAContributionsHoliday">
            <summary>
            Enum OnAContributionsHoliday for value: OnAContributionsHoliday
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.KiwiSaverContributionsEnum.OnASavingsSuspension">
            <summary>
            Enum OnASavingsSuspension for value: OnASavingsSuspension
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.KiwiSaverContributionsEnum.NotCurrentlyAKiwiSaverMember">
            <summary>
            Enum NotCurrentlyAKiwiSaverMember for value: NotCurrentlyAKiwiSaverMember
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.KiwiSaverContributions">
            <summary>
            Contribution Option which can be &#39;MakeContributions&#39; &#39;OptOut&#39;, &#39;OnAContributionsHoliday&#39;, &#39;OnASavingsSuspension&#39;, &#39;NotCurrentlyAKiwiSaverMember&#39; for employees without a KiwiSaver membership
            </summary>
            <value>Contribution Option which can be &#39;MakeContributions&#39; &#39;OptOut&#39;, &#39;OnAContributionsHoliday&#39;, &#39;OnASavingsSuspension&#39;, &#39;NotCurrentlyAKiwiSaverMember&#39; for employees without a KiwiSaver membership</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.IrdNumber">
            <summary>
            The IRD Number.
            </summary>
            <value>The IRD Number.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.SpecialTaxRatePercentage">
            <summary>
            Special tax rate percentage.
            </summary>
            <value>Special tax rate percentage.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.HasSpecialStudentLoanRate">
            <summary>
            Does the employee has a special student loan rate?
            </summary>
            <value>Does the employee has a special student loan rate?</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.SpecialStudentLoanRatePercentage">
            <summary>
            The employee student loan rate percentage.
            </summary>
            <value>The employee student loan rate percentage.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.IsEligibleForKiwiSaver">
            <summary>
            The employee eligibility for KiwiSaver.
            </summary>
            <value>The employee eligibility for KiwiSaver.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.EsctRatePercentage">
            <summary>
            Employer superannuation contribution tax rate.
            </summary>
            <value>Employer superannuation contribution tax rate.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.KiwiSaverEmployeeContributionRatePercentage">
            <summary>
            Employee Contribution percentage.
            </summary>
            <value>Employee Contribution percentage.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.KiwiSaverEmployerContributionRatePercentage">
            <summary>
            Employer Contribution percentage.
            </summary>
            <value>Employer Contribution percentage.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.KiwiSaverEmployerSalarySacrificeContributionRatePercentage">
            <summary>
            Employer Contribution through Salary Sacrifice percentage.
            </summary>
            <value>Employer Contribution through Salary Sacrifice percentage.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.KiwiSaverOptOutDate">
            <summary>
            Opt Out Date.
            </summary>
            <value>Opt Out Date.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.KiwiSaverContributionHolidayEndDate">
            <summary>
            Contribution holiday expiry date or end date.
            </summary>
            <value>Contribution holiday expiry date or end date.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.HasStudentLoanBalance">
            <summary>
            Does the employee have a remaining student loan balance? Set a remaining balance if you have received a letter from IR.
            </summary>
            <value>Does the employee have a remaining student loan balance? Set a remaining balance if you have received a letter from IR.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.StudentLoanBalance">
            <summary>
            The employee&#39;s student loan balance shown on the letter from IR.
            </summary>
            <value>The employee&#39;s student loan balance shown on the letter from IR.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.StudentLoanAsAt">
            <summary>
            The date of the letter from IR.
            </summary>
            <value>The date of the letter from IR.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax)">
            <summary>
            Returns true if EmployeeTax instances are equal
            </summary>
            <param name="input">Instance of EmployeeTax to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTax.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTaxObject">
            <summary>
            EmployeeTaxObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTaxObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTaxObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTaxObject.EmployeeTax">
            <summary>
            Gets or Sets EmployeeTax
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTaxObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTaxObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTaxObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTaxObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTaxObject)">
            <summary>
            Returns true if EmployeeTaxObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeTaxObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTaxObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmployeeTaxObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Employment">
            <summary>
            Employment
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employment.PayrollCalendarID">
            <summary>
            Xero unique identifier for the payroll calendar of the employee
            </summary>
            <value>Xero unique identifier for the payroll calendar of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employment.PayRunCalendarID">
            <summary>
            Xero unique identifier for the payrun calendar for the employee (Deprecated in version 1.1.6)
            </summary>
            <value>Xero unique identifier for the payrun calendar for the employee (Deprecated in version 1.1.6)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Employment.StartDate">
            <summary>
            Start date of the employment (YYYY-MM-DD)
            </summary>
            <value>Start date of the employment (YYYY-MM-DD)</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employment.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employment.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employment.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employment.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Employment)">
            <summary>
            Returns true if Employment instances are equal
            </summary>
            <param name="input">Instance of Employment to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employment.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Employment.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.EmploymentObject">
            <summary>
            EmploymentObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmploymentObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmploymentObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.EmploymentObject.Employment">
            <summary>
            Gets or Sets Employment
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmploymentObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmploymentObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmploymentObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmploymentObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.EmploymentObject)">
            <summary>
            Returns true if EmploymentObject instances are equal
            </summary>
            <param name="input">Instance of EmploymentObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmploymentObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.EmploymentObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.GrossEarningsHistory">
            <summary>
            GrossEarningsHistory
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.GrossEarningsHistory.DaysPaid">
            <summary>
            Number of days the employee worked in the pay period (0 - 365)
            </summary>
            <value>Number of days the employee worked in the pay period (0 - 365)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.GrossEarningsHistory.UnpaidWeeks">
            <summary>
            Number of full weeks the employee didn&#39;t work in the pay period (0 - 52)
            </summary>
            <value>Number of full weeks the employee didn&#39;t work in the pay period (0 - 52)</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.GrossEarningsHistory.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.GrossEarningsHistory.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.GrossEarningsHistory.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.GrossEarningsHistory.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.GrossEarningsHistory)">
            <summary>
            Returns true if GrossEarningsHistory instances are equal
            </summary>
            <param name="input">Instance of GrossEarningsHistory to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.GrossEarningsHistory.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.GrossEarningsHistory.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.InvalidField">
            <summary>
            InvalidField
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.InvalidField.Name">
            <summary>
            The name of the field that caused the error
            </summary>
            <value>The name of the field that caused the error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.InvalidField.Reason">
            <summary>
            The reason the error occurred
            </summary>
            <value>The reason the error occurred</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.InvalidField.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.InvalidField.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.InvalidField.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.InvalidField.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.InvalidField)">
            <summary>
            Returns true if InvalidField instances are equal
            </summary>
            <param name="input">Instance of InvalidField to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.InvalidField.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.InvalidField.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveAccrualLine">
            <summary>
            LeaveAccrualLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveAccrualLine.LeaveTypeID">
            <summary>
            Xero identifier for the Leave type
            </summary>
            <value>Xero identifier for the Leave type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveAccrualLine.NumberOfUnits">
            <summary>
            Leave accrual number of units
            </summary>
            <value>Leave accrual number of units</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveAccrualLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveAccrualLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveAccrualLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveAccrualLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveAccrualLine)">
            <summary>
            Returns true if LeaveAccrualLine instances are equal
            </summary>
            <param name="input">Instance of LeaveAccrualLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveAccrualLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveAccrualLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine">
            <summary>
            LeaveEarningsLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.EarningsLineID">
            <summary>
            Xero identifier for payroll earnings line
            </summary>
            <value>Xero identifier for payroll earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.EarningsRateID">
            <summary>
            Xero identifier for payroll leave earnings rate
            </summary>
            <value>Xero identifier for payroll leave earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.DisplayName">
            <summary>
            name of earnings rate for display in UI
            </summary>
            <value>name of earnings rate for display in UI</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.RatePerUnit">
            <summary>
            Rate per unit for leave earnings line
            </summary>
            <value>Rate per unit for leave earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.NumberOfUnits">
            <summary>
            Leave earnings number of units
            </summary>
            <value>Leave earnings number of units</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.FixedAmount">
            <summary>
            Leave earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
            </summary>
            <value>Leave earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.Amount">
            <summary>
            The amount of the earnings line.
            </summary>
            <value>The amount of the earnings line.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.IsLinkedToTimesheet">
            <summary>
            Identifies if the leave earnings is taken from the timesheet. False for leave earnings line
            </summary>
            <value>Identifies if the leave earnings is taken from the timesheet. False for leave earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.IsAverageDailyPayRate">
            <summary>
            Identifies if the earnings is using an average daily pay rate
            </summary>
            <value>Identifies if the earnings is using an average daily pay rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.IsSystemGenerated">
            <summary>
            Flag to identify whether the earnings line is system generated or not.
            </summary>
            <value>Flag to identify whether the earnings line is system generated or not.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine)">
            <summary>
            Returns true if LeaveEarningsLine instances are equal
            </summary>
            <param name="input">Instance of LeaveEarningsLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveEarningsLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod">
            <summary>
            LeavePeriod
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.PeriodStatusEnum">
            <summary>
            Period Status
            </summary>
            <value>Period Status</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.PeriodStatusEnum.Approved">
            <summary>
            Enum Approved for value: Approved
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.PeriodStatusEnum.Completed">
            <summary>
            Enum Completed for value: Completed
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.PeriodStatus">
            <summary>
            Period Status
            </summary>
            <value>Period Status</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.PeriodStartDate">
            <summary>
            The Pay Period Start Date (YYYY-MM-DD)
            </summary>
            <value>The Pay Period Start Date (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.PeriodEndDate">
            <summary>
            The Pay Period End Date (YYYY-MM-DD)
            </summary>
            <value>The Pay Period End Date (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.NumberOfUnits">
            <summary>
            The Number of Units for the leave
            </summary>
            <value>The Number of Units for the leave</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod)">
            <summary>
            Returns true if LeavePeriod instances are equal
            </summary>
            <param name="input">Instance of LeavePeriod to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriod.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriods">
            <summary>
            LeavePeriods
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriods.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriods.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriods.Periods">
            <summary>
            Gets or Sets Periods
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriods.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriods.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriods.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriods.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriods)">
            <summary>
            Returns true if LeavePeriods instances are equal
            </summary>
            <param name="input">Instance of LeavePeriods to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriods.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeavePeriods.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType">
            <summary>
            LeaveType
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.LeaveTypeID">
            <summary>
            Xero unique identifier for the leave type
            </summary>
            <value>Xero unique identifier for the leave type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.Name">
            <summary>
            Name of the leave type
            </summary>
            <value>Name of the leave type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.IsPaidLeave">
            <summary>
            Indicate that an employee will be paid when taking this type of leave
            </summary>
            <value>Indicate that an employee will be paid when taking this type of leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.ShowOnPayslip">
            <summary>
            Indicate that a balance for this leave type to be shown on the employee’s payslips
            </summary>
            <value>Indicate that a balance for this leave type to be shown on the employee’s payslips</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to the leave type note
            </summary>
            <value>UTC timestamp of last update to the leave type note</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.IsActive">
            <summary>
            Shows whether the leave type is active or not
            </summary>
            <value>Shows whether the leave type is active or not</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType)">
            <summary>
            Returns true if LeaveType instances are equal
            </summary>
            <param name="input">Instance of LeaveType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypeObject">
            <summary>
            LeaveTypeObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypeObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypeObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypeObject.LeaveType">
            <summary>
            Gets or Sets LeaveType
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypeObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypeObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypeObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypeObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypeObject)">
            <summary>
            Returns true if LeaveTypeObject instances are equal
            </summary>
            <param name="input">Instance of LeaveTypeObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypeObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypeObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypes">
            <summary>
            LeaveTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypes.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypes.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypes._LeaveTypes">
            <summary>
            Gets or Sets _LeaveTypes
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypes.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypes.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypes.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypes.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypes)">
            <summary>
            Returns true if LeaveTypes instances are equal
            </summary>
            <param name="input">Instance of LeaveTypes to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypes.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.LeaveTypes.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Pagination">
            <summary>
            Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Pagination.Page">
            <summary>
            Gets or Sets Page
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Pagination.PageSize">
            <summary>
            Gets or Sets PageSize
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Pagination.PageCount">
            <summary>
            Gets or Sets PageCount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Pagination.ItemCount">
            <summary>
            Gets or Sets ItemCount
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Pagination.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Pagination.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Pagination.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Pagination.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Pagination)">
            <summary>
            Returns true if Pagination instances are equal
            </summary>
            <param name="input">Instance of Pagination to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Pagination.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Pagination.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine">
            <summary>
            PaymentLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine.PaymentLineID">
            <summary>
            Xero identifier for payroll payment line
            </summary>
            <value>Xero identifier for payroll payment line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine.Amount">
            <summary>
            The amount of the payment line
            </summary>
            <value>The amount of the payment line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine.AccountNumber">
            <summary>
            The account number
            </summary>
            <value>The account number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine.SortCode">
            <summary>
            The account sort code
            </summary>
            <value>The account sort code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine.AccountName">
            <summary>
            The account name
            </summary>
            <value>The account name</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine)">
            <summary>
            Returns true if PaymentLine instances are equal
            </summary>
            <param name="input">Instance of PaymentLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod">
            <summary>
            PaymentMethod
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod.PaymentMethodEnum">
            <summary>
            The payment method code
            </summary>
            <value>The payment method code</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod.PaymentMethodEnum.Cheque">
            <summary>
            Enum Cheque for value: Cheque
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod.PaymentMethodEnum.Electronically">
            <summary>
            Enum Electronically for value: Electronically
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod.PaymentMethodEnum.Manual">
            <summary>
            Enum Manual for value: Manual
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod._PaymentMethod">
            <summary>
            The payment method code
            </summary>
            <value>The payment method code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod.BankAccounts">
            <summary>
            Gets or Sets BankAccounts
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod)">
            <summary>
            Returns true if PaymentMethod instances are equal
            </summary>
            <param name="input">Instance of PaymentMethod to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethod.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethodObject">
            <summary>
            PaymentMethodObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethodObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethodObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethodObject.PaymentMethod">
            <summary>
            Gets or Sets PaymentMethod
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethodObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethodObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethodObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethodObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethodObject)">
            <summary>
            Returns true if PaymentMethodObject instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethodObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaymentMethodObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun">
            <summary>
            PayRun
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PayRunStatusEnum">
            <summary>
            Pay run status
            </summary>
            <value>Pay run status</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PayRunStatusEnum.Draft">
            <summary>
            Enum Draft for value: Draft
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PayRunStatusEnum.Posted">
            <summary>
            Enum Posted for value: Posted
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PayRunStatus">
            <summary>
            Pay run status
            </summary>
            <value>Pay run status</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PayRunTypeEnum">
            <summary>
            Pay run type
            </summary>
            <value>Pay run type</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PayRunTypeEnum.Scheduled">
            <summary>
            Enum Scheduled for value: Scheduled
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PayRunTypeEnum.Unscheduled">
            <summary>
            Enum Unscheduled for value: Unscheduled
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PayRunTypeEnum.EarlierYearUpdate">
            <summary>
            Enum EarlierYearUpdate for value: EarlierYearUpdate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PayRunType">
            <summary>
            Pay run type
            </summary>
            <value>Pay run type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.CalendarType">
            <summary>
            Gets or Sets CalendarType
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PayRunID">
            <summary>
            Xero unique identifier for the pay run
            </summary>
            <value>Xero unique identifier for the pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PayrollCalendarID">
            <summary>
            Xero unique identifier for the payroll calendar
            </summary>
            <value>Xero unique identifier for the payroll calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PeriodStartDate">
            <summary>
            Period start date of the payroll calendar
            </summary>
            <value>Period start date of the payroll calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PeriodEndDate">
            <summary>
            Period end date of the payroll calendar
            </summary>
            <value>Period end date of the payroll calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PaymentDate">
            <summary>
            Payment date of the pay run
            </summary>
            <value>Payment date of the pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.TotalCost">
            <summary>
            Total cost of the pay run
            </summary>
            <value>Total cost of the pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.TotalPay">
            <summary>
            Total pay of the pay run
            </summary>
            <value>Total pay of the pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PostedDateTime">
            <summary>
            Posted date time of the pay run
            </summary>
            <value>Posted date time of the pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.PaySlips">
            <summary>
            Gets or Sets PaySlips
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun)">
            <summary>
            Returns true if PayRun instances are equal
            </summary>
            <param name="input">Instance of PayRun to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRun.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar">
            <summary>
            PayRunCalendar
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.CalendarType">
            <summary>
            Gets or Sets CalendarType
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.PayrollCalendarID">
            <summary>
            Xero unique identifier for the payroll calendar
            </summary>
            <value>Xero unique identifier for the payroll calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.Name">
            <summary>
            Name of the calendar
            </summary>
            <value>Name of the calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.PeriodStartDate">
            <summary>
            Period start date of the calendar
            </summary>
            <value>Period start date of the calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.PeriodEndDate">
            <summary>
            Period end date of the calendar
            </summary>
            <value>Period end date of the calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.PaymentDate">
            <summary>
            Payment date of the calendar
            </summary>
            <value>Payment date of the calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.UpdatedDateUTC">
            <summary>
            UTC timestamp of the last update to the pay run calendar
            </summary>
            <value>UTC timestamp of the last update to the pay run calendar</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar)">
            <summary>
            Returns true if PayRunCalendar instances are equal
            </summary>
            <param name="input">Instance of PayRunCalendar to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendar.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendarObject">
            <summary>
            PayRunCalendarObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendarObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendarObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendarObject.PayRunCalendar">
            <summary>
            Gets or Sets PayRunCalendar
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendarObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendarObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendarObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendarObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendarObject)">
            <summary>
            Returns true if PayRunCalendarObject instances are equal
            </summary>
            <param name="input">Instance of PayRunCalendarObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendarObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendarObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendars">
            <summary>
            PayRunCalendars
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendars.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendars.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendars._PayRunCalendars">
            <summary>
            Gets or Sets _PayRunCalendars
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendars.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendars.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendars.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendars.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendars)">
            <summary>
            Returns true if PayRunCalendars instances are equal
            </summary>
            <param name="input">Instance of PayRunCalendars to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendars.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunCalendars.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunObject">
            <summary>
            PayRunObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunObject.PayRun">
            <summary>
            Gets or Sets PayRun
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunObject)">
            <summary>
            Returns true if PayRunObject instances are equal
            </summary>
            <param name="input">Instance of PayRunObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRunObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRuns">
            <summary>
            PayRuns
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRuns.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRuns.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRuns._PayRuns">
            <summary>
            Gets or Sets _PayRuns
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRuns.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRuns.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRuns.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRuns.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.PayRuns)">
            <summary>
            Returns true if PayRuns instances are equal
            </summary>
            <param name="input">Instance of PayRuns to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRuns.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PayRuns.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip">
            <summary>
            PaySlip
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.PaymentMethodEnum">
            <summary>
            The payment method code
            </summary>
            <value>The payment method code</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.PaymentMethodEnum.Cheque">
            <summary>
            Enum Cheque for value: Cheque
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.PaymentMethodEnum.Electronically">
            <summary>
            Enum Electronically for value: Electronically
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.PaymentMethodEnum.Manual">
            <summary>
            Enum Manual for value: Manual
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.PaymentMethod">
            <summary>
            The payment method code
            </summary>
            <value>The payment method code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.PaySlipID">
            <summary>
            The Xero identifier for a PaySlip
            </summary>
            <value>The Xero identifier for a PaySlip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.EmployeeID">
            <summary>
            The Xero identifier for payroll employee
            </summary>
            <value>The Xero identifier for payroll employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.PayRunID">
            <summary>
            The Xero identifier for the associated payrun
            </summary>
            <value>The Xero identifier for the associated payrun</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.LastEdited">
            <summary>
            The date payslip was last updated
            </summary>
            <value>The date payslip was last updated</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.FirstName">
            <summary>
            Employee first name
            </summary>
            <value>Employee first name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.LastName">
            <summary>
            Employee last name
            </summary>
            <value>Employee last name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.TotalEarnings">
            <summary>
            Total earnings before any deductions. Same as gross earnings for NZ.
            </summary>
            <value>Total earnings before any deductions. Same as gross earnings for NZ.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.GrossEarnings">
            <summary>
            Total earnings before any deductions. Same as total earnings for NZ.
            </summary>
            <value>Total earnings before any deductions. Same as total earnings for NZ.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.TotalPay">
            <summary>
            The employee net pay
            </summary>
            <value>The employee net pay</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.TotalEmployerTaxes">
            <summary>
            The employer&#39;s tax obligation
            </summary>
            <value>The employer&#39;s tax obligation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.TotalEmployeeTaxes">
            <summary>
            The part of an employee&#39;s earnings that is deducted for tax purposes
            </summary>
            <value>The part of an employee&#39;s earnings that is deducted for tax purposes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.TotalDeductions">
            <summary>
            Total amount subtracted from an employee&#39;s earnings to reach total pay
            </summary>
            <value>Total amount subtracted from an employee&#39;s earnings to reach total pay</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.TotalReimbursements">
            <summary>
            Total reimbursements are nontaxable payments to an employee used to repay out-of-pocket expenses when the person incurs those expenses through employment
            </summary>
            <value>Total reimbursements are nontaxable payments to an employee used to repay out-of-pocket expenses when the person incurs those expenses through employment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.TotalStatutoryDeductions">
            <summary>
            Total amounts required by law to subtract from the employee&#39;s earnings
            </summary>
            <value>Total amounts required by law to subtract from the employee&#39;s earnings</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.TotalSuperannuation">
            <summary>
            Benefits (also called fringe benefits, perquisites or perks) are various non-earnings compensations provided to employees in addition to their normal earnings or salaries
            </summary>
            <value>Benefits (also called fringe benefits, perquisites or perks) are various non-earnings compensations provided to employees in addition to their normal earnings or salaries</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.BacsHash">
            <summary>
            BACS Service User Number
            </summary>
            <value>BACS Service User Number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.EarningsLines">
            <summary>
            Gets or Sets EarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.LeaveEarningsLines">
            <summary>
            Gets or Sets LeaveEarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.TimesheetEarningsLines">
            <summary>
            Gets or Sets TimesheetEarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.DeductionLines">
            <summary>
            Gets or Sets DeductionLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.ReimbursementLines">
            <summary>
            Gets or Sets ReimbursementLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.LeaveAccrualLines">
            <summary>
            Gets or Sets LeaveAccrualLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.SuperannuationLines">
            <summary>
            Gets or Sets SuperannuationLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.PaymentLines">
            <summary>
            Gets or Sets PaymentLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.EmployeeTaxLines">
            <summary>
            Gets or Sets EmployeeTaxLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.EmployerTaxLines">
            <summary>
            Gets or Sets EmployerTaxLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.StatutoryDeductionLines">
            <summary>
            Gets or Sets StatutoryDeductionLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.TaxSettings">
            <summary>
            Gets or Sets TaxSettings
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.GrossEarningsHistory">
            <summary>
            Gets or Sets GrossEarningsHistory
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip)">
            <summary>
            Returns true if PaySlip instances are equal
            </summary>
            <param name="input">Instance of PaySlip to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlip.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlipObject">
            <summary>
            PaySlipObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlipObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlipObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlipObject.PaySlip">
            <summary>
            Gets or Sets PaySlip
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlipObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlipObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlipObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlipObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlipObject)">
            <summary>
            Returns true if PaySlipObject instances are equal
            </summary>
            <param name="input">Instance of PaySlipObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlipObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlipObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlips">
            <summary>
            PaySlips
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlips.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlips.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlips._PaySlips">
            <summary>
            Gets or Sets _PaySlips
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlips.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlips.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlips.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlips.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlips)">
            <summary>
            Returns true if PaySlips instances are equal
            </summary>
            <param name="input">Instance of PaySlips to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlips.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.PaySlips.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem">
            <summary>
            The object returned for a bad request
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem.Type">
            <summary>
            The type of error format
            </summary>
            <value>The type of error format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem.Title">
            <summary>
            The type of the error
            </summary>
            <value>The type of the error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem.Status">
            <summary>
            The error status code
            </summary>
            <value>The error status code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem.Detail">
            <summary>
            A description of the error
            </summary>
            <value>A description of the error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem.Instance">
            <summary>
            Gets or Sets Instance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem.InvalidFields">
            <summary>
            Gets or Sets InvalidFields
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Problem)">
            <summary>
            Returns true if Problem instances are equal
            </summary>
            <param name="input">Instance of Problem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Problem.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement">
            <summary>
            Reimbursement
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.ReimbursementCategoryEnum">
            <summary>
            See Reimbursement Categories
            </summary>
            <value>See Reimbursement Categories</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.ReimbursementCategoryEnum.GST">
            <summary>
            Enum GST for value: GST
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.ReimbursementCategoryEnum.NoGST">
            <summary>
            Enum NoGST for value: NoGST
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.ReimbursementCategoryEnum.GSTInclusive">
            <summary>
            Enum GSTInclusive for value: GSTInclusive
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.ReimbursementCategory">
            <summary>
            See Reimbursement Categories
            </summary>
            <value>See Reimbursement Categories</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.CalculationTypeEnum">
            <summary>
            See Calculation Types
            </summary>
            <value>See Calculation Types</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.CalculationTypeEnum.Unknown">
            <summary>
            Enum Unknown for value: Unknown
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.CalculationTypeEnum.FixedAmount">
            <summary>
            Enum FixedAmount for value: FixedAmount
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.CalculationTypeEnum.RatePerUnit">
            <summary>
            Enum RatePerUnit for value: RatePerUnit
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.CalculationType">
            <summary>
            See Calculation Types
            </summary>
            <value>See Calculation Types</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.StandardTypeOfUnitsEnum">
            <summary>
            Optional Type Of Units. Applicable when calculation type is Rate Per Unit
            </summary>
            <value>Optional Type Of Units. Applicable when calculation type is Rate Per Unit</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.StandardTypeOfUnitsEnum.Hours">
            <summary>
            Enum Hours for value: Hours
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.StandardTypeOfUnitsEnum.Km">
            <summary>
            Enum Km for value: km
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.StandardTypeOfUnits">
            <summary>
            Optional Type Of Units. Applicable when calculation type is Rate Per Unit
            </summary>
            <value>Optional Type Of Units. Applicable when calculation type is Rate Per Unit</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.ReimbursementID">
            <summary>
            Xero unique identifier for a reimbursement
            </summary>
            <value>Xero unique identifier for a reimbursement</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.Name">
            <summary>
            Name of the reimbursement
            </summary>
            <value>Name of the reimbursement</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.AccountID">
            <summary>
            Xero unique identifier for the account used for the reimbursement
            </summary>
            <value>Xero unique identifier for the account used for the reimbursement</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.CurrentRecord">
            <summary>
            Indicates that whether the reimbursement is active
            </summary>
            <value>Indicates that whether the reimbursement is active</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.StandardAmount">
            <summary>
            Optional Fixed Rate Amount. Applicable when calculation type is Fixed Amount
            </summary>
            <value>Optional Fixed Rate Amount. Applicable when calculation type is Fixed Amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.StandardRatePerUnit">
            <summary>
            Optional Rate Per Unit. Applicable when calculation type is Rate Per Unit
            </summary>
            <value>Optional Rate Per Unit. Applicable when calculation type is Rate Per Unit</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement)">
            <summary>
            Returns true if Reimbursement instances are equal
            </summary>
            <param name="input">Instance of Reimbursement to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursement.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine">
            <summary>
            ReimbursementLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine.ReimbursementTypeID">
            <summary>
            Xero identifier for payroll reimbursement
            </summary>
            <value>Xero identifier for payroll reimbursement</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine.Description">
            <summary>
            Reimbursement line description
            </summary>
            <value>Reimbursement line description</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine.Amount">
            <summary>
            Reimbursement amount
            </summary>
            <value>Reimbursement amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine.RatePerUnit">
            <summary>
            Rate per unit for leave earnings line
            </summary>
            <value>Rate per unit for leave earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine.NumberOfUnits">
            <summary>
            Leave earnings number of units
            </summary>
            <value>Leave earnings number of units</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine)">
            <summary>
            Returns true if ReimbursementLine instances are equal
            </summary>
            <param name="input">Instance of ReimbursementLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementObject">
            <summary>
            ReimbursementObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementObject.Reimbursement">
            <summary>
            Gets or Sets Reimbursement
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementObject)">
            <summary>
            Returns true if ReimbursementObject instances are equal
            </summary>
            <param name="input">Instance of ReimbursementObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.ReimbursementObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursements">
            <summary>
            Reimbursements
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursements.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursements.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursements._Reimbursements">
            <summary>
            Gets or Sets _Reimbursements
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursements.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursements.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursements.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursements.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursements)">
            <summary>
            Returns true if Reimbursements instances are equal
            </summary>
            <param name="input">Instance of Reimbursements to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursements.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Reimbursements.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage">
            <summary>
            SalaryAndWage
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.StatusEnum">
            <summary>
            The current status of the corresponding salary and wages
            </summary>
            <value>The current status of the corresponding salary and wages</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.StatusEnum.Active">
            <summary>
            Enum Active for value: Active
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.StatusEnum.Pending">
            <summary>
            Enum Pending for value: Pending
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.StatusEnum.History">
            <summary>
            Enum History for value: History
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.Status">
            <summary>
            The current status of the corresponding salary and wages
            </summary>
            <value>The current status of the corresponding salary and wages</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.PaymentTypeEnum">
            <summary>
            The type of the payment of the corresponding salary and wages
            </summary>
            <value>The type of the payment of the corresponding salary and wages</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.PaymentTypeEnum.Salary">
            <summary>
            Enum Salary for value: Salary
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.PaymentTypeEnum.Hourly">
            <summary>
            Enum Hourly for value: Hourly
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.PaymentType">
            <summary>
            The type of the payment of the corresponding salary and wages
            </summary>
            <value>The type of the payment of the corresponding salary and wages</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.SalaryAndWagesID">
            <summary>
            Xero unique identifier for a salary and wages record
            </summary>
            <value>Xero unique identifier for a salary and wages record</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.EarningsRateID">
            <summary>
            Xero unique identifier for an earnings rate
            </summary>
            <value>Xero unique identifier for an earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.NumberOfUnitsPerWeek">
            <summary>
            The Number of Units per week for the corresponding salary and wages
            </summary>
            <value>The Number of Units per week for the corresponding salary and wages</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.RatePerUnit">
            <summary>
            The rate of each unit for the corresponding salary and wages
            </summary>
            <value>The rate of each unit for the corresponding salary and wages</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.NumberOfUnitsPerDay">
            <summary>
            The Number of Units per day for the corresponding salary and wages
            </summary>
            <value>The Number of Units per day for the corresponding salary and wages</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.DaysPerWeek">
            <summary>
            The days per week for the salary.
            </summary>
            <value>The days per week for the salary.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.EffectiveFrom">
            <summary>
            The effective date of the corresponding salary and wages
            </summary>
            <value>The effective date of the corresponding salary and wages</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.AnnualSalary">
            <summary>
            The annual salary
            </summary>
            <value>The annual salary</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage)">
            <summary>
            Returns true if SalaryAndWage instances are equal
            </summary>
            <param name="input">Instance of SalaryAndWage to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWage.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWageObject">
            <summary>
            SalaryAndWageObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWageObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWageObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWageObject.SalaryAndWages">
            <summary>
            Gets or Sets SalaryAndWages
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWageObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWageObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWageObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWageObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWageObject)">
            <summary>
            Returns true if SalaryAndWageObject instances are equal
            </summary>
            <param name="input">Instance of SalaryAndWageObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWageObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWageObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWages">
            <summary>
            SalaryAndWages
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWages.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWages.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWages._SalaryAndWages">
            <summary>
            Gets or Sets _SalaryAndWages
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWages.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWages.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWages.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWages.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWages)">
            <summary>
            Returns true if SalaryAndWages instances are equal
            </summary>
            <param name="input">Instance of SalaryAndWages to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWages.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SalaryAndWages.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Settings.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Settings.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Settings._Settings">
            <summary>
            Gets or Sets _Settings
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Settings.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Settings.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Settings.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Settings.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Settings)">
            <summary>
            Returns true if Settings instances are equal
            </summary>
            <param name="input">Instance of Settings to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Settings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Settings.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction">
            <summary>
            StatutoryDeduction
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction.StatutoryDeductionCategory">
            <summary>
            Gets or Sets StatutoryDeductionCategory
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction.Id">
            <summary>
            The Xero identifier for earnings order
            </summary>
            <value>The Xero identifier for earnings order</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction.Name">
            <summary>
            Name of the earnings order
            </summary>
            <value>Name of the earnings order</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction.LiabilityAccountId">
            <summary>
            Xero identifier for Liability Account
            </summary>
            <value>Xero identifier for Liability Account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction.CurrentRecord">
            <summary>
            Identifier of a record is active or not.
            </summary>
            <value>Identifier of a record is active or not.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction)">
            <summary>
            Returns true if StatutoryDeduction instances are equal
            </summary>
            <param name="input">Instance of StatutoryDeduction to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeduction.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionCategory">
            <summary>
            Statutory Deduction Category
            </summary>
            <value>Statutory Deduction Category</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionCategory.PriorityOrder">
            <summary>
            Enum PriorityOrder for value: PriorityOrder
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionCategory.NonPriorityOrder">
            <summary>
            Enum NonPriorityOrder for value: NonPriorityOrder
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionCategory.TableBased">
            <summary>
            Enum TableBased for value: TableBased
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionCategory.ChildSupport">
            <summary>
            Enum ChildSupport for value: ChildSupport
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionCategory.CourtFines">
            <summary>
            Enum CourtFines for value: CourtFines
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionCategory.InlandRevenueArrears">
            <summary>
            Enum InlandRevenueArrears for value: InlandRevenueArrears
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionCategory.MsdRepayments">
            <summary>
            Enum MsdRepayments for value: MsdRepayments
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionCategory.StudentLoan">
            <summary>
            Enum StudentLoan for value: StudentLoan
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionCategory.AdditionalStudentLoan">
            <summary>
            Enum AdditionalStudentLoan for value: AdditionalStudentLoan
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionCategory.VoluntaryStudentLoan">
            <summary>
            Enum VoluntaryStudentLoan for value: VoluntaryStudentLoan
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionCategory.KiwiSaver">
            <summary>
            Enum KiwiSaver for value: KiwiSaver
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionLine">
            <summary>
            StatutoryDeductionLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionLine.StatutoryDeductionTypeID">
            <summary>
            Xero identifier for payroll statutory deduction type
            </summary>
            <value>Xero identifier for payroll statutory deduction type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionLine.Amount">
            <summary>
            The amount of the statutory deduction line
            </summary>
            <value>The amount of the statutory deduction line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionLine.FixedAmount">
            <summary>
            Fixed Amount
            </summary>
            <value>Fixed Amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionLine.ManualAdjustment">
            <summary>
            Identifies if the tax line is a manual adjustment
            </summary>
            <value>Identifies if the tax line is a manual adjustment</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionLine)">
            <summary>
            Returns true if StatutoryDeductionLine instances are equal
            </summary>
            <param name="input">Instance of StatutoryDeductionLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionObject">
            <summary>
            StatutoryDeductionObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionObject.StatutoryDeduction">
            <summary>
            Gets or Sets StatutoryDeduction
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionObject)">
            <summary>
            Returns true if StatutoryDeductionObject instances are equal
            </summary>
            <param name="input">Instance of StatutoryDeductionObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductionObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductions">
            <summary>
            StatutoryDeductions
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductions.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductions.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductions._StatutoryDeductions">
            <summary>
            Gets or Sets _StatutoryDeductions
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductions.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductions.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductions.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductions.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductions)">
            <summary>
            Returns true if StatutoryDeductions instances are equal
            </summary>
            <param name="input">Instance of StatutoryDeductions to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductions.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.StatutoryDeductions.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine">
            <summary>
            SuperannuationLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine.SuperannuationTypeID">
            <summary>
            Xero identifier for payroll superannuation type
            </summary>
            <value>Xero identifier for payroll superannuation type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine.DisplayName">
            <summary>
            Benefit display name
            </summary>
            <value>Benefit display name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine.Amount">
            <summary>
            The amount of the superannuation line
            </summary>
            <value>The amount of the superannuation line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine.FixedAmount">
            <summary>
            Superannuation fixed amount
            </summary>
            <value>Superannuation fixed amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine.Percentage">
            <summary>
            Superannuation rate percentage
            </summary>
            <value>Superannuation rate percentage</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine.ManualAdjustment">
            <summary>
            manual adjustment made
            </summary>
            <value>manual adjustment made</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine)">
            <summary>
            Returns true if SuperannuationLine instances are equal
            </summary>
            <param name="input">Instance of SuperannuationLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationObject">
            <summary>
            SuperannuationObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationObject.Benefit">
            <summary>
            Gets or Sets Benefit
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationObject)">
            <summary>
            Returns true if SuperannuationObject instances are equal
            </summary>
            <param name="input">Instance of SuperannuationObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.SuperannuationObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Superannuations">
            <summary>
            Superannuations
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Superannuations.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Superannuations.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Superannuations.Benefits">
            <summary>
            Gets or Sets Benefits
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Superannuations.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Superannuations.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Superannuations.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Superannuations.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Superannuations)">
            <summary>
            Returns true if Superannuations instances are equal
            </summary>
            <param name="input">Instance of Superannuations to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Superannuations.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Superannuations.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode">
            <summary>
            Tax codes used for employee tax
            </summary>
            <value>Tax codes used for employee tax</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.ND">
            <summary>
            Enum ND for value: ND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.M">
            <summary>
            Enum M for value: M
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.ME">
            <summary>
            Enum ME for value: ME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.MSL">
            <summary>
            Enum MSL for value: MSL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.MESL">
            <summary>
            Enum MESL for value: MESL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.SB">
            <summary>
            Enum SB for value: SB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.S">
            <summary>
            Enum S for value: S
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.SH">
            <summary>
            Enum SH for value: SH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.ST">
            <summary>
            Enum ST for value: ST
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.SBSL">
            <summary>
            Enum SBSL for value: SBSL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.SSL">
            <summary>
            Enum SSL for value: SSL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.SHSL">
            <summary>
            Enum SHSL for value: SHSL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.STSL">
            <summary>
            Enum STSL for value: STSL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.WT">
            <summary>
            Enum WT for value: WT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.CAE">
            <summary>
            Enum CAE for value: CAE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.EDW">
            <summary>
            Enum EDW for value: EDW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.NSW">
            <summary>
            Enum NSW for value: NSW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.STC">
            <summary>
            Enum STC for value: STC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxCode.STCSL">
            <summary>
            Enum STCSL for value: STCSL
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine">
            <summary>
            TaxLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine.TaxLineID">
            <summary>
            Xero identifier for payroll tax line
            </summary>
            <value>Xero identifier for payroll tax line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine.Description">
            <summary>
            Tax line description
            </summary>
            <value>Tax line description</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine.Amount">
            <summary>
            The amount of the tax line
            </summary>
            <value>The amount of the tax line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine.GlobalTaxTypeID">
            <summary>
            Tax type ID
            </summary>
            <value>Tax type ID</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine.ManualAdjustment">
            <summary>
            Identifies if the tax line is a manual adjustment
            </summary>
            <value>Identifies if the tax line is a manual adjustment</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine)">
            <summary>
            Returns true if TaxLine instances are equal
            </summary>
            <param name="input">Instance of TaxLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings">
            <summary>
            TaxSettings
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.PeriodTypeEnum">
            <summary>
            The type of period (\&quot;weeks\&quot; or \&quot;months\&quot;)
            </summary>
            <value>The type of period (\&quot;weeks\&quot; or \&quot;months\&quot;)</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.PeriodTypeEnum.Weeks">
            <summary>
            Enum Weeks for value: weeks
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.PeriodTypeEnum.Months">
            <summary>
            Enum Months for value: months
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.PeriodType">
            <summary>
            The type of period (\&quot;weeks\&quot; or \&quot;months\&quot;)
            </summary>
            <value>The type of period (\&quot;weeks\&quot; or \&quot;months\&quot;)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.TaxCode">
            <summary>
            Gets or Sets TaxCode
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.PeriodUnits">
            <summary>
            The number of units for the period type
            </summary>
            <value>The number of units for the period type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.SpecialTaxRate">
            <summary>
            Tax rate for STC and WT
            </summary>
            <value>Tax rate for STC and WT</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.LumpSumTaxCode">
            <summary>
            Tax code for a lump sum amount
            </summary>
            <value>Tax code for a lump sum amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.LumpSumAmount">
            <summary>
            The total of the lump sum amount
            </summary>
            <value>The total of the lump sum amount</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings)">
            <summary>
            Returns true if TaxSettings instances are equal
            </summary>
            <param name="input">Instance of TaxSettings to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TaxSettings.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet">
            <summary>
            Timesheet
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.StatusEnum">
            <summary>
            Status of the timesheet
            </summary>
            <value>Status of the timesheet</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.StatusEnum.Draft">
            <summary>
            Enum Draft for value: Draft
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.StatusEnum.Approved">
            <summary>
            Enum Approved for value: Approved
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.StatusEnum.Completed">
            <summary>
            Enum Completed for value: Completed
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.StatusEnum.Requested">
            <summary>
            Enum Requested for value: Requested
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.Status">
            <summary>
            Status of the timesheet
            </summary>
            <value>Status of the timesheet</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.TimesheetID">
            <summary>
            The Xero identifier for a Timesheet
            </summary>
            <value>The Xero identifier for a Timesheet</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.PayrollCalendarID">
            <summary>
            The Xero identifier for the Payroll Calendar that the Timesheet applies to
            </summary>
            <value>The Xero identifier for the Payroll Calendar that the Timesheet applies to</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.EmployeeID">
            <summary>
            The Xero identifier for the Employee that the Timesheet is for
            </summary>
            <value>The Xero identifier for the Employee that the Timesheet is for</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.StartDate">
            <summary>
            The Start Date of the Timesheet period (YYYY-MM-DD)
            </summary>
            <value>The Start Date of the Timesheet period (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.EndDate">
            <summary>
            The End Date of the Timesheet period (YYYY-MM-DD)
            </summary>
            <value>The End Date of the Timesheet period (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.TotalHours">
            <summary>
            The Total Hours of the Timesheet
            </summary>
            <value>The Total Hours of the Timesheet</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.UpdatedDateUTC">
            <summary>
            The UTC date time that the Timesheet was last updated
            </summary>
            <value>The UTC date time that the Timesheet was last updated</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.TimesheetLines">
            <summary>
            Gets or Sets TimesheetLines
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet)">
            <summary>
            Returns true if Timesheet instances are equal
            </summary>
            <param name="input">Instance of Timesheet to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheet.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine">
            <summary>
            TimesheetEarningsLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.EarningsLineID">
            <summary>
            Xero identifier for payroll earnings line
            </summary>
            <value>Xero identifier for payroll earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.EarningsRateID">
            <summary>
            Xero identifier for payroll leave earnings rate
            </summary>
            <value>Xero identifier for payroll leave earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.DisplayName">
            <summary>
            name of earnings rate for display in UI
            </summary>
            <value>name of earnings rate for display in UI</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.RatePerUnit">
            <summary>
            Rate per unit for leave earnings line
            </summary>
            <value>Rate per unit for leave earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.NumberOfUnits">
            <summary>
            Leave earnings number of units
            </summary>
            <value>Leave earnings number of units</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.FixedAmount">
            <summary>
            Leave earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
            </summary>
            <value>Leave earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.Amount">
            <summary>
            The amount of the earnings line.
            </summary>
            <value>The amount of the earnings line.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.IsLinkedToTimesheet">
            <summary>
            Identifies if the leave earnings is taken from the timesheet. False for leave earnings line
            </summary>
            <value>Identifies if the leave earnings is taken from the timesheet. False for leave earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.IsAverageDailyPayRate">
            <summary>
            Identifies if the earnings is using an average daily pay rate
            </summary>
            <value>Identifies if the earnings is using an average daily pay rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.IsSystemGenerated">
            <summary>
            Flag to identify whether the earnings line is system generated or not.
            </summary>
            <value>Flag to identify whether the earnings line is system generated or not.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine)">
            <summary>
            Returns true if TimesheetEarningsLine instances are equal
            </summary>
            <param name="input">Instance of TimesheetEarningsLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetEarningsLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine">
            <summary>
            TimesheetLine
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine.TimesheetLineID">
            <summary>
            The Xero identifier for a Timesheet Line
            </summary>
            <value>The Xero identifier for a Timesheet Line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine.Date">
            <summary>
            The Date that this Timesheet Line is for (YYYY-MM-DD)
            </summary>
            <value>The Date that this Timesheet Line is for (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine.EarningsRateID">
            <summary>
            The Xero identifier for the Earnings Rate that the Timesheet is for
            </summary>
            <value>The Xero identifier for the Earnings Rate that the Timesheet is for</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine.TrackingItemID">
            <summary>
            The Xero identifier for the Tracking Item that the Timesheet is for
            </summary>
            <value>The Xero identifier for the Tracking Item that the Timesheet is for</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine.NumberOfUnits">
            <summary>
            The Number of Units of the Timesheet Line
            </summary>
            <value>The Number of Units of the Timesheet Line</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine)">
            <summary>
            Returns true if TimesheetLine instances are equal
            </summary>
            <param name="input">Instance of TimesheetLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLineObject">
            <summary>
            TimesheetLineObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLineObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLineObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLineObject.TimesheetLine">
            <summary>
            Gets or Sets TimesheetLine
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLineObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLineObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLineObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLineObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLineObject)">
            <summary>
            Returns true if TimesheetLineObject instances are equal
            </summary>
            <param name="input">Instance of TimesheetLineObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLineObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetLineObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetObject">
            <summary>
            TimesheetObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetObject.Timesheet">
            <summary>
            Gets or Sets Timesheet
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetObject)">
            <summary>
            Returns true if TimesheetObject instances are equal
            </summary>
            <param name="input">Instance of TimesheetObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TimesheetObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheets">
            <summary>
            Timesheets
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheets.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheets.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheets._Timesheets">
            <summary>
            Gets or Sets _Timesheets
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheets.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheets.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheets.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheets.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheets)">
            <summary>
            Returns true if Timesheets instances are equal
            </summary>
            <param name="input">Instance of Timesheets to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheets.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.Timesheets.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategories">
            <summary>
            TrackingCategories
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategories.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategories.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategories._TrackingCategories">
            <summary>
            Gets or Sets _TrackingCategories
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategories.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategories.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategories.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategories.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategories)">
            <summary>
            Returns true if TrackingCategories instances are equal
            </summary>
            <param name="input">Instance of TrackingCategories to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategories.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategories.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategory">
            <summary>
            TrackingCategory
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategory.EmployeeGroupsTrackingCategoryID">
            <summary>
            The Xero identifier for Employee groups tracking category.
            </summary>
            <value>The Xero identifier for Employee groups tracking category.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategory.TimesheetTrackingCategoryID">
            <summary>
            The Xero identifier for Timesheet tracking category.
            </summary>
            <value>The Xero identifier for Timesheet tracking category.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategory.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategory.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategory.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategory.Equals(Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategory)">
            <summary>
            Returns true if TrackingCategory instances are equal
            </summary>
            <param name="input">Instance of TrackingCategory to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategory.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollNz.TrackingCategory.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Account">
            <summary>
            Account
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.TypeEnum">
            <summary>
            The assigned AccountType
            </summary>
            <value>The assigned AccountType</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.TypeEnum.BANK">
            <summary>
            Enum BANK for value: BANK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.TypeEnum.EMPLOYERSNIC">
            <summary>
            Enum EMPLOYERSNIC for value: EMPLOYERSNIC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.TypeEnum.NICLIABILITY">
            <summary>
            Enum NICLIABILITY for value: NICLIABILITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.TypeEnum.PAYEECONTRIBUTION">
            <summary>
            Enum PAYEECONTRIBUTION for value: PAYEECONTRIBUTION
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.TypeEnum.PAYELIABILITY">
            <summary>
            Enum PAYELIABILITY for value: PAYELIABILITY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.TypeEnum.WAGESPAYABLE">
            <summary>
            Enum WAGESPAYABLE for value: WAGESPAYABLE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.TypeEnum.WAGESEXPENSE">
            <summary>
            Enum WAGESEXPENSE for value: WAGESEXPENSE
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.Type">
            <summary>
            The assigned AccountType
            </summary>
            <value>The assigned AccountType</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.AccountID">
            <summary>
            The Xero identifier for Settings.
            </summary>
            <value>The Xero identifier for Settings.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.Code">
            <summary>
            A unique 3 digit number for each Account
            </summary>
            <value>A unique 3 digit number for each Account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.Name">
            <summary>
            Name of the Account.
            </summary>
            <value>Name of the Account.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Account)">
            <summary>
            Returns true if Account instances are equal
            </summary>
            <param name="input">Instance of Account to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Account.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Accounts">
            <summary>
            Accounts
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Accounts._Accounts">
            <summary>
            Gets or Sets _Accounts
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Accounts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Accounts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Accounts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Accounts.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Accounts)">
            <summary>
            Returns true if Accounts instances are equal
            </summary>
            <param name="input">Instance of Accounts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Accounts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Accounts.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Address.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Address" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Address.AddressLine1">
            <summary>
            Address line 1 for employee home address
            </summary>
            <value>Address line 1 for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Address.AddressLine2">
            <summary>
            Address line 2 for employee home address
            </summary>
            <value>Address line 2 for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Address.City">
            <summary>
            Suburb for employee home address
            </summary>
            <value>Suburb for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Address.PostCode">
            <summary>
            PostCode for employee home address
            </summary>
            <value>PostCode for employee home address</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Address.CountryName">
            <summary>
            Country of HomeAddress
            </summary>
            <value>Country of HomeAddress</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Address.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Address.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Address.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Address.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Address)">
            <summary>
            Returns true if Address instances are equal
            </summary>
            <param name="input">Instance of Address to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Address.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Address.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount">
            <summary>
            BankAccount
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount.AccountName">
            <summary>
            Bank account name (max length &#x3D; 32)
            </summary>
            <value>Bank account name (max length &#x3D; 32)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount.AccountNumber">
            <summary>
            Bank account number (digits only; max length &#x3D; 8)
            </summary>
            <value>Bank account number (digits only; max length &#x3D; 8)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount.SortCode">
            <summary>
            Bank account sort code (6 digits)
            </summary>
            <value>Bank account sort code (6 digits)</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount)">
            <summary>
            Returns true if BankAccount instances are equal
            </summary>
            <param name="input">Instance of BankAccount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BankAccount.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit">
            <summary>
            Benefit
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.CategoryEnum">
            <summary>
            Category type of the employer pension
            </summary>
            <value>Category type of the employer pension</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.CategoryEnum.StakeholderPension">
            <summary>
            Enum StakeholderPension for value: StakeholderPension
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.CategoryEnum.Other">
            <summary>
            Enum Other for value: Other
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.Category">
            <summary>
            Category type of the employer pension
            </summary>
            <value>Category type of the employer pension</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.CalculationTypeEnum">
            <summary>
            Calculation Type of the employer pension (FixedAmount or PercentageOfGross).
            </summary>
            <value>Calculation Type of the employer pension (FixedAmount or PercentageOfGross).</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.CalculationTypeEnum.FixedAmount">
            <summary>
            Enum FixedAmount for value: FixedAmount
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.CalculationTypeEnum.PercentageOfGross">
            <summary>
            Enum PercentageOfGross for value: PercentageOfGross
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.CalculationType">
            <summary>
            Calculation Type of the employer pension (FixedAmount or PercentageOfGross).
            </summary>
            <value>Calculation Type of the employer pension (FixedAmount or PercentageOfGross).</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.Id">
            <summary>
            unique identifier in Xero
            </summary>
            <value>unique identifier in Xero</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.Name">
            <summary>
            Name of the employer pension
            </summary>
            <value>Name of the employer pension</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.LiabilityAccountId">
            <summary>
            Xero identifier for Liability Account
            </summary>
            <value>Xero identifier for Liability Account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.ExpenseAccountId">
            <summary>
            Xero identifier for Expense Account
            </summary>
            <value>Xero identifier for Expense Account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.StandardAmount">
            <summary>
            Standard amount of the employer pension
            </summary>
            <value>Standard amount of the employer pension</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.Percentage">
            <summary>
            Percentage of gross of the employer pension
            </summary>
            <value>Percentage of gross of the employer pension</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.CurrentRecord">
            <summary>
            Identifier of a record is active or not.
            </summary>
            <value>Identifier of a record is active or not.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.SubjectToNIC">
            <summary>
            Identifier of subject To NIC
            </summary>
            <value>Identifier of subject To NIC</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.SubjectToPension">
            <summary>
            Identifier of subject To pension
            </summary>
            <value>Identifier of subject To pension</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.SubjectToTax">
            <summary>
            Identifier of subject To Tax
            </summary>
            <value>Identifier of subject To Tax</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.IsCalculatingOnQualifyingEarnings">
            <summary>
            Identifier of calculating on qualifying earnings
            </summary>
            <value>Identifier of calculating on qualifying earnings</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.ShowBalanceToEmployee">
            <summary>
            display the balance to employee
            </summary>
            <value>display the balance to employee</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit)">
            <summary>
            Returns true if Benefit instances are equal
            </summary>
            <param name="input">Instance of Benefit to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefit.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine">
            <summary>
            BenefitLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine.BenefitTypeID">
            <summary>
            Xero identifier for payroll benefit type
            </summary>
            <value>Xero identifier for payroll benefit type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine.DisplayName">
            <summary>
            Benefit display name
            </summary>
            <value>Benefit display name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine.Amount">
            <summary>
            The amount of the benefit line.
            </summary>
            <value>The amount of the benefit line.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine.FixedAmount">
            <summary>
            Benefit fixed amount
            </summary>
            <value>Benefit fixed amount</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine.Percentage">
            <summary>
            Benefit rate percentage
            </summary>
            <value>Benefit rate percentage</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine)">
            <summary>
            Returns true if BenefitLine instances are equal
            </summary>
            <param name="input">Instance of BenefitLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitObject">
            <summary>
            BenefitObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitObject.Benefit">
            <summary>
            Gets or Sets Benefit
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitObject)">
            <summary>
            Returns true if BenefitObject instances are equal
            </summary>
            <param name="input">Instance of BenefitObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.BenefitObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefits">
            <summary>
            Benefits
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefits.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefits.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefits._Benefits">
            <summary>
            Gets or Sets _Benefits
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefits.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefits.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefits.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefits.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Benefits)">
            <summary>
            Returns true if Benefits instances are equal
            </summary>
            <param name="input">Instance of Benefits to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefits.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Benefits.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.CourtOrderLine">
            <summary>
            CourtOrderLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.CourtOrderLine.CourtOrderTypeID">
            <summary>
            Xero identifier for payroll court order type
            </summary>
            <value>Xero identifier for payroll court order type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.CourtOrderLine.Amount">
            <summary>
            Amount
            </summary>
            <value>Amount</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.CourtOrderLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.CourtOrderLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.CourtOrderLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.CourtOrderLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.CourtOrderLine)">
            <summary>
            Returns true if CourtOrderLine instances are equal
            </summary>
            <param name="input">Instance of CourtOrderLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.CourtOrderLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.CourtOrderLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction">
            <summary>
            Deduction
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionCategoryEnum">
            <summary>
            Deduction Category type
            </summary>
            <value>Deduction Category type</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionCategoryEnum.CapitalContributions">
            <summary>
            Enum CapitalContributions for value: CapitalContributions
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionCategoryEnum.ChildCareVoucher">
            <summary>
            Enum ChildCareVoucher for value: ChildCareVoucher
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionCategoryEnum.MakingGood">
            <summary>
            Enum MakingGood for value: MakingGood
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionCategoryEnum.PostgraduateLoanDeductions">
            <summary>
            Enum PostgraduateLoanDeductions for value: PostgraduateLoanDeductions
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionCategoryEnum.PrivateUsePayments">
            <summary>
            Enum PrivateUsePayments for value: PrivateUsePayments
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionCategoryEnum.SalarySacrifice">
            <summary>
            Enum SalarySacrifice for value: SalarySacrifice
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionCategoryEnum.StakeholderPension">
            <summary>
            Enum StakeholderPension for value: StakeholderPension
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionCategoryEnum.StakeholderPensionPostTax">
            <summary>
            Enum StakeholderPensionPostTax for value: StakeholderPensionPostTax
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionCategoryEnum.StudentLoanDeductions">
            <summary>
            Enum StudentLoanDeductions for value: StudentLoanDeductions
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionCategoryEnum.UkOther">
            <summary>
            Enum UkOther for value: UkOther
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionCategory">
            <summary>
            Deduction Category type
            </summary>
            <value>Deduction Category type</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.CalculationTypeEnum">
            <summary>
            determine the calculation type whether fixed amount or percentage of gross
            </summary>
            <value>determine the calculation type whether fixed amount or percentage of gross</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.CalculationTypeEnum.FixedAmount">
            <summary>
            Enum FixedAmount for value: FixedAmount
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.CalculationTypeEnum.PercentageOfGross">
            <summary>
            Enum PercentageOfGross for value: PercentageOfGross
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.CalculationType">
            <summary>
            determine the calculation type whether fixed amount or percentage of gross
            </summary>
            <value>determine the calculation type whether fixed amount or percentage of gross</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionId">
            <summary>
            The Xero identifier for Deduction
            </summary>
            <value>The Xero identifier for Deduction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.DeductionName">
            <summary>
            Name of the deduction
            </summary>
            <value>Name of the deduction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.LiabilityAccountId">
            <summary>
            Xero identifier for Liability Account
            </summary>
            <value>Xero identifier for Liability Account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.CurrentRecord">
            <summary>
            Identifier of a record is active or not.
            </summary>
            <value>Identifier of a record is active or not.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.StandardAmount">
            <summary>
            Standard amount of the deduction
            </summary>
            <value>Standard amount of the deduction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.ReducesSuperLiability">
            <summary>
            Identifier of reduces super liability
            </summary>
            <value>Identifier of reduces super liability</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.ReducesTaxLiability">
            <summary>
            Identifier of reduces tax liability
            </summary>
            <value>Identifier of reduces tax liability</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.Percentage">
            <summary>
            Percentage of gross
            </summary>
            <value>Percentage of gross</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.SubjectToNIC">
            <summary>
            Identifier of subject To NIC
            </summary>
            <value>Identifier of subject To NIC</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.SubjectToTax">
            <summary>
            Identifier of subject To Tax
            </summary>
            <value>Identifier of subject To Tax</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.IsReducedByBasicRate">
            <summary>
            Identifier of reduced by basic rate applicable or not
            </summary>
            <value>Identifier of reduced by basic rate applicable or not</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.ApplyToPensionCalculations">
            <summary>
            Identifier for apply to pension calculations
            </summary>
            <value>Identifier for apply to pension calculations</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.IsCalculatingOnQualifyingEarnings">
            <summary>
            Identifier of calculating on qualifying earnings
            </summary>
            <value>Identifier of calculating on qualifying earnings</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.IsPension">
            <summary>
            Identifier of applicable for pension or not
            </summary>
            <value>Identifier of applicable for pension or not</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction)">
            <summary>
            Returns true if Deduction instances are equal
            </summary>
            <param name="input">Instance of Deduction to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deduction.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionLine">
            <summary>
            DeductionLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionLine.DeductionTypeID">
            <summary>
            Xero identifier for payroll deduction
            </summary>
            <value>Xero identifier for payroll deduction</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionLine.Amount">
            <summary>
            The amount of the deduction line
            </summary>
            <value>The amount of the deduction line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionLine.SubjectToTax">
            <summary>
            Identifies if the deduction is subject to tax
            </summary>
            <value>Identifies if the deduction is subject to tax</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionLine.Percentage">
            <summary>
            Deduction rate percentage
            </summary>
            <value>Deduction rate percentage</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionLine)">
            <summary>
            Returns true if DeductionLine instances are equal
            </summary>
            <param name="input">Instance of DeductionLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionObject">
            <summary>
            DeductionObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionObject.Deduction">
            <summary>
            Gets or Sets Deduction
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionObject)">
            <summary>
            Returns true if DeductionObject instances are equal
            </summary>
            <param name="input">Instance of DeductionObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.DeductionObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Deductions">
            <summary>
            Deductions
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deductions.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deductions.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Deductions._Deductions">
            <summary>
            Gets or Sets _Deductions
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deductions.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deductions.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deductions.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deductions.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Deductions)">
            <summary>
            Returns true if Deductions instances are equal
            </summary>
            <param name="input">Instance of Deductions to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deductions.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Deductions.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine">
            <summary>
            EarningsLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.EarningsLineID">
            <summary>
            Xero identifier for payroll earnings line
            </summary>
            <value>Xero identifier for payroll earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.EarningsRateID">
            <summary>
            Xero identifier for payroll earnings rate
            </summary>
            <value>Xero identifier for payroll earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.DisplayName">
            <summary>
            name of earnings rate for display in UI
            </summary>
            <value>name of earnings rate for display in UI</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.RatePerUnit">
            <summary>
            Rate per unit for earnings line
            </summary>
            <value>Rate per unit for earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.NumberOfUnits">
            <summary>
            Earnings number of units
            </summary>
            <value>Earnings number of units</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.FixedAmount">
            <summary>
            Earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
            </summary>
            <value>Earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.Amount">
            <summary>
            The amount of the earnings line.
            </summary>
            <value>The amount of the earnings line.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.IsLinkedToTimesheet">
            <summary>
            Identifies if the earnings is taken from the timesheet. False for earnings line
            </summary>
            <value>Identifies if the earnings is taken from the timesheet. False for earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.IsAverageDailyPayRate">
            <summary>
            Identifies if the earnings is using an average daily pay rate
            </summary>
            <value>Identifies if the earnings is using an average daily pay rate</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine)">
            <summary>
            Returns true if EarningsLine instances are equal
            </summary>
            <param name="input">Instance of EarningsLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder">
            <summary>
            EarningsOrder
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder.StatutoryDeductionCategory">
            <summary>
            Gets or Sets StatutoryDeductionCategory
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder.Id">
            <summary>
            Xero unique identifier for an earning rate
            </summary>
            <value>Xero unique identifier for an earning rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder.Name">
            <summary>
            Name of the earning order
            </summary>
            <value>Name of the earning order</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder.LiabilityAccountId">
            <summary>
            Xero identifier for Liability Account
            </summary>
            <value>Xero identifier for Liability Account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder.CurrentRecord">
            <summary>
            Identifier of a record is active or not.
            </summary>
            <value>Identifier of a record is active or not.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder)">
            <summary>
            Returns true if EarningsOrder instances are equal
            </summary>
            <param name="input">Instance of EarningsOrder to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrder.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrderObject">
            <summary>
            EarningsOrderObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrderObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrderObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrderObject.StatutoryDeduction">
            <summary>
            Gets or Sets StatutoryDeduction
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrderObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrderObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrderObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrderObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrderObject)">
            <summary>
            Returns true if EarningsOrderObject instances are equal
            </summary>
            <param name="input">Instance of EarningsOrderObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrderObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrderObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrders">
            <summary>
            EarningsOrders
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrders.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrders.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrders.StatutoryDeductions">
            <summary>
            Gets or Sets StatutoryDeductions
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrders.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrders.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrders.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrders.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrders)">
            <summary>
            Returns true if EarningsOrders instances are equal
            </summary>
            <param name="input">Instance of EarningsOrders to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrders.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsOrders.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate">
            <summary>
            EarningsRate
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum">
            <summary>
            Indicates how an employee will be paid when taking this type of earning
            </summary>
            <value>Indicates how an employee will be paid when taking this type of earning</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.Allowance">
            <summary>
            Enum Allowance for value: Allowance
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.Backpay">
            <summary>
            Enum Backpay for value: Backpay
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.Bonus">
            <summary>
            Enum Bonus for value: Bonus
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.Commission">
            <summary>
            Enum Commission for value: Commission
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.LumpSum">
            <summary>
            Enum LumpSum for value: LumpSum
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.OtherEarnings">
            <summary>
            Enum OtherEarnings for value: OtherEarnings
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.OvertimeEarnings">
            <summary>
            Enum OvertimeEarnings for value: OvertimeEarnings
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.RegularEarnings">
            <summary>
            Enum RegularEarnings for value: RegularEarnings
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.StatutoryAdoptionPay">
            <summary>
            Enum StatutoryAdoptionPay for value: StatutoryAdoptionPay
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.StatutoryAdoptionPayNonPensionable">
            <summary>
            Enum StatutoryAdoptionPayNonPensionable for value: StatutoryAdoptionPayNonPensionable
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.StatutoryBereavementPay">
            <summary>
            Enum StatutoryBereavementPay for value: StatutoryBereavementPay
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.StatutoryMaternityPay">
            <summary>
            Enum StatutoryMaternityPay for value: StatutoryMaternityPay
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.StatutoryMaternityPayNonPensionable">
            <summary>
            Enum StatutoryMaternityPayNonPensionable for value: StatutoryMaternityPayNonPensionable
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.StatutoryPaternityPay">
            <summary>
            Enum StatutoryPaternityPay for value: StatutoryPaternityPay
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.StatutoryPaternityPayNonPensionable">
            <summary>
            Enum StatutoryPaternityPayNonPensionable for value: StatutoryPaternityPayNonPensionable
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.StatutoryParentalBereavementPayNonPensionable">
            <summary>
            Enum StatutoryParentalBereavementPayNonPensionable for value: StatutoryParentalBereavementPayNonPensionable
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.StatutorySharedParentalPay">
            <summary>
            Enum StatutorySharedParentalPay for value: StatutorySharedParentalPay
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.StatutorySharedParentalPayNonPensionable">
            <summary>
            Enum StatutorySharedParentalPayNonPensionable for value: StatutorySharedParentalPayNonPensionable
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.StatutorySickPay">
            <summary>
            Enum StatutorySickPay for value: StatutorySickPay
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.StatutorySickPayNonPensionable">
            <summary>
            Enum StatutorySickPayNonPensionable for value: StatutorySickPayNonPensionable
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.TipsNonDirect">
            <summary>
            Enum TipsNonDirect for value: TipsNonDirect
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.TipsDirect">
            <summary>
            Enum TipsDirect for value: TipsDirect
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsTypeEnum.TerminationPay">
            <summary>
            Enum TerminationPay for value: TerminationPay
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsType">
            <summary>
            Indicates how an employee will be paid when taking this type of earning
            </summary>
            <value>Indicates how an employee will be paid when taking this type of earning</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.RateTypeEnum">
            <summary>
            Indicates the type of the earning rate
            </summary>
            <value>Indicates the type of the earning rate</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.RateTypeEnum.RatePerUnit">
            <summary>
            Enum RatePerUnit for value: RatePerUnit
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.RateTypeEnum.MultipleOfOrdinaryEarningsRate">
            <summary>
            Enum MultipleOfOrdinaryEarningsRate for value: MultipleOfOrdinaryEarningsRate
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.RateTypeEnum.FixedAmount">
            <summary>
            Enum FixedAmount for value: FixedAmount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.RateType">
            <summary>
            Indicates the type of the earning rate
            </summary>
            <value>Indicates the type of the earning rate</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.EarningsRateID">
            <summary>
            Xero unique identifier for an earning rate
            </summary>
            <value>Xero unique identifier for an earning rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.Name">
            <summary>
            Name of the earning rate
            </summary>
            <value>Name of the earning rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.TypeOfUnits">
            <summary>
            The type of units used to record earnings
            </summary>
            <value>The type of units used to record earnings</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.CurrentRecord">
            <summary>
            Indicates whether an earning type is active
            </summary>
            <value>Indicates whether an earning type is active</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.ExpenseAccountID">
            <summary>
            The account that will be used for the earnings rate
            </summary>
            <value>The account that will be used for the earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.RatePerUnit">
            <summary>
            Default rate per unit (optional). Only applicable if RateType is RatePerUnit
            </summary>
            <value>Default rate per unit (optional). Only applicable if RateType is RatePerUnit</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.MultipleOfOrdinaryEarningsRate">
            <summary>
            This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MultipleOfOrdinaryEarningsRate
            </summary>
            <value>This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MultipleOfOrdinaryEarningsRate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.FixedAmount">
            <summary>
            Optional Fixed Rate Amount. Applicable for FixedAmount Rate
            </summary>
            <value>Optional Fixed Rate Amount. Applicable for FixedAmount Rate</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate)">
            <summary>
            Returns true if EarningsRate instances are equal
            </summary>
            <param name="input">Instance of EarningsRate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRateObject">
            <summary>
            EarningsRateObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRateObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRateObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRateObject.EarningsRate">
            <summary>
            Gets or Sets EarningsRate
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRateObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRateObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRateObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRateObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRateObject)">
            <summary>
            Returns true if EarningsRateObject instances are equal
            </summary>
            <param name="input">Instance of EarningsRateObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRateObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRateObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRates">
            <summary>
            EarningsRates
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRates.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRates.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRates._EarningsRates">
            <summary>
            Gets or Sets _EarningsRates
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRates.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRates.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRates.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRates.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRates)">
            <summary>
            Returns true if EarningsRates instances are equal
            </summary>
            <param name="input">Instance of EarningsRates to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRates.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsRates.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate">
            <summary>
            EarningsTemplate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate.PayTemplateEarningID">
            <summary>
            The Xero identifier for the earnings template
            </summary>
            <value>The Xero identifier for the earnings template</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate.RatePerUnit">
            <summary>
            The rate per unit
            </summary>
            <value>The rate per unit</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate.NumberOfUnits">
            <summary>
            The rate per unit
            </summary>
            <value>The rate per unit</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate.FixedAmount">
            <summary>
            The fixed amount per period
            </summary>
            <value>The fixed amount per period</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate.EarningsRateID">
            <summary>
            The corresponding earnings rate identifier
            </summary>
            <value>The corresponding earnings rate identifier</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate.Name">
            <summary>
            The read-only name of the Earning Template.
            </summary>
            <value>The read-only name of the Earning Template.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate)">
            <summary>
            Returns true if EarningsTemplate instances are equal
            </summary>
            <param name="input">Instance of EarningsTemplate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplateObject">
            <summary>
            EarningsTemplateObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplateObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplateObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplateObject.EarningTemplate">
            <summary>
            Gets or Sets EarningTemplate
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplateObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplateObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplateObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplateObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplateObject)">
            <summary>
            Returns true if EarningsTemplateObject instances are equal
            </summary>
            <param name="input">Instance of EarningsTemplateObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplateObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EarningsTemplateObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee">
            <summary>
            Employee
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.GenderEnum">
            <summary>
            The employee’s gender
            </summary>
            <value>The employee’s gender</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.GenderEnum.M">
            <summary>
            Enum M for value: M
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.GenderEnum.F">
            <summary>
            Enum F for value: F
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.Gender">
            <summary>
            The employee’s gender
            </summary>
            <value>The employee’s gender</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.EmployeeID">
            <summary>
            Xero unique identifier for the employee
            </summary>
            <value>Xero unique identifier for the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.Title">
            <summary>
            Title of the employee
            </summary>
            <value>Title of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.FirstName">
            <summary>
            First name of employee
            </summary>
            <value>First name of employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.LastName">
            <summary>
            Last name of employee
            </summary>
            <value>Last name of employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.DateOfBirth">
            <summary>
            Date of birth of the employee (YYYY-MM-DD)
            </summary>
            <value>Date of birth of the employee (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.Email">
            <summary>
            The email address for the employee
            </summary>
            <value>The email address for the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.PhoneNumber">
            <summary>
            Employee phone number
            </summary>
            <value>Employee phone number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.StartDate">
            <summary>
            Employment start date of the employee at the time it was requested
            </summary>
            <value>Employment start date of the employee at the time it was requested</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.EndDate">
            <summary>
            Employment end date of the employee at the time it was requested
            </summary>
            <value>Employment end date of the employee at the time it was requested</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.PayrollCalendarID">
            <summary>
            Xero unique identifier for the payroll calendar of the employee
            </summary>
            <value>Xero unique identifier for the payroll calendar of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to the employee
            </summary>
            <value>UTC timestamp of last update to the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.CreatedDateUTC">
            <summary>
            UTC timestamp when the employee was created in Xero
            </summary>
            <value>UTC timestamp when the employee was created in Xero</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.NationalInsuranceNumber">
            <summary>
            National insurance number of the employee
            </summary>
            <value>National insurance number of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.IsOffPayrollWorker">
            <summary>
            Whether the employee is an off payroll worker
            </summary>
            <value>Whether the employee is an off payroll worker</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Employee)">
            <summary>
            Returns true if Employee instances are equal
            </summary>
            <param name="input">Instance of Employee to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employee.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave">
            <summary>
            EmployeeLeave
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.LeaveID">
            <summary>
            The Xero identifier for LeaveType
            </summary>
            <value>The Xero identifier for LeaveType</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.LeaveTypeID">
            <summary>
            The Xero identifier for LeaveType
            </summary>
            <value>The Xero identifier for LeaveType</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.Description">
            <summary>
            The description of the leave  (max length &#x3D; 50)
            </summary>
            <value>The description of the leave  (max length &#x3D; 50)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.StartDate">
            <summary>
            Start date of the leave (YYYY-MM-DD)
            </summary>
            <value>Start date of the leave (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.EndDate">
            <summary>
            End date of the leave (YYYY-MM-DD)
            </summary>
            <value>End date of the leave (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.Periods">
            <summary>
            The leave period information. The StartDate, EndDate and NumberOfUnits needs to be specified when you do not want to calculate NumberOfUnits automatically. Using incorrect period StartDate and EndDate will result in automatic computation of the NumberOfUnits.
            </summary>
            <value>The leave period information. The StartDate, EndDate and NumberOfUnits needs to be specified when you do not want to calculate NumberOfUnits automatically. Using incorrect period StartDate and EndDate will result in automatic computation of the NumberOfUnits.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to the leave type note
            </summary>
            <value>UTC timestamp of last update to the leave type note</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave)">
            <summary>
            Returns true if EmployeeLeave instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeave to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeave.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalance">
            <summary>
            EmployeeLeaveBalance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalance.Name">
            <summary>
            Name of the leave type.
            </summary>
            <value>Name of the leave type.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalance.LeaveTypeID">
            <summary>
            The Xero identifier for leave type
            </summary>
            <value>The Xero identifier for leave type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalance.Balance">
            <summary>
            The employees current balance for the corresponding leave type.
            </summary>
            <value>The employees current balance for the corresponding leave type.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalance.TypeOfUnits">
            <summary>
            The type of the units of the leave.
            </summary>
            <value>The type of the units of the leave.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalance.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalance.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalance.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalance.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalance)">
            <summary>
            Returns true if EmployeeLeaveBalance instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveBalance to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalance.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalance.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalances">
            <summary>
            EmployeeLeaveBalances
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalances.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalances.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalances.LeaveBalances">
            <summary>
            Gets or Sets LeaveBalances
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalances.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalances.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalances.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalances.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalances)">
            <summary>
            Returns true if EmployeeLeaveBalances instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveBalances to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalances.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveBalances.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveObject">
            <summary>
            EmployeeLeaveObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveObject.Leave">
            <summary>
            Gets or Sets Leave
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveObject)">
            <summary>
            Returns true if EmployeeLeaveObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaves">
            <summary>
            EmployeeLeaves
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaves.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaves.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaves.Leave">
            <summary>
            Gets or Sets Leave
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaves.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaves.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaves.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaves.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaves)">
            <summary>
            Returns true if EmployeeLeaves instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaves to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaves.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaves.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType">
            <summary>
            EmployeeLeaveType
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.ScheduleOfAccrualEnum">
            <summary>
            The schedule of accrual
            </summary>
            <value>The schedule of accrual</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.ScheduleOfAccrualEnum.BeginningOfCalendarYear">
            <summary>
            Enum BeginningOfCalendarYear for value: BeginningOfCalendarYear
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.ScheduleOfAccrualEnum.OnAnniversaryDate">
            <summary>
            Enum OnAnniversaryDate for value: OnAnniversaryDate
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.ScheduleOfAccrualEnum.EachPayPeriod">
            <summary>
            Enum EachPayPeriod for value: EachPayPeriod
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.ScheduleOfAccrualEnum.OnHourWorked">
            <summary>
            Enum OnHourWorked for value: OnHourWorked
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.ScheduleOfAccrual">
            <summary>
            The schedule of accrual
            </summary>
            <value>The schedule of accrual</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.LeaveTypeID">
            <summary>
            The Xero identifier for leave type
            </summary>
            <value>The Xero identifier for leave type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.HoursAccruedAnnually">
            <summary>
            The number of hours accrued for the leave annually. This is 0 when the scheduleOfAccrual chosen is \&quot;OnHourWorked\&quot;
            </summary>
            <value>The number of hours accrued for the leave annually. This is 0 when the scheduleOfAccrual chosen is \&quot;OnHourWorked\&quot;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.MaximumToAccrue">
            <summary>
            The maximum number of hours that can be accrued for the leave
            </summary>
            <value>The maximum number of hours that can be accrued for the leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.OpeningBalance">
            <summary>
            The initial number of hours assigned when the leave was added to the employee
            </summary>
            <value>The initial number of hours assigned when the leave was added to the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.RateAccruedHourly">
            <summary>
            The number of hours added to the leave balance for every hour worked by the employee. This is normally 0, unless the scheduleOfAccrual chosen is \&quot;OnHourWorked\&quot;
            </summary>
            <value>The number of hours added to the leave balance for every hour worked by the employee. This is normally 0, unless the scheduleOfAccrual chosen is \&quot;OnHourWorked\&quot;</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType)">
            <summary>
            Returns true if EmployeeLeaveType instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypeObject">
            <summary>
            EmployeeLeaveTypeObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypeObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypeObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypeObject.LeaveType">
            <summary>
            Gets or Sets LeaveType
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypeObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypeObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypeObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypeObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypeObject)">
            <summary>
            Returns true if EmployeeLeaveTypeObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveTypeObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypeObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypeObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypes">
            <summary>
            EmployeeLeaveTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypes.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypes.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypes.LeaveTypes">
            <summary>
            Gets or Sets LeaveTypes
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypes.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypes.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypes.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypes.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypes)">
            <summary>
            Returns true if EmployeeLeaveTypes instances are equal
            </summary>
            <param name="input">Instance of EmployeeLeaveTypes to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypes.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeLeaveTypes.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeObject">
            <summary>
            EmployeeObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeObject.Employee">
            <summary>
            Gets or Sets Employee
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeObject)">
            <summary>
            Returns true if EmployeeObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances">
            <summary>
            EmployeeOpeningBalances
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances.StatutoryAdoptionPay">
            <summary>
            The total accumulated statutory adoption pay amount received by the employee for current fiscal year to date
            </summary>
            <value>The total accumulated statutory adoption pay amount received by the employee for current fiscal year to date</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances.StatutoryMaternityPay">
            <summary>
            The total accumulated statutory maternity pay amount received by the employee for current fiscal year to date
            </summary>
            <value>The total accumulated statutory maternity pay amount received by the employee for current fiscal year to date</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances.StatutoryPaternityPay">
            <summary>
            The total accumulated statutory paternity pay amount received by the employee for current fiscal year to date
            </summary>
            <value>The total accumulated statutory paternity pay amount received by the employee for current fiscal year to date</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances.StatutorySharedParentalPay">
            <summary>
            The total accumulated statutory shared parental pay amount received by the employee for current fiscal year to date
            </summary>
            <value>The total accumulated statutory shared parental pay amount received by the employee for current fiscal year to date</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances.StatutorySickPay">
            <summary>
            The total accumulated statutory sick pay amount received by the employee for current fiscal year to date
            </summary>
            <value>The total accumulated statutory sick pay amount received by the employee for current fiscal year to date</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances.PriorEmployeeNumber">
            <summary>
            The unique employee number issued by the employee&#39;s former employer
            </summary>
            <value>The unique employee number issued by the employee&#39;s former employer</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances)">
            <summary>
            Returns true if EmployeeOpeningBalances instances are equal
            </summary>
            <param name="input">Instance of EmployeeOpeningBalances to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalances.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalancesObject">
            <summary>
            EmployeeOpeningBalancesObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalancesObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalancesObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalancesObject.OpeningBalances">
            <summary>
            Gets or Sets OpeningBalances
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalancesObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalancesObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalancesObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalancesObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalancesObject)">
            <summary>
            Returns true if EmployeeOpeningBalancesObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeOpeningBalancesObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalancesObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeOpeningBalancesObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplate">
            <summary>
            EmployeePayTemplate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplate.EmployeeID">
            <summary>
            Unique identifier for the employee
            </summary>
            <value>Unique identifier for the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplate.EarningTemplates">
            <summary>
            Gets or Sets EarningTemplates
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplate.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplate)">
            <summary>
            Returns true if EmployeePayTemplate instances are equal
            </summary>
            <param name="input">Instance of EmployeePayTemplate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplateObject">
            <summary>
            EmployeePayTemplateObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplateObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplateObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplateObject.PayTemplate">
            <summary>
            Gets or Sets PayTemplate
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplateObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplateObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplateObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplateObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplateObject)">
            <summary>
            Returns true if EmployeePayTemplateObject instances are equal
            </summary>
            <param name="input">Instance of EmployeePayTemplateObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplateObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplateObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplates">
            <summary>
            EmployeePayTemplates
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplates.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplates.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplates.EarningTemplates">
            <summary>
            Gets or Sets EarningTemplates
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplates.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplates.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplates.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplates.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplates)">
            <summary>
            Returns true if EmployeePayTemplates instances are equal
            </summary>
            <param name="input">Instance of EmployeePayTemplates to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplates.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeePayTemplates.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Employees">
            <summary>
            Employees
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employees.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employees.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employees._Employees">
            <summary>
            Gets or Sets _Employees
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employees.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employees.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employees.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employees.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Employees)">
            <summary>
            Returns true if Employees instances are equal
            </summary>
            <param name="input">Instance of Employees to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employees.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employees.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance">
            <summary>
            EmployeeStatutoryLeaveBalance
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.LeaveTypeEnum">
            <summary>
            The type of statutory leave
            </summary>
            <value>The type of statutory leave</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.LeaveTypeEnum.Sick">
            <summary>
            Enum Sick for value: Sick
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.LeaveTypeEnum.Adoption">
            <summary>
            Enum Adoption for value: Adoption
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.LeaveTypeEnum.Maternity">
            <summary>
            Enum Maternity for value: Maternity
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.LeaveTypeEnum.Paternity">
            <summary>
            Enum Paternity for value: Paternity
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.LeaveTypeEnum.Sharedparental">
            <summary>
            Enum Sharedparental for value: Sharedparental
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.LeaveType">
            <summary>
            The type of statutory leave
            </summary>
            <value>The type of statutory leave</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.UnitsEnum">
            <summary>
            The units will be \&quot;Hours\&quot;
            </summary>
            <value>The units will be \&quot;Hours\&quot;</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.UnitsEnum.Hours">
            <summary>
            Enum Hours for value: Hours
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.Units">
            <summary>
            The units will be \&quot;Hours\&quot;
            </summary>
            <value>The units will be \&quot;Hours\&quot;</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.BalanceRemaining">
            <summary>
            The balance remaining for the corresponding leave type as of specified date.
            </summary>
            <value>The balance remaining for the corresponding leave type as of specified date.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance)">
            <summary>
            Returns true if EmployeeStatutoryLeaveBalance instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutoryLeaveBalance to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalance.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalanceObject">
            <summary>
            EmployeeStatutoryLeaveBalanceObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalanceObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalanceObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalanceObject.LeaveBalance">
            <summary>
            Gets or Sets LeaveBalance
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalanceObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalanceObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalanceObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalanceObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalanceObject)">
            <summary>
            Returns true if EmployeeStatutoryLeaveBalanceObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutoryLeaveBalanceObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalanceObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveBalanceObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeavesSummaries">
            <summary>
            EmployeeStatutoryLeavesSummaries
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeavesSummaries.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeavesSummaries.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeavesSummaries.StatutoryLeaves">
            <summary>
            Gets or Sets StatutoryLeaves
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeavesSummaries.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeavesSummaries.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeavesSummaries.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeavesSummaries.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeavesSummaries)">
            <summary>
            Returns true if EmployeeStatutoryLeavesSummaries instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutoryLeavesSummaries to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeavesSummaries.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeavesSummaries.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary">
            <summary>
            EmployeeStatutoryLeaveSummary
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.TypeEnum">
            <summary>
            The category of statutory leave
            </summary>
            <value>The category of statutory leave</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.TypeEnum.Sick">
            <summary>
            Enum Sick for value: Sick
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.TypeEnum.Adoption">
            <summary>
            Enum Adoption for value: Adoption
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.TypeEnum.Maternity">
            <summary>
            Enum Maternity for value: Maternity
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.TypeEnum.Paternity">
            <summary>
            Enum Paternity for value: Paternity
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.TypeEnum.Sharedparental">
            <summary>
            Enum Sharedparental for value: Sharedparental
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.Type">
            <summary>
            The category of statutory leave
            </summary>
            <value>The category of statutory leave</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.StatusEnum">
            <summary>
            The status of the leave
            </summary>
            <value>The status of the leave</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.StatusEnum.Pending">
            <summary>
            Enum Pending for value: Pending
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.StatusEnum.InProgress">
            <summary>
            Enum InProgress for value: In-Progress
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.StatusEnum.Completed">
            <summary>
            Enum Completed for value: Completed
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.Status">
            <summary>
            The status of the leave
            </summary>
            <value>The status of the leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.StatutoryLeaveID">
            <summary>
            The unique identifier (guid) of a statutory leave.
            </summary>
            <value>The unique identifier (guid) of a statutory leave.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.EmployeeID">
            <summary>
            The unique identifier (guid) of the employee
            </summary>
            <value>The unique identifier (guid) of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.StartDate">
            <summary>
            The date when the leave starts
            </summary>
            <value>The date when the leave starts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.EndDate">
            <summary>
            The date when the leave ends
            </summary>
            <value>The date when the leave ends</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.IsEntitled">
            <summary>
            Whether the leave was entitled to receive payment
            </summary>
            <value>Whether the leave was entitled to receive payment</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary)">
            <summary>
            Returns true if EmployeeStatutoryLeaveSummary instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutoryLeaveSummary to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutoryLeaveSummary.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave">
            <summary>
            EmployeeStatutorySickLeave
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum">
            <summary>
            Defines EntitlementFailureReasons
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.UnableToCalculateAwe">
            <summary>
            Enum UnableToCalculateAwe for value: UnableToCalculateAwe
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.AweLowerThanLel">
            <summary>
            Enum AweLowerThanLel for value: AweLowerThanLel
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.NotQualifiedInPreviousPiw">
            <summary>
            Enum NotQualifiedInPreviousPiw for value: NotQualifiedInPreviousPiw
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.ExceededMaximumEntitlementWeeksOfSsp">
            <summary>
            Enum ExceededMaximumEntitlementWeeksOfSsp for value: ExceededMaximumEntitlementWeeksOfSsp
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.ExceededMaximumDurationOfPiw">
            <summary>
            Enum ExceededMaximumDurationOfPiw for value: ExceededMaximumDurationOfPiw
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.SufficientNoticeNotGiven">
            <summary>
            Enum SufficientNoticeNotGiven for value: SufficientNoticeNotGiven
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EntitlementFailureReasons">
            <summary>
            If the leave requested was considered \&quot;not entitled\&quot;, the reasons why are listed here.
            </summary>
            <value>If the leave requested was considered \&quot;not entitled\&quot;, the reasons why are listed here.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.StatutoryLeaveID">
            <summary>
            The unique identifier (guid) of a statutory leave
            </summary>
            <value>The unique identifier (guid) of a statutory leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EmployeeID">
            <summary>
            The unique identifier (guid) of the employee
            </summary>
            <value>The unique identifier (guid) of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.LeaveTypeID">
            <summary>
            The unique identifier (guid) of the \&quot;Statutory Sick Leave (non-pensionable)\&quot; pay item
            </summary>
            <value>The unique identifier (guid) of the \&quot;Statutory Sick Leave (non-pensionable)\&quot; pay item</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.StartDate">
            <summary>
            The date when the leave starts
            </summary>
            <value>The date when the leave starts</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EndDate">
            <summary>
            The date when the leave ends
            </summary>
            <value>The date when the leave ends</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.Type">
            <summary>
            the type of statutory leave
            </summary>
            <value>the type of statutory leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.Status">
            <summary>
            the type of statutory leave
            </summary>
            <value>the type of statutory leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.WorkPattern">
            <summary>
            The days of the work week the employee is scheduled to work at the time the leave is taken
            </summary>
            <value>The days of the work week the employee is scheduled to work at the time the leave is taken</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.IsPregnancyRelated">
            <summary>
            Whether the sick leave was pregnancy related
            </summary>
            <value>Whether the sick leave was pregnancy related</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.SufficientNotice">
            <summary>
            Whether the employee provided sufficient notice and documentation as required by the employer supporting the sick leave request
            </summary>
            <value>Whether the employee provided sufficient notice and documentation as required by the employer supporting the sick leave request</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.IsEntitled">
            <summary>
            Whether the leave was entitled to receive payment
            </summary>
            <value>Whether the leave was entitled to receive payment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EntitlementWeeksRequested">
            <summary>
            The amount of requested time (in weeks)
            </summary>
            <value>The amount of requested time (in weeks)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EntitlementWeeksQualified">
            <summary>
            The amount of statutory sick leave time off (in weeks) that is available to take at the time the leave was requested
            </summary>
            <value>The amount of statutory sick leave time off (in weeks) that is available to take at the time the leave was requested</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.EntitlementWeeksRemaining">
            <summary>
            A calculated amount of time (in weeks) that remains for the statutory sick leave period
            </summary>
            <value>A calculated amount of time (in weeks) that remains for the statutory sick leave period</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.OverlapsWithOtherLeave">
            <summary>
            Whether another leave (Paternity, Shared Parental specifically) occurs during the requested leave&#39;s period. While this is allowed it could affect payment amounts
            </summary>
            <value>Whether another leave (Paternity, Shared Parental specifically) occurs during the requested leave&#39;s period. While this is allowed it could affect payment amounts</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave)">
            <summary>
            Returns true if EmployeeStatutorySickLeave instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutorySickLeave to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeave.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaveObject">
            <summary>
            EmployeeStatutorySickLeaveObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaveObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaveObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaveObject.StatutorySickLeave">
            <summary>
            Gets or Sets StatutorySickLeave
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaveObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaveObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaveObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaveObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaveObject)">
            <summary>
            Returns true if EmployeeStatutorySickLeaveObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutorySickLeaveObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaveObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaveObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaves">
            <summary>
            EmployeeStatutorySickLeaves
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaves.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaves.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaves.StatutorySickLeave">
            <summary>
            Gets or Sets StatutorySickLeave
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaves.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaves.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaves.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaves.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaves)">
            <summary>
            Returns true if EmployeeStatutorySickLeaves instances are equal
            </summary>
            <param name="input">Instance of EmployeeStatutorySickLeaves to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaves.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeStatutorySickLeaves.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax">
            <summary>
            EmployeeTax
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.StarterType">
            <summary>
            The Starter type.
            </summary>
            <value>The Starter type.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.StarterDeclaration">
            <summary>
            Starter declaration.
            </summary>
            <value>Starter declaration.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.TaxCode">
            <summary>
            The Tax code.
            </summary>
            <value>The Tax code.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.W1M1">
            <summary>
            Describes whether the tax settings is W1M1
            </summary>
            <value>Describes whether the tax settings is W1M1</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.PreviousTaxablePay">
            <summary>
            The previous taxable pay
            </summary>
            <value>The previous taxable pay</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.PreviousTaxPaid">
            <summary>
            The tax amount previously paid
            </summary>
            <value>The tax amount previously paid</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.StudentLoanDeduction">
            <summary>
            The employee&#39;s student loan deduction type
            </summary>
            <value>The employee&#39;s student loan deduction type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.HasPostGraduateLoans">
            <summary>
            Describes whether the employee has post graduate loans
            </summary>
            <value>Describes whether the employee has post graduate loans</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.IsDirector">
            <summary>
            Describes whether the employee is director
            </summary>
            <value>Describes whether the employee is director</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.DirectorshipStartDate">
            <summary>
            The directorship start date
            </summary>
            <value>The directorship start date</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.NicCalculationMethod">
            <summary>
            NICs calculation method
            </summary>
            <value>NICs calculation method</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax)">
            <summary>
            Returns true if EmployeeTax instances are equal
            </summary>
            <param name="input">Instance of EmployeeTax to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTax.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTaxObject">
            <summary>
            EmployeeTaxObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTaxObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTaxObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTaxObject.EmployeeTax">
            <summary>
            Gets or Sets EmployeeTax
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTaxObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTaxObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTaxObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTaxObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTaxObject)">
            <summary>
            Returns true if EmployeeTaxObject instances are equal
            </summary>
            <param name="input">Instance of EmployeeTaxObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTaxObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmployeeTaxObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment">
            <summary>
            Employment
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum">
            <summary>
            The NI Category of the employee
            </summary>
            <value>The NI Category of the employee</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.A">
            <summary>
            Enum A for value: A
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.B">
            <summary>
            Enum B for value: B
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.C">
            <summary>
            Enum C for value: C
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.F">
            <summary>
            Enum F for value: F
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.H">
            <summary>
            Enum H for value: H
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.I">
            <summary>
            Enum I for value: I
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.J">
            <summary>
            Enum J for value: J
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.L">
            <summary>
            Enum L for value: L
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.M">
            <summary>
            Enum M for value: M
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.S">
            <summary>
            Enum S for value: S
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.V">
            <summary>
            Enum V for value: V
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.X">
            <summary>
            Enum X for value: X
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategoryEnum.Z">
            <summary>
            Enum Z for value: Z
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.NiCategory">
            <summary>
            The NI Category of the employee
            </summary>
            <value>The NI Category of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.PayrollCalendarID">
            <summary>
            Xero unique identifier for the payroll calendar of the employee
            </summary>
            <value>Xero unique identifier for the payroll calendar of the employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.StartDate">
            <summary>
            Start date of the employment (YYYY-MM-DD)
            </summary>
            <value>Start date of the employment (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.EmployeeNumber">
            <summary>
            The employment number of the employee
            </summary>
            <value>The employment number of the employee</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Employment)">
            <summary>
            Returns true if Employment instances are equal
            </summary>
            <param name="input">Instance of Employment to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Employment.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.EmploymentObject">
            <summary>
            EmploymentObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmploymentObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmploymentObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.EmploymentObject.Employment">
            <summary>
            Gets or Sets Employment
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmploymentObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmploymentObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmploymentObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmploymentObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.EmploymentObject)">
            <summary>
            Returns true if EmploymentObject instances are equal
            </summary>
            <param name="input">Instance of EmploymentObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmploymentObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.EmploymentObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.InvalidField">
            <summary>
            InvalidField
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.InvalidField.Name">
            <summary>
            The name of the field that caused the error
            </summary>
            <value>The name of the field that caused the error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.InvalidField.Reason">
            <summary>
            The reason the error occurred
            </summary>
            <value>The reason the error occurred</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.InvalidField.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.InvalidField.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.InvalidField.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.InvalidField.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.InvalidField)">
            <summary>
            Returns true if InvalidField instances are equal
            </summary>
            <param name="input">Instance of InvalidField to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.InvalidField.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.InvalidField.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveAccrualLine">
            <summary>
            LeaveAccrualLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveAccrualLine.LeaveTypeID">
            <summary>
            Xero identifier for the Leave type
            </summary>
            <value>Xero identifier for the Leave type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveAccrualLine.NumberOfUnits">
            <summary>
            Leave accrual number of units
            </summary>
            <value>Leave accrual number of units</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveAccrualLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveAccrualLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveAccrualLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveAccrualLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveAccrualLine)">
            <summary>
            Returns true if LeaveAccrualLine instances are equal
            </summary>
            <param name="input">Instance of LeaveAccrualLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveAccrualLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveAccrualLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine">
            <summary>
            LeaveEarningsLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine.EarningsRateID">
            <summary>
            Xero identifier for payroll leave earnings rate
            </summary>
            <value>Xero identifier for payroll leave earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine.RatePerUnit">
            <summary>
            Rate per unit for leave earnings line
            </summary>
            <value>Rate per unit for leave earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine.NumberOfUnits">
            <summary>
            Leave earnings number of units
            </summary>
            <value>Leave earnings number of units</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine.FixedAmount">
            <summary>
            Leave earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
            </summary>
            <value>Leave earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine.Amount">
            <summary>
            The amount of the earnings line.
            </summary>
            <value>The amount of the earnings line.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine.IsLinkedToTimesheet">
            <summary>
            Identifies if the leave earnings is taken from the timesheet. False for leave earnings line
            </summary>
            <value>Identifies if the leave earnings is taken from the timesheet. False for leave earnings line</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine)">
            <summary>
            Returns true if LeaveEarningsLine instances are equal
            </summary>
            <param name="input">Instance of LeaveEarningsLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveEarningsLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod">
            <summary>
            LeavePeriod
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.PeriodStatusEnum">
            <summary>
            Period Status
            </summary>
            <value>Period Status</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.PeriodStatusEnum.Approved">
            <summary>
            Enum Approved for value: Approved
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.PeriodStatusEnum.Completed">
            <summary>
            Enum Completed for value: Completed
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.PeriodStatus">
            <summary>
            Period Status
            </summary>
            <value>Period Status</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.PeriodStartDate">
            <summary>
            The Pay Period Start Date (YYYY-MM-DD)
            </summary>
            <value>The Pay Period Start Date (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.PeriodEndDate">
            <summary>
            The Pay Period End Date (YYYY-MM-DD)
            </summary>
            <value>The Pay Period End Date (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.NumberOfUnits">
            <summary>
            The Number of Units for the leave
            </summary>
            <value>The Number of Units for the leave</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod)">
            <summary>
            Returns true if LeavePeriod instances are equal
            </summary>
            <param name="input">Instance of LeavePeriod to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriod.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriods">
            <summary>
            LeavePeriods
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriods.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriods.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriods.Periods">
            <summary>
            Gets or Sets Periods
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriods.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriods.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriods.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriods.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriods)">
            <summary>
            Returns true if LeavePeriods instances are equal
            </summary>
            <param name="input">Instance of LeavePeriods to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriods.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeavePeriods.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType">
            <summary>
            LeaveType
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.LeaveID">
            <summary>
            Xero unique identifier for the leave
            </summary>
            <value>Xero unique identifier for the leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.LeaveTypeID">
            <summary>
            Xero unique identifier for the leave type
            </summary>
            <value>Xero unique identifier for the leave type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.Name">
            <summary>
            Name of the leave type
            </summary>
            <value>Name of the leave type</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.IsPaidLeave">
            <summary>
            Indicate that an employee will be paid when taking this type of leave
            </summary>
            <value>Indicate that an employee will be paid when taking this type of leave</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.ShowOnPayslip">
            <summary>
            Indicate that a balance for this leave type to be shown on the employee’s payslips
            </summary>
            <value>Indicate that a balance for this leave type to be shown on the employee’s payslips</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.UpdatedDateUTC">
            <summary>
            UTC timestamp of last update to the leave type note
            </summary>
            <value>UTC timestamp of last update to the leave type note</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.IsActive">
            <summary>
            Shows whether the leave type is active or not
            </summary>
            <value>Shows whether the leave type is active or not</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.IsStatutoryLeave">
            <summary>
            Shows whether the leave type is a statutory leave type or not
            </summary>
            <value>Shows whether the leave type is a statutory leave type or not</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType)">
            <summary>
            Returns true if LeaveType instances are equal
            </summary>
            <param name="input">Instance of LeaveType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypeObject">
            <summary>
            LeaveTypeObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypeObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypeObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypeObject.LeaveType">
            <summary>
            Gets or Sets LeaveType
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypeObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypeObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypeObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypeObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypeObject)">
            <summary>
            Returns true if LeaveTypeObject instances are equal
            </summary>
            <param name="input">Instance of LeaveTypeObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypeObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypeObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypes">
            <summary>
            LeaveTypes
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypes.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypes.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypes._LeaveTypes">
            <summary>
            Gets or Sets _LeaveTypes
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypes.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypes.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypes.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypes.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypes)">
            <summary>
            Returns true if LeaveTypes instances are equal
            </summary>
            <param name="input">Instance of LeaveTypes to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypes.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.LeaveTypes.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Pagination">
            <summary>
            Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Pagination.Page">
            <summary>
            Gets or Sets Page
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Pagination.PageSize">
            <summary>
            Gets or Sets PageSize
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Pagination.PageCount">
            <summary>
            Gets or Sets PageCount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Pagination.ItemCount">
            <summary>
            Gets or Sets ItemCount
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Pagination.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Pagination.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Pagination.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Pagination.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Pagination)">
            <summary>
            Returns true if Pagination instances are equal
            </summary>
            <param name="input">Instance of Pagination to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Pagination.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Pagination.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine">
            <summary>
            PaymentLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine.PaymentLineID">
            <summary>
            Xero identifier for payroll payment line
            </summary>
            <value>Xero identifier for payroll payment line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine.Amount">
            <summary>
            The amount of the payment line
            </summary>
            <value>The amount of the payment line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine.AccountNumber">
            <summary>
            The account number
            </summary>
            <value>The account number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine.SortCode">
            <summary>
            The account sort code
            </summary>
            <value>The account sort code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine.AccountName">
            <summary>
            The account name
            </summary>
            <value>The account name</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine)">
            <summary>
            Returns true if PaymentLine instances are equal
            </summary>
            <param name="input">Instance of PaymentLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod">
            <summary>
            PaymentMethod
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod.PaymentMethodEnum">
            <summary>
            The payment method code
            </summary>
            <value>The payment method code</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod.PaymentMethodEnum.Cheque">
            <summary>
            Enum Cheque for value: Cheque
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod.PaymentMethodEnum.Electronically">
            <summary>
            Enum Electronically for value: Electronically
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod.PaymentMethodEnum.Manual">
            <summary>
            Enum Manual for value: Manual
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod._PaymentMethod">
            <summary>
            The payment method code
            </summary>
            <value>The payment method code</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod.BankAccounts">
            <summary>
            Gets or Sets BankAccounts
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod)">
            <summary>
            Returns true if PaymentMethod instances are equal
            </summary>
            <param name="input">Instance of PaymentMethod to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethod.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethodObject">
            <summary>
            PaymentMethodObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethodObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethodObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethodObject.PaymentMethod">
            <summary>
            Gets or Sets PaymentMethod
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethodObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethodObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethodObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethodObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethodObject)">
            <summary>
            Returns true if PaymentMethodObject instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethodObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PaymentMethodObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun">
            <summary>
            PayRun
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PayRunStatusEnum">
            <summary>
            Pay run status
            </summary>
            <value>Pay run status</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PayRunStatusEnum.Draft">
            <summary>
            Enum Draft for value: Draft
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PayRunStatusEnum.Posted">
            <summary>
            Enum Posted for value: Posted
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PayRunStatus">
            <summary>
            Pay run status
            </summary>
            <value>Pay run status</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PayRunTypeEnum">
            <summary>
            Pay run type
            </summary>
            <value>Pay run type</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PayRunTypeEnum.Scheduled">
            <summary>
            Enum Scheduled for value: Scheduled
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PayRunTypeEnum.Unscheduled">
            <summary>
            Enum Unscheduled for value: Unscheduled
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PayRunTypeEnum.EarlierYearUpdate">
            <summary>
            Enum EarlierYearUpdate for value: EarlierYearUpdate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PayRunType">
            <summary>
            Pay run type
            </summary>
            <value>Pay run type</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.CalendarTypeEnum">
            <summary>
            Calendar type of the pay run
            </summary>
            <value>Calendar type of the pay run</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.CalendarTypeEnum.Weekly">
            <summary>
            Enum Weekly for value: Weekly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.CalendarTypeEnum.Fortnightly">
            <summary>
            Enum Fortnightly for value: Fortnightly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.CalendarTypeEnum.FourWeekly">
            <summary>
            Enum FourWeekly for value: FourWeekly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.CalendarTypeEnum.Monthly">
            <summary>
            Enum Monthly for value: Monthly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.CalendarTypeEnum.Annual">
            <summary>
            Enum Annual for value: Annual
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.CalendarTypeEnum.Quarterly">
            <summary>
            Enum Quarterly for value: Quarterly
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.CalendarType">
            <summary>
            Calendar type of the pay run
            </summary>
            <value>Calendar type of the pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PayRunID">
            <summary>
            Xero unique identifier for the pay run
            </summary>
            <value>Xero unique identifier for the pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PayrollCalendarID">
            <summary>
            Xero unique identifier for the payroll calendar
            </summary>
            <value>Xero unique identifier for the payroll calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PeriodStartDate">
            <summary>
            Period start date of the payroll calendar
            </summary>
            <value>Period start date of the payroll calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PeriodEndDate">
            <summary>
            Period end date of the payroll calendar
            </summary>
            <value>Period end date of the payroll calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PaymentDate">
            <summary>
            Payment date of the pay run
            </summary>
            <value>Payment date of the pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.TotalCost">
            <summary>
            Total cost of the pay run
            </summary>
            <value>Total cost of the pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.TotalPay">
            <summary>
            Total pay of the pay run
            </summary>
            <value>Total pay of the pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PostedDateTime">
            <summary>
            Posted date time of the pay run
            </summary>
            <value>Posted date time of the pay run</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.PaySlips">
            <summary>
            Gets or Sets PaySlips
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun)">
            <summary>
            Returns true if PayRun instances are equal
            </summary>
            <param name="input">Instance of PayRun to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRun.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar">
            <summary>
            PayRunCalendar
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.CalendarTypeEnum">
            <summary>
            Type of the calendar
            </summary>
            <value>Type of the calendar</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.CalendarTypeEnum.Weekly">
            <summary>
            Enum Weekly for value: Weekly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.CalendarTypeEnum.Fortnightly">
            <summary>
            Enum Fortnightly for value: Fortnightly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.CalendarTypeEnum.FourWeekly">
            <summary>
            Enum FourWeekly for value: FourWeekly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.CalendarTypeEnum.Monthly">
            <summary>
            Enum Monthly for value: Monthly
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.CalendarTypeEnum.Annual">
            <summary>
            Enum Annual for value: Annual
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.CalendarTypeEnum.Quarterly">
            <summary>
            Enum Quarterly for value: Quarterly
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.CalendarType">
            <summary>
            Type of the calendar
            </summary>
            <value>Type of the calendar</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.PayrollCalendarID">
            <summary>
            Xero unique identifier for the payroll calendar
            </summary>
            <value>Xero unique identifier for the payroll calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.Name">
            <summary>
            Name of the calendar
            </summary>
            <value>Name of the calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.PeriodStartDate">
            <summary>
            Period start date of the calendar
            </summary>
            <value>Period start date of the calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.PeriodEndDate">
            <summary>
            Period end date of the calendar
            </summary>
            <value>Period end date of the calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.PaymentDate">
            <summary>
            Payment date of the calendar
            </summary>
            <value>Payment date of the calendar</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.UpdatedDateUTC">
            <summary>
            UTC timestamp of the last update to the pay run calendar
            </summary>
            <value>UTC timestamp of the last update to the pay run calendar</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar)">
            <summary>
            Returns true if PayRunCalendar instances are equal
            </summary>
            <param name="input">Instance of PayRunCalendar to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendar.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendarObject">
            <summary>
            PayRunCalendarObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendarObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendarObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendarObject.PayRunCalendar">
            <summary>
            Gets or Sets PayRunCalendar
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendarObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendarObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendarObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendarObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendarObject)">
            <summary>
            Returns true if PayRunCalendarObject instances are equal
            </summary>
            <param name="input">Instance of PayRunCalendarObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendarObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendarObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendars">
            <summary>
            PayRunCalendars
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendars.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendars.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendars._PayRunCalendars">
            <summary>
            Gets or Sets _PayRunCalendars
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendars.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendars.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendars.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendars.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendars)">
            <summary>
            Returns true if PayRunCalendars instances are equal
            </summary>
            <param name="input">Instance of PayRunCalendars to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendars.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunCalendars.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunObject">
            <summary>
            PayRunObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunObject.PayRun">
            <summary>
            Gets or Sets PayRun
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunObject)">
            <summary>
            Returns true if PayRunObject instances are equal
            </summary>
            <param name="input">Instance of PayRunObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRunObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRuns">
            <summary>
            PayRuns
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRuns.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRuns.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRuns._PayRuns">
            <summary>
            Gets or Sets _PayRuns
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRuns.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRuns.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRuns.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRuns.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.PayRuns)">
            <summary>
            Returns true if PayRuns instances are equal
            </summary>
            <param name="input">Instance of PayRuns to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRuns.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayRuns.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip">
            <summary>
            Payslip
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.PaymentMethodEnum">
            <summary>
            The payment method code
            </summary>
            <value>The payment method code</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.PaymentMethodEnum.Cheque">
            <summary>
            Enum Cheque for value: Cheque
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.PaymentMethodEnum.Electronically">
            <summary>
            Enum Electronically for value: Electronically
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.PaymentMethodEnum.Manual">
            <summary>
            Enum Manual for value: Manual
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.PaymentMethod">
            <summary>
            The payment method code
            </summary>
            <value>The payment method code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.PaySlipID">
            <summary>
            The Xero identifier for a Payslip
            </summary>
            <value>The Xero identifier for a Payslip</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.EmployeeID">
            <summary>
            The Xero identifier for payroll employee
            </summary>
            <value>The Xero identifier for payroll employee</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.PayRunID">
            <summary>
            The Xero identifier for the associated payrun
            </summary>
            <value>The Xero identifier for the associated payrun</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.LastEdited">
            <summary>
            The date payslip was last updated
            </summary>
            <value>The date payslip was last updated</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.FirstName">
            <summary>
            Employee first name
            </summary>
            <value>Employee first name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.LastName">
            <summary>
            Employee last name
            </summary>
            <value>Employee last name</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.TotalEarnings">
            <summary>
            Total earnings before any deductions. Same as gross earnings for UK.
            </summary>
            <value>Total earnings before any deductions. Same as gross earnings for UK.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.GrossEarnings">
            <summary>
            Total earnings before any deductions. Same as total earnings for UK.
            </summary>
            <value>Total earnings before any deductions. Same as total earnings for UK.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.TotalPay">
            <summary>
            The employee net pay
            </summary>
            <value>The employee net pay</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.TotalEmployerTaxes">
            <summary>
            The employer&#39;s tax obligation
            </summary>
            <value>The employer&#39;s tax obligation</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.TotalEmployeeTaxes">
            <summary>
            The part of an employee&#39;s earnings that is deducted for tax purposes
            </summary>
            <value>The part of an employee&#39;s earnings that is deducted for tax purposes</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.TotalDeductions">
            <summary>
            Total amount subtracted from an employee&#39;s earnings to reach total pay
            </summary>
            <value>Total amount subtracted from an employee&#39;s earnings to reach total pay</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.TotalReimbursements">
            <summary>
            Total reimbursements are nontaxable payments to an employee used to repay out-of-pocket expenses when the person incurs those expenses through employment
            </summary>
            <value>Total reimbursements are nontaxable payments to an employee used to repay out-of-pocket expenses when the person incurs those expenses through employment</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.TotalCourtOrders">
            <summary>
            Total amounts required by law to subtract from the employee&#39;s earnings
            </summary>
            <value>Total amounts required by law to subtract from the employee&#39;s earnings</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.TotalBenefits">
            <summary>
            Benefits (also called fringe benefits, perquisites or perks) are various non-earnings compensations provided to employees in addition to their normal earnings or salaries
            </summary>
            <value>Benefits (also called fringe benefits, perquisites or perks) are various non-earnings compensations provided to employees in addition to their normal earnings or salaries</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.BacsHash">
            <summary>
            BACS Service User Number
            </summary>
            <value>BACS Service User Number</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.EarningsLines">
            <summary>
            Gets or Sets EarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.LeaveEarningsLines">
            <summary>
            Gets or Sets LeaveEarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.TimesheetEarningsLines">
            <summary>
            Gets or Sets TimesheetEarningsLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.DeductionLines">
            <summary>
            Gets or Sets DeductionLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.ReimbursementLines">
            <summary>
            Gets or Sets ReimbursementLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.LeaveAccrualLines">
            <summary>
            Gets or Sets LeaveAccrualLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.BenefitLines">
            <summary>
            Gets or Sets BenefitLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.PaymentLines">
            <summary>
            Gets or Sets PaymentLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.EmployeeTaxLines">
            <summary>
            Gets or Sets EmployeeTaxLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.EmployerTaxLines">
            <summary>
            Gets or Sets EmployerTaxLines
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.CourtOrderLines">
            <summary>
            Gets or Sets CourtOrderLines
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip)">
            <summary>
            Returns true if Payslip instances are equal
            </summary>
            <param name="input">Instance of Payslip to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslip.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.PayslipObject">
            <summary>
            PayslipObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayslipObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayslipObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.PayslipObject.PaySlip">
            <summary>
            Gets or Sets PaySlip
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayslipObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayslipObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayslipObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayslipObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.PayslipObject)">
            <summary>
            Returns true if PayslipObject instances are equal
            </summary>
            <param name="input">Instance of PayslipObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayslipObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.PayslipObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslips">
            <summary>
            Payslips
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslips.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslips.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslips._PaySlips">
            <summary>
            Gets or Sets _PaySlips
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslips.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslips.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslips.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslips.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Payslips)">
            <summary>
            Returns true if Payslips instances are equal
            </summary>
            <param name="input">Instance of Payslips to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslips.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Payslips.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem">
            <summary>
            The object returned for a bad request
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem.Type">
            <summary>
            The type of error format
            </summary>
            <value>The type of error format</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem.Title">
            <summary>
            The type of the error
            </summary>
            <value>The type of the error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem.Status">
            <summary>
            The error status code
            </summary>
            <value>The error status code</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem.Detail">
            <summary>
            A description of the error
            </summary>
            <value>A description of the error</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem.Instance">
            <summary>
            Gets or Sets Instance
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem.InvalidFields">
            <summary>
            Gets or Sets InvalidFields
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Problem)">
            <summary>
            Returns true if Problem instances are equal
            </summary>
            <param name="input">Instance of Problem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Problem.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement">
            <summary>
            Reimbursement
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement.ReimbursementID">
            <summary>
            Xero unique identifier for a reimbursement
            </summary>
            <value>Xero unique identifier for a reimbursement</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement.Name">
            <summary>
            Name of the reimbursement
            </summary>
            <value>Name of the reimbursement</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement.AccountID">
            <summary>
            Xero unique identifier for the account used for the reimbursement
            </summary>
            <value>Xero unique identifier for the account used for the reimbursement</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement.CurrentRecord">
            <summary>
            Indicates that whether the reimbursement is active
            </summary>
            <value>Indicates that whether the reimbursement is active</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement)">
            <summary>
            Returns true if Reimbursement instances are equal
            </summary>
            <param name="input">Instance of Reimbursement to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursement.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementLine">
            <summary>
            ReimbursementLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementLine.ReimbursementTypeID">
            <summary>
            Xero identifier for payroll reimbursement
            </summary>
            <value>Xero identifier for payroll reimbursement</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementLine.Description">
            <summary>
            Reimbursement line description
            </summary>
            <value>Reimbursement line description</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementLine.Amount">
            <summary>
            Reimbursement amount
            </summary>
            <value>Reimbursement amount</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementLine)">
            <summary>
            Returns true if ReimbursementLine instances are equal
            </summary>
            <param name="input">Instance of ReimbursementLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementObject">
            <summary>
            ReimbursementObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementObject.Reimbursement">
            <summary>
            Gets or Sets Reimbursement
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementObject)">
            <summary>
            Returns true if ReimbursementObject instances are equal
            </summary>
            <param name="input">Instance of ReimbursementObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.ReimbursementObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursements">
            <summary>
            Reimbursements
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursements.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursements.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursements._Reimbursements">
            <summary>
            Gets or Sets _Reimbursements
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursements.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursements.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursements.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursements.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursements)">
            <summary>
            Returns true if Reimbursements instances are equal
            </summary>
            <param name="input">Instance of Reimbursements to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursements.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Reimbursements.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage">
            <summary>
            SalaryAndWage
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.StatusEnum">
            <summary>
            The current status of the corresponding salary and wages
            </summary>
            <value>The current status of the corresponding salary and wages</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.StatusEnum.Active">
            <summary>
            Enum Active for value: Active
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.StatusEnum.Pending">
            <summary>
            Enum Pending for value: Pending
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.StatusEnum.History">
            <summary>
            Enum History for value: History
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.Status">
            <summary>
            The current status of the corresponding salary and wages
            </summary>
            <value>The current status of the corresponding salary and wages</value>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.PaymentTypeEnum">
            <summary>
            The type of the payment of the corresponding salary and wages
            </summary>
            <value>The type of the payment of the corresponding salary and wages</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.PaymentTypeEnum.Salary">
            <summary>
            Enum Salary for value: Salary
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.PaymentTypeEnum.Hourly">
            <summary>
            Enum Hourly for value: Hourly
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.PaymentType">
            <summary>
            The type of the payment of the corresponding salary and wages
            </summary>
            <value>The type of the payment of the corresponding salary and wages</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.SalaryAndWagesID">
            <summary>
            Xero unique identifier for a salary and wages record
            </summary>
            <value>Xero unique identifier for a salary and wages record</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.EarningsRateID">
            <summary>
            Xero unique identifier for an earnings rate
            </summary>
            <value>Xero unique identifier for an earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.NumberOfUnitsPerWeek">
            <summary>
            The Number of Units per week for the corresponding salary and wages
            </summary>
            <value>The Number of Units per week for the corresponding salary and wages</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.RatePerUnit">
            <summary>
            The rate of each unit for the corresponding salary and wages
            </summary>
            <value>The rate of each unit for the corresponding salary and wages</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.NumberOfUnitsPerDay">
            <summary>
            The Number of Units per day for the corresponding salary and wages
            </summary>
            <value>The Number of Units per day for the corresponding salary and wages</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.EffectiveFrom">
            <summary>
            The effective date of the corresponding salary and wages
            </summary>
            <value>The effective date of the corresponding salary and wages</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.AnnualSalary">
            <summary>
            The annual salary
            </summary>
            <value>The annual salary</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage)">
            <summary>
            Returns true if SalaryAndWage instances are equal
            </summary>
            <param name="input">Instance of SalaryAndWage to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWage.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWageObject">
            <summary>
            SalaryAndWageObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWageObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWageObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWageObject.SalaryAndWages">
            <summary>
            Gets or Sets SalaryAndWages
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWageObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWageObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWageObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWageObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWageObject)">
            <summary>
            Returns true if SalaryAndWageObject instances are equal
            </summary>
            <param name="input">Instance of SalaryAndWageObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWageObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWageObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWages">
            <summary>
            SalaryAndWages
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWages.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWages.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWages._SalaryAndWages">
            <summary>
            Gets or Sets _SalaryAndWages
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWages.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWages.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWages.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWages.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWages)">
            <summary>
            Returns true if SalaryAndWages instances are equal
            </summary>
            <param name="input">Instance of SalaryAndWages to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWages.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.SalaryAndWages.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Settings.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Settings.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Settings._Settings">
            <summary>
            Gets or Sets _Settings
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Settings.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Settings.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Settings.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Settings.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Settings)">
            <summary>
            Returns true if Settings instances are equal
            </summary>
            <param name="input">Instance of Settings to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Settings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Settings.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction">
            <summary>
            StatutoryDeduction
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction.StatutoryDeductionCategory">
            <summary>
            Gets or Sets StatutoryDeductionCategory
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction.Id">
            <summary>
            The Xero identifier for earnings order
            </summary>
            <value>The Xero identifier for earnings order</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction.Name">
            <summary>
            Name of the earnings order
            </summary>
            <value>Name of the earnings order</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction.LiabilityAccountId">
            <summary>
            Xero identifier for Liability Account
            </summary>
            <value>Xero identifier for Liability Account</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction.CurrentRecord">
            <summary>
            Identifier of a record is active or not.
            </summary>
            <value>Identifier of a record is active or not.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction)">
            <summary>
            Returns true if StatutoryDeduction instances are equal
            </summary>
            <param name="input">Instance of StatutoryDeduction to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeduction.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory">
            <summary>
            Statutory Deduction Category
            </summary>
            <value>Statutory Deduction Category</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.AdditionalStudentLoan">
            <summary>
            Enum AdditionalStudentLoan for value: AdditionalStudentLoan
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.ChildSupport">
            <summary>
            Enum ChildSupport for value: ChildSupport
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.CourtFines">
            <summary>
            Enum CourtFines for value: CourtFines
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.Creditor">
            <summary>
            Enum Creditor for value: Creditor
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.FederalLevy">
            <summary>
            Enum FederalLevy for value: FederalLevy
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.InlandRevenueArrears">
            <summary>
            Enum InlandRevenueArrears for value: InlandRevenueArrears
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.KiwiSaver">
            <summary>
            Enum KiwiSaver for value: KiwiSaver
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.MsdRepayments">
            <summary>
            Enum MsdRepayments for value: MsdRepayments
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.NonPriorityOrder">
            <summary>
            Enum NonPriorityOrder for value: NonPriorityOrder
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.PriorityOrder">
            <summary>
            Enum PriorityOrder for value: PriorityOrder
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.TableBased">
            <summary>
            Enum TableBased for value: TableBased
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.StudentLoan">
            <summary>
            Enum StudentLoan for value: StudentLoan
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.VoluntaryStudentLoan">
            <summary>
            Enum VoluntaryStudentLoan for value: VoluntaryStudentLoan
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.StatutoryDeductionCategory.USChildSupport">
            <summary>
            Enum USChildSupport for value: USChildSupport
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine">
            <summary>
            TaxLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine.TaxLineID">
            <summary>
            Xero identifier for payroll tax line
            </summary>
            <value>Xero identifier for payroll tax line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine.Description">
            <summary>
            Tax line description
            </summary>
            <value>Tax line description</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine.IsEmployerTax">
            <summary>
            Identifies if the amount is paid for by the employee or employer. True if employer pays the tax
            </summary>
            <value>Identifies if the amount is paid for by the employee or employer. True if employer pays the tax</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine.Amount">
            <summary>
            The amount of the tax line
            </summary>
            <value>The amount of the tax line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine.GlobalTaxTypeID">
            <summary>
            Tax type ID
            </summary>
            <value>Tax type ID</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine.ManualAdjustment">
            <summary>
            Identifies if the tax line is a manual adjustment
            </summary>
            <value>Identifies if the tax line is a manual adjustment</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine)">
            <summary>
            Returns true if TaxLine instances are equal
            </summary>
            <param name="input">Instance of TaxLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TaxLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet">
            <summary>
            Timesheet
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.StatusEnum">
            <summary>
            Status of the timesheet
            </summary>
            <value>Status of the timesheet</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.StatusEnum.Draft">
            <summary>
            Enum Draft for value: Draft
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.StatusEnum.Approved">
            <summary>
            Enum Approved for value: Approved
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.StatusEnum.Completed">
            <summary>
            Enum Completed for value: Completed
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.Status">
            <summary>
            Status of the timesheet
            </summary>
            <value>Status of the timesheet</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.TimesheetID">
            <summary>
            The Xero identifier for a Timesheet
            </summary>
            <value>The Xero identifier for a Timesheet</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.PayrollCalendarID">
            <summary>
            The Xero identifier for the Payroll Calendar that the Timesheet applies to
            </summary>
            <value>The Xero identifier for the Payroll Calendar that the Timesheet applies to</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.EmployeeID">
            <summary>
            The Xero identifier for the Employee that the Timesheet is for
            </summary>
            <value>The Xero identifier for the Employee that the Timesheet is for</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.StartDate">
            <summary>
            The Start Date of the Timesheet period (YYYY-MM-DD)
            </summary>
            <value>The Start Date of the Timesheet period (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.EndDate">
            <summary>
            The End Date of the Timesheet period (YYYY-MM-DD)
            </summary>
            <value>The End Date of the Timesheet period (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.TotalHours">
            <summary>
            The Total Hours of the Timesheet
            </summary>
            <value>The Total Hours of the Timesheet</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.UpdatedDateUTC">
            <summary>
            The UTC date time that the Timesheet was last updated
            </summary>
            <value>The UTC date time that the Timesheet was last updated</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.TimesheetLines">
            <summary>
            Gets or Sets TimesheetLines
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet)">
            <summary>
            Returns true if Timesheet instances are equal
            </summary>
            <param name="input">Instance of Timesheet to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheet.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine">
            <summary>
            TimesheetEarningsLine
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine.EarningsRateID">
            <summary>
            Xero identifier for payroll timesheet earnings rate
            </summary>
            <value>Xero identifier for payroll timesheet earnings rate</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine.RatePerUnit">
            <summary>
            Rate per unit for timesheet earnings line
            </summary>
            <value>Rate per unit for timesheet earnings line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine.NumberOfUnits">
            <summary>
            Timesheet earnings number of units
            </summary>
            <value>Timesheet earnings number of units</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine.FixedAmount">
            <summary>
            Timesheet earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
            </summary>
            <value>Timesheet earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine.Amount">
            <summary>
            The amount of the timesheet earnings line.
            </summary>
            <value>The amount of the timesheet earnings line.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine.IsLinkedToTimesheet">
            <summary>
            Identifies if the timesheet earnings is taken from the timesheet. False for leave earnings line
            </summary>
            <value>Identifies if the timesheet earnings is taken from the timesheet. False for leave earnings line</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine)">
            <summary>
            Returns true if TimesheetEarningsLine instances are equal
            </summary>
            <param name="input">Instance of TimesheetEarningsLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetEarningsLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine">
            <summary>
            TimesheetLine
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine.TimesheetLineID">
            <summary>
            The Xero identifier for a Timesheet Line
            </summary>
            <value>The Xero identifier for a Timesheet Line</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine.Date">
            <summary>
            The Date that this Timesheet Line is for (YYYY-MM-DD)
            </summary>
            <value>The Date that this Timesheet Line is for (YYYY-MM-DD)</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine.EarningsRateID">
            <summary>
            The Xero identifier for the Earnings Rate that the Timesheet is for
            </summary>
            <value>The Xero identifier for the Earnings Rate that the Timesheet is for</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine.TrackingItemID">
            <summary>
            The Xero identifier for the Tracking Item that the Timesheet is for
            </summary>
            <value>The Xero identifier for the Tracking Item that the Timesheet is for</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine.NumberOfUnits">
            <summary>
            The Number of Units of the Timesheet Line
            </summary>
            <value>The Number of Units of the Timesheet Line</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine)">
            <summary>
            Returns true if TimesheetLine instances are equal
            </summary>
            <param name="input">Instance of TimesheetLine to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLine.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLineObject">
            <summary>
            TimesheetLineObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLineObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLineObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLineObject.TimesheetLine">
            <summary>
            Gets or Sets TimesheetLine
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLineObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLineObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLineObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLineObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLineObject)">
            <summary>
            Returns true if TimesheetLineObject instances are equal
            </summary>
            <param name="input">Instance of TimesheetLineObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLineObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetLineObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetObject">
            <summary>
            TimesheetObject
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetObject.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetObject.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetObject.Timesheet">
            <summary>
            Gets or Sets Timesheet
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetObject.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetObject)">
            <summary>
            Returns true if TimesheetObject instances are equal
            </summary>
            <param name="input">Instance of TimesheetObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TimesheetObject.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheets">
            <summary>
            Timesheets
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheets.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheets.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheets._Timesheets">
            <summary>
            Gets or Sets _Timesheets
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheets.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheets.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheets.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheets.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheets)">
            <summary>
            Returns true if Timesheets instances are equal
            </summary>
            <param name="input">Instance of Timesheets to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheets.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.Timesheets.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategories">
            <summary>
            TrackingCategories
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategories.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategories.Problem">
            <summary>
            Gets or Sets Problem
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategories._TrackingCategories">
            <summary>
            Gets or Sets _TrackingCategories
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategories.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategories.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategories.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategories.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategories)">
            <summary>
            Returns true if TrackingCategories instances are equal
            </summary>
            <param name="input">Instance of TrackingCategories to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategories.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategories.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategory">
            <summary>
            TrackingCategory
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategory.EmployeeGroupsTrackingCategoryID">
            <summary>
            The Xero identifier for Employee groups tracking category.
            </summary>
            <value>The Xero identifier for Employee groups tracking category.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategory.TimesheetTrackingCategoryID">
            <summary>
            The Xero identifier for Timesheet tracking category.
            </summary>
            <value>The Xero identifier for Timesheet tracking category.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategory.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategory.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategory.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategory.Equals(Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategory)">
            <summary>
            Returns true if TrackingCategory instances are equal
            </summary>
            <param name="input">Instance of TrackingCategory to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategory.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.PayrollUk.TrackingCategory.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Amount.Currency">
            <summary>
            Gets or Sets Currency
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Amount.Value">
            <summary>
            Gets or Sets Value
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Amount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Amount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Amount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Amount.Equals(Xero.NetStandard.OAuth2.Model.Project.Amount)">
            <summary>
            Returns true if Amount instances are equal
            </summary>
            <param name="input">Instance of Amount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Amount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Amount.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.ChargeType">
            <summary>
            Can be &#x60;TIME&#x60;, &#x60;FIXED&#x60; or &#x60;NON_CHARGEABLE&#x60;, defines how the task will be charged. Use &#x60;TIME&#x60; when you want to charge per hour and &#x60;FIXED&#x60; to charge as a fixed amount. If the task will not be charged use &#x60;NON_CHARGEABLE&#x60;.
            </summary>
            <value>Can be &#x60;TIME&#x60;, &#x60;FIXED&#x60; or &#x60;NON_CHARGEABLE&#x60;, defines how the task will be charged. Use &#x60;TIME&#x60; when you want to charge per hour and &#x60;FIXED&#x60; to charge as a fixed amount. If the task will not be charged use &#x60;NON_CHARGEABLE&#x60;.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.ChargeType.TIME">
            <summary>
            Enum TIME for value: TIME
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.ChargeType.FIXED">
            <summary>
            Enum FIXED for value: FIXED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.ChargeType.NONCHARGEABLE">
            <summary>
            Enum NONCHARGEABLE for value: NON_CHARGEABLE
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode">
            <summary>
            3 letter alpha code for the ISO-4217 currency code, e.g. USD, AUD.
            </summary>
            <value>3 letter alpha code for the ISO-4217 currency code, e.g. USD, AUD.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.AED">
            <summary>
            Enum AED for value: AED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.AFN">
            <summary>
            Enum AFN for value: AFN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.ALL">
            <summary>
            Enum ALL for value: ALL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.AMD">
            <summary>
            Enum AMD for value: AMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.ANG">
            <summary>
            Enum ANG for value: ANG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.AOA">
            <summary>
            Enum AOA for value: AOA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.ARS">
            <summary>
            Enum ARS for value: ARS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.AUD">
            <summary>
            Enum AUD for value: AUD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.AWG">
            <summary>
            Enum AWG for value: AWG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.AZN">
            <summary>
            Enum AZN for value: AZN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BAM">
            <summary>
            Enum BAM for value: BAM
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BBD">
            <summary>
            Enum BBD for value: BBD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BDT">
            <summary>
            Enum BDT for value: BDT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BGN">
            <summary>
            Enum BGN for value: BGN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BHD">
            <summary>
            Enum BHD for value: BHD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BIF">
            <summary>
            Enum BIF for value: BIF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BMD">
            <summary>
            Enum BMD for value: BMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BND">
            <summary>
            Enum BND for value: BND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BOB">
            <summary>
            Enum BOB for value: BOB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BRL">
            <summary>
            Enum BRL for value: BRL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BSD">
            <summary>
            Enum BSD for value: BSD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BTN">
            <summary>
            Enum BTN for value: BTN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BWP">
            <summary>
            Enum BWP for value: BWP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BYN">
            <summary>
            Enum BYN for value: BYN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.BZD">
            <summary>
            Enum BZD for value: BZD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.CAD">
            <summary>
            Enum CAD for value: CAD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.CDF">
            <summary>
            Enum CDF for value: CDF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.CHF">
            <summary>
            Enum CHF for value: CHF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.CLP">
            <summary>
            Enum CLP for value: CLP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.CNY">
            <summary>
            Enum CNY for value: CNY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.COP">
            <summary>
            Enum COP for value: COP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.CRC">
            <summary>
            Enum CRC for value: CRC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.CUC">
            <summary>
            Enum CUC for value: CUC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.CUP">
            <summary>
            Enum CUP for value: CUP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.CVE">
            <summary>
            Enum CVE for value: CVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.CZK">
            <summary>
            Enum CZK for value: CZK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.DJF">
            <summary>
            Enum DJF for value: DJF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.DKK">
            <summary>
            Enum DKK for value: DKK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.DOP">
            <summary>
            Enum DOP for value: DOP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.DZD">
            <summary>
            Enum DZD for value: DZD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.EGP">
            <summary>
            Enum EGP for value: EGP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.ERN">
            <summary>
            Enum ERN for value: ERN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.ETB">
            <summary>
            Enum ETB for value: ETB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.EUR">
            <summary>
            Enum EUR for value: EUR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.FJD">
            <summary>
            Enum FJD for value: FJD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.FKP">
            <summary>
            Enum FKP for value: FKP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.GBP">
            <summary>
            Enum GBP for value: GBP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.GEL">
            <summary>
            Enum GEL for value: GEL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.GGP">
            <summary>
            Enum GGP for value: GGP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.GHS">
            <summary>
            Enum GHS for value: GHS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.GIP">
            <summary>
            Enum GIP for value: GIP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.GMD">
            <summary>
            Enum GMD for value: GMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.GNF">
            <summary>
            Enum GNF for value: GNF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.GTQ">
            <summary>
            Enum GTQ for value: GTQ
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.GYD">
            <summary>
            Enum GYD for value: GYD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.HKD">
            <summary>
            Enum HKD for value: HKD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.HNL">
            <summary>
            Enum HNL for value: HNL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.HRK">
            <summary>
            Enum HRK for value: HRK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.HTG">
            <summary>
            Enum HTG for value: HTG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.HUF">
            <summary>
            Enum HUF for value: HUF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.IDR">
            <summary>
            Enum IDR for value: IDR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.ILS">
            <summary>
            Enum ILS for value: ILS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.IMP">
            <summary>
            Enum IMP for value: IMP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.INR">
            <summary>
            Enum INR for value: INR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.IQD">
            <summary>
            Enum IQD for value: IQD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.IRR">
            <summary>
            Enum IRR for value: IRR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.ISK">
            <summary>
            Enum ISK for value: ISK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.JEP">
            <summary>
            Enum JEP for value: JEP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.JMD">
            <summary>
            Enum JMD for value: JMD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.JOD">
            <summary>
            Enum JOD for value: JOD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.JPY">
            <summary>
            Enum JPY for value: JPY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.KES">
            <summary>
            Enum KES for value: KES
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.KGS">
            <summary>
            Enum KGS for value: KGS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.KHR">
            <summary>
            Enum KHR for value: KHR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.KMF">
            <summary>
            Enum KMF for value: KMF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.KPW">
            <summary>
            Enum KPW for value: KPW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.KRW">
            <summary>
            Enum KRW for value: KRW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.KWD">
            <summary>
            Enum KWD for value: KWD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.KYD">
            <summary>
            Enum KYD for value: KYD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.KZT">
            <summary>
            Enum KZT for value: KZT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.LAK">
            <summary>
            Enum LAK for value: LAK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.LBP">
            <summary>
            Enum LBP for value: LBP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.LKR">
            <summary>
            Enum LKR for value: LKR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.LRD">
            <summary>
            Enum LRD for value: LRD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.LSL">
            <summary>
            Enum LSL for value: LSL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.LYD">
            <summary>
            Enum LYD for value: LYD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MAD">
            <summary>
            Enum MAD for value: MAD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MDL">
            <summary>
            Enum MDL for value: MDL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MGA">
            <summary>
            Enum MGA for value: MGA
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MKD">
            <summary>
            Enum MKD for value: MKD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MMK">
            <summary>
            Enum MMK for value: MMK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MNT">
            <summary>
            Enum MNT for value: MNT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MOP">
            <summary>
            Enum MOP for value: MOP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MRU">
            <summary>
            Enum MRU for value: MRU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MUR">
            <summary>
            Enum MUR for value: MUR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MVR">
            <summary>
            Enum MVR for value: MVR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MWK">
            <summary>
            Enum MWK for value: MWK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MXN">
            <summary>
            Enum MXN for value: MXN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MYR">
            <summary>
            Enum MYR for value: MYR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.MZN">
            <summary>
            Enum MZN for value: MZN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.NAD">
            <summary>
            Enum NAD for value: NAD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.NGN">
            <summary>
            Enum NGN for value: NGN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.NIO">
            <summary>
            Enum NIO for value: NIO
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.NOK">
            <summary>
            Enum NOK for value: NOK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.NPR">
            <summary>
            Enum NPR for value: NPR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.NZD">
            <summary>
            Enum NZD for value: NZD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.OMR">
            <summary>
            Enum OMR for value: OMR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.PAB">
            <summary>
            Enum PAB for value: PAB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.PEN">
            <summary>
            Enum PEN for value: PEN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.PGK">
            <summary>
            Enum PGK for value: PGK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.PHP">
            <summary>
            Enum PHP for value: PHP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.PKR">
            <summary>
            Enum PKR for value: PKR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.PLN">
            <summary>
            Enum PLN for value: PLN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.PYG">
            <summary>
            Enum PYG for value: PYG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.QAR">
            <summary>
            Enum QAR for value: QAR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.RON">
            <summary>
            Enum RON for value: RON
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.RSD">
            <summary>
            Enum RSD for value: RSD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.RUB">
            <summary>
            Enum RUB for value: RUB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.RWF">
            <summary>
            Enum RWF for value: RWF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SAR">
            <summary>
            Enum SAR for value: SAR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SBD">
            <summary>
            Enum SBD for value: SBD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SCR">
            <summary>
            Enum SCR for value: SCR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SDG">
            <summary>
            Enum SDG for value: SDG
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SEK">
            <summary>
            Enum SEK for value: SEK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SGD">
            <summary>
            Enum SGD for value: SGD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SHP">
            <summary>
            Enum SHP for value: SHP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SLL">
            <summary>
            Enum SLL for value: SLL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SOS">
            <summary>
            Enum SOS for value: SOS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SPL">
            <summary>
            Enum SPL for value: SPL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SRD">
            <summary>
            Enum SRD for value: SRD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.STN">
            <summary>
            Enum STN for value: STN
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SVC">
            <summary>
            Enum SVC for value: SVC
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SYP">
            <summary>
            Enum SYP for value: SYP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.SZL">
            <summary>
            Enum SZL for value: SZL
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.THB">
            <summary>
            Enum THB for value: THB
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.TJS">
            <summary>
            Enum TJS for value: TJS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.TMT">
            <summary>
            Enum TMT for value: TMT
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.TND">
            <summary>
            Enum TND for value: TND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.TOP">
            <summary>
            Enum TOP for value: TOP
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.TRY">
            <summary>
            Enum TRY for value: TRY
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.TTD">
            <summary>
            Enum TTD for value: TTD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.TVD">
            <summary>
            Enum TVD for value: TVD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.TWD">
            <summary>
            Enum TWD for value: TWD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.TZS">
            <summary>
            Enum TZS for value: TZS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.UAH">
            <summary>
            Enum UAH for value: UAH
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.UGX">
            <summary>
            Enum UGX for value: UGX
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.USD">
            <summary>
            Enum USD for value: USD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.UYU">
            <summary>
            Enum UYU for value: UYU
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.UZS">
            <summary>
            Enum UZS for value: UZS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.VEF">
            <summary>
            Enum VEF for value: VEF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.VND">
            <summary>
            Enum VND for value: VND
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.VUV">
            <summary>
            Enum VUV for value: VUV
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.WST">
            <summary>
            Enum WST for value: WST
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.XAF">
            <summary>
            Enum XAF for value: XAF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.XCD">
            <summary>
            Enum XCD for value: XCD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.XDR">
            <summary>
            Enum XDR for value: XDR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.XOF">
            <summary>
            Enum XOF for value: XOF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.XPF">
            <summary>
            Enum XPF for value: XPF
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.YER">
            <summary>
            Enum YER for value: YER
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.ZAR">
            <summary>
            Enum ZAR for value: ZAR
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.ZMW">
            <summary>
            Enum ZMW for value: ZMW
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.ZMK">
            <summary>
            Enum ZMK for value: ZMK
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.ZWD">
            <summary>
            Enum ZWD for value: ZWD
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.CurrencyCode.Empty">
            <summary>
            Enum Empty for value: 
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Error.Message">
            <summary>
            Exception message
            </summary>
            <value>Exception message</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Error.ModelState">
            <summary>
            Array of Elements of validation Errors
            </summary>
            <value>Array of Elements of validation Errors</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Error.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Error.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Error.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Error.Equals(Xero.NetStandard.OAuth2.Model.Project.Error)">
            <summary>
            Returns true if Error instances are equal
            </summary>
            <param name="input">Instance of Error to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Error.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Error.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.Pagination">
            <summary>
            Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Pagination.Page">
            <summary>
            Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0.
            </summary>
            <value>Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Pagination.PageSize">
            <summary>
            Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500.
            </summary>
            <value>Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Pagination.PageCount">
            <summary>
            Number of pages available
            </summary>
            <value>Number of pages available</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Pagination.ItemCount">
            <summary>
            Number of items returned
            </summary>
            <value>Number of items returned</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Pagination.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Pagination.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Pagination.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Pagination.Equals(Xero.NetStandard.OAuth2.Model.Project.Pagination)">
            <summary>
            Returns true if Pagination instances are equal
            </summary>
            <param name="input">Instance of Pagination to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Pagination.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Pagination.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.Project">
            <summary>
            Project
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.CurrencyCode">
            <summary>
            Gets or Sets CurrencyCode
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Project.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Project.Project" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.ProjectId">
            <summary>
            Identifier of the project.
            </summary>
            <value>Identifier of the project.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.ContactId">
            <summary>
            Identifier of the contact this project was created for.
            </summary>
            <value>Identifier of the contact this project was created for.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.Name">
            <summary>
            Name of the project.
            </summary>
            <value>Name of the project.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.MinutesLogged">
            <summary>
            A total of minutes logged against all tasks on the Project.
            </summary>
            <value>A total of minutes logged against all tasks on the Project.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.TotalTaskAmount">
            <summary>
            Gets or Sets TotalTaskAmount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.TotalExpenseAmount">
            <summary>
            Gets or Sets TotalExpenseAmount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.EstimateAmount">
            <summary>
            Gets or Sets EstimateAmount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.MinutesToBeInvoiced">
            <summary>
            Minutes which have not been invoiced across all chargeable tasks in the project.
            </summary>
            <value>Minutes which have not been invoiced across all chargeable tasks in the project.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.TaskAmountToBeInvoiced">
            <summary>
            Gets or Sets TaskAmountToBeInvoiced
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.TaskAmountInvoiced">
            <summary>
            Gets or Sets TaskAmountInvoiced
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.ExpenseAmountToBeInvoiced">
            <summary>
            Gets or Sets ExpenseAmountToBeInvoiced
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.ExpenseAmountInvoiced">
            <summary>
            Gets or Sets ExpenseAmountInvoiced
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.ProjectAmountInvoiced">
            <summary>
            Gets or Sets ProjectAmountInvoiced
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.Deposit">
            <summary>
            Gets or Sets Deposit
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.DepositApplied">
            <summary>
            Gets or Sets DepositApplied
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.CreditNoteAmount">
            <summary>
            Gets or Sets CreditNoteAmount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.DeadlineUtc">
            <summary>
            Deadline for the project. UTC Date Time in ISO-8601 format.
            </summary>
            <value>Deadline for the project. UTC Date Time in ISO-8601 format.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.TotalInvoiced">
            <summary>
            Gets or Sets TotalInvoiced
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.TotalToBeInvoiced">
            <summary>
            Gets or Sets TotalToBeInvoiced
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Project.Estimate">
            <summary>
            Gets or Sets Estimate
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Project.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Project.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Project.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Project.Equals(Xero.NetStandard.OAuth2.Model.Project.Project)">
            <summary>
            Returns true if Project instances are equal
            </summary>
            <param name="input">Instance of Project to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Project.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Project.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate">
            <summary>
            ProjectCreateOrUpdate
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate.ContactId">
            <summary>
            Identifier of the contact this project was created for.
            </summary>
            <value>Identifier of the contact this project was created for.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate.Name">
            <summary>
            Name of the project.
            </summary>
            <value>Name of the project.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate.EstimateAmount">
            <summary>
            Gets or Sets EstimateAmount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate.DeadlineUtc">
            <summary>
            Deadline for the project. UTC Date Time in ISO-8601 format.
            </summary>
            <value>Deadline for the project. UTC Date Time in ISO-8601 format.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate.Equals(Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate)">
            <summary>
            Returns true if ProjectCreateOrUpdate instances are equal
            </summary>
            <param name="input">Instance of ProjectCreateOrUpdate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectCreateOrUpdate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.ProjectPatch">
            <summary>
            ProjectPatch
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.ProjectPatch.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectPatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Project.ProjectPatch" /> class.
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectPatch.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectPatch.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectPatch.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectPatch.Equals(Xero.NetStandard.OAuth2.Model.Project.ProjectPatch)">
            <summary>
            Returns true if ProjectPatch instances are equal
            </summary>
            <param name="input">Instance of ProjectPatch to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectPatch.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectPatch.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.Projects">
            <summary>
            Projects
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Projects.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Projects.Items">
            <summary>
            Gets or Sets Items
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Projects.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Projects.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Projects.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Projects.Equals(Xero.NetStandard.OAuth2.Model.Project.Projects)">
            <summary>
            Returns true if Projects instances are equal
            </summary>
            <param name="input">Instance of Projects to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Projects.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Projects.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.ProjectStatus">
            <summary>
            Status for project
            </summary>
            <value>Status for project</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.ProjectStatus.INPROGRESS">
            <summary>
            Enum INPROGRESS for value: INPROGRESS
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.ProjectStatus.CLOSED">
            <summary>
            Enum CLOSED for value: CLOSED
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.ProjectUser">
            <summary>
            ProjectUser
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.ProjectUser.UserId">
            <summary>
            Identifier of the user of the project.
            </summary>
            <value>Identifier of the user of the project.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.ProjectUser.Name">
            <summary>
            Full name of the user.
            </summary>
            <value>Full name of the user.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.ProjectUser.Email">
            <summary>
            Email address of the user.
            </summary>
            <value>Email address of the user.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectUser.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectUser.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectUser.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectUser.Equals(Xero.NetStandard.OAuth2.Model.Project.ProjectUser)">
            <summary>
            Returns true if ProjectUser instances are equal
            </summary>
            <param name="input">Instance of ProjectUser to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectUser.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectUser.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.ProjectUsers">
            <summary>
            ProjectUsers
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.ProjectUsers.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.ProjectUsers.Items">
            <summary>
            Gets or Sets Items
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectUsers.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectUsers.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectUsers.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectUsers.Equals(Xero.NetStandard.OAuth2.Model.Project.ProjectUsers)">
            <summary>
            Returns true if ProjectUsers instances are equal
            </summary>
            <param name="input">Instance of ProjectUsers to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectUsers.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.ProjectUsers.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.Task">
            <summary>
            Task
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.ChargeType">
            <summary>
            Gets or Sets ChargeType
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.Task.StatusEnum">
            <summary>
            Status of the task. When a task of ChargeType is &#x60;FIXED&#x60; and the rate amount is invoiced the status will be set to &#x60;INVOICED&#x60; and can&#39;t be modified. A task with ChargeType of &#x60;TIME&#x60; or &#x60;NON_CHARGEABLE&#x60; cannot have a status of &#x60;INVOICED&#x60;. A &#x60;LOCKED&#x60; state indicates that the task is currently changing state (for example being invoiced) and can&#39;t be modified.
            </summary>
            <value>Status of the task. When a task of ChargeType is &#x60;FIXED&#x60; and the rate amount is invoiced the status will be set to &#x60;INVOICED&#x60; and can&#39;t be modified. A task with ChargeType of &#x60;TIME&#x60; or &#x60;NON_CHARGEABLE&#x60; cannot have a status of &#x60;INVOICED&#x60;. A &#x60;LOCKED&#x60; state indicates that the task is currently changing state (for example being invoiced) and can&#39;t be modified.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.Task.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.Task.StatusEnum.INVOICED">
            <summary>
            Enum INVOICED for value: INVOICED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.Task.StatusEnum.LOCKED">
            <summary>
            Enum LOCKED for value: LOCKED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.Status">
            <summary>
            Status of the task. When a task of ChargeType is &#x60;FIXED&#x60; and the rate amount is invoiced the status will be set to &#x60;INVOICED&#x60; and can&#39;t be modified. A task with ChargeType of &#x60;TIME&#x60; or &#x60;NON_CHARGEABLE&#x60; cannot have a status of &#x60;INVOICED&#x60;. A &#x60;LOCKED&#x60; state indicates that the task is currently changing state (for example being invoiced) and can&#39;t be modified.
            </summary>
            <value>Status of the task. When a task of ChargeType is &#x60;FIXED&#x60; and the rate amount is invoiced the status will be set to &#x60;INVOICED&#x60; and can&#39;t be modified. A task with ChargeType of &#x60;TIME&#x60; or &#x60;NON_CHARGEABLE&#x60; cannot have a status of &#x60;INVOICED&#x60;. A &#x60;LOCKED&#x60; state indicates that the task is currently changing state (for example being invoiced) and can&#39;t be modified.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.TaskId">
            <summary>
            Identifier of the task.
            </summary>
            <value>Identifier of the task.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.Name">
            <summary>
            Name of the task.
            </summary>
            <value>Name of the task.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.Rate">
            <summary>
            Gets or Sets Rate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.EstimateMinutes">
            <summary>
            An estimated time to perform the task
            </summary>
            <value>An estimated time to perform the task</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.ProjectId">
            <summary>
            Identifier of the project task belongs to.
            </summary>
            <value>Identifier of the project task belongs to.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.TotalMinutes">
            <summary>
            Total minutes which have been logged against the task. Logged by assigning a time entry to a task
            </summary>
            <value>Total minutes which have been logged against the task. Logged by assigning a time entry to a task</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.TotalAmount">
            <summary>
            Gets or Sets TotalAmount
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.MinutesInvoiced">
            <summary>
            Minutes on this task which have been invoiced.
            </summary>
            <value>Minutes on this task which have been invoiced.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.MinutesToBeInvoiced">
            <summary>
            Minutes on this task which have not been invoiced.
            </summary>
            <value>Minutes on this task which have not been invoiced.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.FixedMinutes">
            <summary>
            Minutes logged against this task if its charge type is &#x60;FIXED&#x60;.
            </summary>
            <value>Minutes logged against this task if its charge type is &#x60;FIXED&#x60;.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.NonChargeableMinutes">
            <summary>
            Minutes logged against this task if its charge type is &#x60;NON_CHARGEABLE&#x60;.
            </summary>
            <value>Minutes logged against this task if its charge type is &#x60;NON_CHARGEABLE&#x60;.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.AmountToBeInvoiced">
            <summary>
            Gets or Sets AmountToBeInvoiced
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Task.AmountInvoiced">
            <summary>
            Gets or Sets AmountInvoiced
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Task.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Task.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Task.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Task.Equals(Xero.NetStandard.OAuth2.Model.Project.Task)">
            <summary>
            Returns true if Task instances are equal
            </summary>
            <param name="input">Instance of Task to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Task.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Task.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate">
            <summary>
            TaskCreateOrUpdate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate.ChargeType">
            <summary>
            Gets or Sets ChargeType
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate.Name">
            <summary>
            Name of the task. Max length 100 characters.
            </summary>
            <value>Name of the task. Max length 100 characters.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate.Rate">
            <summary>
            Gets or Sets Rate
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate.EstimateMinutes">
            <summary>
            An estimated time to perform the task
            </summary>
            <value>An estimated time to perform the task</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate.Equals(Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate)">
            <summary>
            Returns true if TaskCreateOrUpdate instances are equal
            </summary>
            <param name="input">Instance of TaskCreateOrUpdate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TaskCreateOrUpdate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.Tasks">
            <summary>
            Tasks
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Tasks.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.Tasks.Items">
            <summary>
            Gets or Sets Items
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Tasks.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Tasks.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Tasks.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Tasks.Equals(Xero.NetStandard.OAuth2.Model.Project.Tasks)">
            <summary>
            Returns true if Tasks instances are equal
            </summary>
            <param name="input">Instance of Tasks to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Tasks.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.Tasks.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.TimeEntries">
            <summary>
            TimeEntries
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntries.Pagination">
            <summary>
            Gets or Sets Pagination
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntries.Items">
            <summary>
            Gets or Sets Items
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntries.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntries.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntries.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntries.Equals(Xero.NetStandard.OAuth2.Model.Project.TimeEntries)">
            <summary>
            Returns true if TimeEntries instances are equal
            </summary>
            <param name="input">Instance of TimeEntries to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntries.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntries.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.TimeEntry">
            <summary>
            TimeEntry
            </summary>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.StatusEnum">
            <summary>
            Status of the time entry. By default a time entry is created with status of &#x60;ACTIVE&#x60;. A &#x60;LOCKED&#x60; state indicates that the time entry is currently changing state (for example being invoiced). Updates are not allowed when in this state. It will have a status of INVOICED once it is invoiced.
            </summary>
            <value>Status of the time entry. By default a time entry is created with status of &#x60;ACTIVE&#x60;. A &#x60;LOCKED&#x60; state indicates that the time entry is currently changing state (for example being invoiced). Updates are not allowed when in this state. It will have a status of INVOICED once it is invoiced.</value>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for value: ACTIVE
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.StatusEnum.LOCKED">
            <summary>
            Enum LOCKED for value: LOCKED
            </summary>
        </member>
        <member name="F:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.StatusEnum.INVOICED">
            <summary>
            Enum INVOICED for value: INVOICED
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.Status">
            <summary>
            Status of the time entry. By default a time entry is created with status of &#x60;ACTIVE&#x60;. A &#x60;LOCKED&#x60; state indicates that the time entry is currently changing state (for example being invoiced). Updates are not allowed when in this state. It will have a status of INVOICED once it is invoiced.
            </summary>
            <value>Status of the time entry. By default a time entry is created with status of &#x60;ACTIVE&#x60;. A &#x60;LOCKED&#x60; state indicates that the time entry is currently changing state (for example being invoiced). Updates are not allowed when in this state. It will have a status of INVOICED once it is invoiced.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.TimeEntryId">
            <summary>
            Identifier of the time entry.
            </summary>
            <value>Identifier of the time entry.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.UserId">
            <summary>
            The xero user identifier of the person who logged time.
            </summary>
            <value>The xero user identifier of the person who logged time.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.ProjectId">
            <summary>
            Identifier of the project, that the task (which the time entry is logged against) belongs to.
            </summary>
            <value>Identifier of the project, that the task (which the time entry is logged against) belongs to.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.TaskId">
            <summary>
            Identifier of the task that time entry is logged against.
            </summary>
            <value>Identifier of the task that time entry is logged against.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.DateUtc">
            <summary>
            The date time that time entry is logged on. UTC Date Time in ISO-8601 format.
            </summary>
            <value>The date time that time entry is logged on. UTC Date Time in ISO-8601 format.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.DateEnteredUtc">
            <summary>
            The date time that time entry is created. UTC Date Time in ISO-8601 format. By default it is set to server time.
            </summary>
            <value>The date time that time entry is created. UTC Date Time in ISO-8601 format. By default it is set to server time.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.Duration">
            <summary>
            The duration of logged minutes.
            </summary>
            <value>The duration of logged minutes.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.Description">
            <summary>
            A description of the time entry.
            </summary>
            <value>A description of the time entry.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.Equals(Xero.NetStandard.OAuth2.Model.Project.TimeEntry)">
            <summary>
            Returns true if TimeEntry instances are equal
            </summary>
            <param name="input">Instance of TimeEntry to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntry.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate">
            <summary>
            TimeEntryCreateOrUpdate
            </summary>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate" /> class.
            </summary>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate.UserId">
            <summary>
            The xero user identifier of the person logging the time.
            </summary>
            <value>The xero user identifier of the person logging the time.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate.TaskId">
            <summary>
            Identifier of the task that time entry is logged against.
            </summary>
            <value>Identifier of the task that time entry is logged against.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate.DateUtc">
            <summary>
            Date time entry is logged on. UTC Date Time in ISO-8601 format.
            </summary>
            <value>Date time entry is logged on. UTC Date Time in ISO-8601 format.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate.Duration">
            <summary>
            Number of minutes to be logged. Duration is between 1 and 59940 inclusively.
            </summary>
            <value>Number of minutes to be logged. Duration is between 1 and 59940 inclusively.</value>
        </member>
        <member name="P:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate.Description">
            <summary>
            An optional description of the time entry, will be set to null if not provided during update.
            </summary>
            <value>An optional description of the time entry, will be set to null if not provided during update.</value>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate.Equals(Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate)">
            <summary>
            Returns true if TimeEntryCreateOrUpdate instances are equal
            </summary>
            <param name="input">Instance of TimeEntryCreateOrUpdate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Xero.NetStandard.OAuth2.Model.Project.TimeEntryCreateOrUpdate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
    </members>
</doc>
